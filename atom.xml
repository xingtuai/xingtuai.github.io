<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>James Blog</title>
  
  <subtitle>不为繁华易匠心</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jemgeek.com/"/>
  <updated>2019-11-01T13:15:50.296Z</updated>
  <id>http://jemgeek.com/</id>
  
  <author>
    <name>James</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安装 Docker 和 Docker Compose (Ubuntu)</title>
    <link href="http://jemgeek.com/archives/2019/docker-base-install.html"/>
    <id>http://jemgeek.com/archives/2019/docker-base-install.html</id>
    <published>2019-10-12T12:33:47.000Z</published>
    <updated>2019-11-01T13:15:50.296Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/10/13/KQnDgsy8Gmuxcje.png" alt="install-docker-on-ubuntu-1804.png"></p><p><code>Docker</code> 作为一种新兴的虚拟化方式，<code>Docker</code> 跟传统的虚拟机方式相比具有众多的优势。<code>Docker</code> <strong>可以更高效的利用系统资源</strong>、<strong>更快速的启动时间</strong>、<strong>一致的运行环境</strong>、<strong>持续交付和部署</strong>、<strong>更轻松的迁移</strong>、<strong>更轻松的维护和扩展</strong>。</p><p>博主第一次使用<code>Docker</code>就深深喜欢上了这种方式，一次配置，到处运行，不用再反反复复的配置环境可以说是非常的方便了。本篇博客就来说一说<code>Docker</code>的安装及基本使用方法，后续还会不定时的更新<code>Docker</code>系列博客。</p><a id="more"></a><h2 id="对比传统虚拟机"><a href="#对比传统虚拟机" class="headerlink" title="对比传统虚拟机"></a>对比传统虚拟机</h2><p><code>Docker</code>是什么？<code>Docker</code>属于<code>容器</code>的一种技术封装，提供更为简单易用的使用接口，让开发运维人员可以更方便快捷的使用<code>容器</code>。</p><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:left">容器</th><th style="text-align:left">虚拟机</th></tr></thead><tbody><tr><td style="text-align:left">启动</td><td style="text-align:left">秒级</td><td style="text-align:left">分钟级</td></tr><tr><td style="text-align:left">硬盘使用</td><td style="text-align:left">一般为 MB</td><td style="text-align:left">一般为 GB</td></tr><tr><td style="text-align:left">性能</td><td style="text-align:left">接近原生</td><td style="text-align:left">弱于</td></tr><tr><td style="text-align:left">系统支持量</td><td style="text-align:left">单机支持上千个容器</td><td style="text-align:left">一般几十个</td></tr></tbody></table><p>从上面对比来看，<code>容器</code>的各方面性能及特性是优于<code>虚拟机</code>的。</p><h2 id="Docker-的安装"><a href="#Docker-的安装" class="headerlink" title="Docker 的安装"></a>Docker 的安装</h2><p><code>Docker</code>是一个开放源码的产品，分为 <strong>社区版</strong>（Community Edition，缩写为 CE）和 <strong>企业版</strong>（Enterprise Edition，缩写为 EE）。社区版是免费的，而企业版包含一些收费服务，一般来说个人开发者用社区版就足够了，本篇博文的教程也只是针对社区版。</p><p>安装环境及版本：</p><ul><li>系统：ubuntu 18.04 LTS</li><li>Docker 版本：18.9.05</li></ul><p>英文好的小伙伴也可以直接阅读官方文档，本文只详细介绍 <code>Ubuntu</code> 系统下的 <code>Docker</code> 安装，其他系统的安装请自行参考官方文档。</p><ul><li><a href="https://docs.docker.com/docker-for-mac/install/" target="_blank" rel="noopener">Mac</a></li><li><a href="https://docs.docker.com/docker-for-windows/install/" target="_blank" rel="noopener">Windows</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">CentOS</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/debian/" target="_blank" rel="noopener">Debian</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/fedora/" target="_blank" rel="noopener">Fedora</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Ubuntu</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/binaries/" target="_blank" rel="noopener">其他Linux版本</a></li></ul><h3 id="卸载老版本"><a href="#卸载老版本" class="headerlink" title="卸载老版本"></a>卸载老版本</h3><p>一般来说<code>Ubuntu</code>系统中默认是不会安装<code>Docker</code>的，但是如果安装了老版本的话可以使用下面的命令进行卸载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure><h3 id="安装-Docker-CE"><a href="#安装-Docker-CE" class="headerlink" title="安装 Docker CE"></a>安装 Docker CE</h3><p>安装<code>Docker CE</code>有多种不同的方式：</p><ol><li><p>设置<code>Docker</code>的存储库，然后安装。这种方式便于安装及更新，也是最推荐的方式。</p></li><li><p>下载DEB软件包，手动安装并完全手动管理升级。</p></li><li><p>在测试和开发环境中，部分用户选择使用自动便捷脚本来安装<code>Docker</code>。</p></li></ol><p>本篇博客将介绍第一种安装方式。</p><p><strong>设置 Docker 存储库</strong></p><ol><li>更新<code>apt</code>包索引：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><ol start="2"><li>允许<code>apt</code>通过HTTPS使用存储库来安装软件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common</span><br></pre></td></tr></table></figure><ol start="3"><li>添加<code>Docker</code>官方 GPG 密钥：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>添加完成之后，使用下面命令进行验证秘钥，通过搜索指纹的最后8个字符，验证现在是否具有指纹<code>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</code>的密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class="line"></span><br><span class="line">pub   rsa4096 2017-02-22 [SCEA]</span><br><span class="line">      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88</span><br><span class="line">uid           [ unknown] Docker Release (CE deb) &lt;docker@docker.com&gt;</span><br><span class="line">sub   rsa4096 2017-02-22 [S]</span><br></pre></td></tr></table></figure><ol start="4"><li>使用下面的命令去设置稳定版的存储库。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br></pre></td></tr></table></figure><p><strong>安装 Docker CE</strong></p><ol><li>更新<code>apt</code>包索引：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><ol start="2"><li>安装最新版本的 <code>Docker CE</code> 和 <code>containerd</code>:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><ol start="3"><li>验证<code>Docker</code></li></ol><p>使用下面的命令查看<code>Docker</code>的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker -v</span><br></pre></td></tr></table></figure><p>然后使用下面的命令可以运行<code>hello-world</code>程序，因为<code>Docker</code>中还没有<code>hello-world</code>程序的镜像，所以会先<code>pull</code>（下载）下来然后运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>如果看到打印 <code>Hello for Docker!</code>说明程序已经运行成功了。</p><p><img src="https://i.loli.net/2019/04/24/5cc0730bc3ea9.png" alt="docker-run-hello-world.png"></p><p><strong>卸载 Docker</strong></p><ol><li>卸载 Docker CE</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get purge docker-ce</span><br></pre></td></tr></table></figure><ol start="2"><li>主机上的镜像、容器、卷或者自定义配置文件是不会自动删除的，需要使用下面的命令手动删除这些文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><h2 id="Docker-的使用"><a href="#Docker-的使用" class="headerlink" title="Docker 的使用"></a>Docker 的使用</h2><h3 id="Docker-的启动、关闭等"><a href="#Docker-的启动、关闭等" class="headerlink" title="Docker 的启动、关闭等"></a>Docker 的启动、关闭等</h3><p>可以使用下面的命令对<code>Docker</code>进行启动、关闭、重启等操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 Docker</span></span><br><span class="line">$ sudo service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 Docker</span></span><br><span class="line">$ sudo service docker stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Docker</span></span><br><span class="line">$ sudo service docker restart</span><br></pre></td></tr></table></figure><p>也可以使用<code>systemctl</code>命令进行操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 Docker</span></span><br><span class="line">$ sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 Docker</span></span><br><span class="line">$ sudo systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Docker</span></span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="iamge-镜像文件"><a href="#iamge-镜像文件" class="headerlink" title="iamge 镜像文件"></a>iamge 镜像文件</h3><p>Docker 需要把应用程序及其相关的依赖打包成为一个<code>image</code>镜像文件，这些镜像文件可以存储在云端的存储库中，用户可以将云端的镜像文件下载到本地，然后通过这个文件，生成<code>Docker容器</code>的实例。</p><p>所以当你将你的应用程序及其依赖打包成一个image文件之后，可以将其上传到云端的仓库中，然后在任何一个装有Docker的机器中运行即可，这就是一次配置，到处运行，可以说是非常之方便了。</p><p><code>Docker</code> 官方的仓库是 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>，这是最重要，也是最常用的一个image仓库了。</p><h3 id="运行一个程序"><a href="#运行一个程序" class="headerlink" title="运行一个程序"></a>运行一个程序</h3><p>下面我们使用上面使用过的<code>hello-world</code>进行说明<code>image</code>的使用。</p><ol><li>查看本地<code>image</code>列表</li></ol><p>使用下面的命令查看本地已经存在的<code>image</code>文件都有哪些，可以查看这些镜像的名称，标签，镜像ID，被创建时间，镜像大小。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地 image</span></span><br><span class="line">$ sudo docker image ls</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/24/5cc078622150a.png" alt="docker-image-ls"></p><ol start="2"><li>下载<code>image</code>到本地</li></ol><p>使用下面的命令将<code>image</code>文件从云端下载到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 image</span></span><br><span class="line">$ sudo docker pull hello-world</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/24/5cc079488ef4d.png" alt="docker-pull.png"></p><ol start="3"><li>运行<code>image</code></li></ol><p>使用下面的命令可以运行<code>image</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>如果看到打印 <code>Hello for Docker!</code>说明<code>hello-world</code>程序已经运行成功了。</p><ol start="4"><li>删除<code>image</code></li></ol><p>使用下面的命令删除本地的<code>image</code>文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 image</span></span><br><span class="line">$ sudo docker image rm -f hello-world</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/24/5cc079b973926.png" alt="docker-image-rm.png"></p><h3 id="使用中国官方镜像加速"><a href="#使用中国官方镜像加速" class="headerlink" title="使用中国官方镜像加速"></a>使用中国官方镜像加速</h3><p>通过 Docker 官方镜像加速，中国区用户能够快速访问最流行的 Docker 镜像。该镜像托管于中国大陆，本地用户现在将会享受到更快的下载速度和更强的稳定性，从而能够更敏捷地开发和交付 Docker 化应用。</p><p>Docker 中国官方镜像加速可通过 <code>registry.docker-cn.com</code> 访问。该镜像库只包含流行的公有镜像。私有镜像仍需要从美国镜像库中拉取。</p><p>我们可以使用以下命令直接从该镜像加速地址进行拉取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull registry.docker-cn.com/myname/myrepo:mytag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line">$ docker pull registry.docker-cn.com/library/ubuntu:16.04</span><br></pre></td></tr></table></figure><p>为了永久性保留更改，我们可以修改 <code>/etc/docker/daemon.json</code> 文件并添加上 <code>registry-mirrors</code> 键值,如果文件不存在则新建。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://registry.docker-cn.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你有阿里云账号的话，还可以进入阿里云控制台，使用<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">阿里云的镜像加速器</a>。进入网站之后会看到系统为你分配的加速器地址，添加到 <code>daemon.json</code> 文件中即可。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://38u6me2o.mirror.aliyuncs.com"</span>,</span><br><span class="line">    <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用下面的命令使配置生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker Compose"></a>安装 Docker Compose</h3><p>Docker Compose 可以前往<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">Compose repository release page on GitHub</a>下载，也可以使用<code>curl</code>命令在终端进行下载。</p><ol><li>运行下面的命令来下载 Docker Compose 当前稳定版本：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><ol start="2"><li>添加权限：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><ol start="3"><li>验证安装：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.24.1, build 4667896b</span><br></pre></td></tr></table></figure><ol start="4"><li>卸载 Docker Compose:</li></ol><p>如果你是使用<code>curl</code>的方式安装的，则运行下面的命令删除docker-conpose的文件（本文使用此种方式安装）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>如果你是使用 <code>pip</code> 的方式安装的，则运行下面的命令删除docker-conpose的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip uninstall docker-compose</span><br></pre></td></tr></table></figure><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>关于<code>Docker</code>的知识还有很多，我会在后续的文章继续介绍，欢迎您持续关注本博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/10/13/KQnDgsy8Gmuxcje.png&quot; alt=&quot;install-docker-on-ubuntu-1804.png&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt; 作为一种新兴的虚拟化方式，&lt;code&gt;Docker&lt;/code&gt; 跟传统的虚拟机方式相比具有众多的优势。&lt;code&gt;Docker&lt;/code&gt; &lt;strong&gt;可以更高效的利用系统资源&lt;/strong&gt;、&lt;strong&gt;更快速的启动时间&lt;/strong&gt;、&lt;strong&gt;一致的运行环境&lt;/strong&gt;、&lt;strong&gt;持续交付和部署&lt;/strong&gt;、&lt;strong&gt;更轻松的迁移&lt;/strong&gt;、&lt;strong&gt;更轻松的维护和扩展&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;博主第一次使用&lt;code&gt;Docker&lt;/code&gt;就深深喜欢上了这种方式，一次配置，到处运行，不用再反反复复的配置环境可以说是非常的方便了。本篇博客就来说一说&lt;code&gt;Docker&lt;/code&gt;的安装及基本使用方法，后续还会不定时的更新&lt;code&gt;Docker&lt;/code&gt;系列博客。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://jemgeek.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://jemgeek.com/tags/Docker/"/>
    
      <category term="Docker Compose" scheme="http://jemgeek.com/tags/Docker-Compose/"/>
    
      <category term="ubuntu" scheme="http://jemgeek.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Docker 搭建 MySQL 主从复制集群</title>
    <link href="http://jemgeek.com/archives/2019/docker-install-mysql-master-slave.html"/>
    <id>http://jemgeek.com/archives/2019/docker-install-mysql-master-slave.html</id>
    <published>2019-10-12T12:33:47.000Z</published>
    <updated>2020-03-21T09:53:22.092Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/10/13/UB2IC1wopdhVeKZ.jpg" alt="docker-install-mysql.jpg"></p><p>本篇将介绍如何使用 Docker 部署 MySQL 数据库及远程访问配置。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/10/13/UB2IC1wopdhVeKZ.jpg&quot; alt=&quot;docker-install-mysql.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;本篇将介绍如何使用 Docker 部署 MySQL 数据库及远程访问配置。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://jemgeek.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://jemgeek.com/tags/Docker/"/>
    
      <category term="MySQL" scheme="http://jemgeek.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>安装 Docker 和 Docker Compose (Centos 7)</title>
    <link href="http://jemgeek.com/archives/2019/docker-install-centos.html"/>
    <id>http://jemgeek.com/archives/2019/docker-install-centos.html</id>
    <published>2019-10-12T12:33:47.000Z</published>
    <updated>2019-10-25T16:51:14.357Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/10/26/Kw17keXPrWdIihU.png" alt="how-to-install-docker-on-centos7.png"></p><p>在上一篇博客中发布了在Ubuntu系统中安装 Docker 及 Docker Compose 的教程，然而在企业用服务器中<code>Centos 7</code>系统可能更受欢迎，那么本篇就说一说在 Centos 7 服务器系统中如何安装 Docker 及 Docker Compose。</p><a id="more"></a><h2 id="Docker-的安装"><a href="#Docker-的安装" class="headerlink" title="Docker 的安装"></a>Docker 的安装</h2><p><code>Docker</code>是一个开放源码的产品，分为 <strong>社区版</strong>（Community Edition，缩写为 CE）和 <strong>企业版</strong>（Enterprise Edition，缩写为 EE）。社区版是免费的，而企业版包含一些收费服务，一般来说个人开发者用社区版就足够了，本篇博文的教程也只是针对社区版。</p><p>安装环境及版本：</p><ul><li>系统：Centos 7.6 服务器系统</li><li>Docker 版本：19.03.3</li></ul><p>Ubuntu 系统中的安装教程请阅读<a href="http://jemgeek.com/archives/2019/docker-base-install.html">安装 Docker 和 Docker Compose (Ubuntu)</a></p><p>英文好的小伙伴也可以直接阅读官方文档，本文只详细介绍 <code>Centos 7</code> 系统下的 <code>Docker</code> 及 <code>Docker Compose</code> 安装，其他系统的安装请自行参考官方文档。</p><ul><li><a href="https://docs.docker.com/docker-for-mac/install/" target="_blank" rel="noopener">Mac</a></li><li><a href="https://docs.docker.com/docker-for-windows/install/" target="_blank" rel="noopener">Windows</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">CentOS</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/debian/" target="_blank" rel="noopener">Debian</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/fedora/" target="_blank" rel="noopener">Fedora</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Ubuntu</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/binaries/" target="_blank" rel="noopener">其他Linux版本</a></li></ul><h3 id="卸载老版本"><a href="#卸载老版本" class="headerlink" title="卸载老版本"></a>卸载老版本</h3><p>一般来说<code>Centos 7</code>系统中默认是不会安装<code>Docker</code>的，但是如果安装了老版本的话可以使用下面的命令进行卸载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h3 id="安装-Docker-CE"><a href="#安装-Docker-CE" class="headerlink" title="安装 Docker CE"></a>安装 Docker CE</h3><ol><li>更新<code>yum</code>包索引：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum update</span><br></pre></td></tr></table></figure><ol start="2"><li>安装一些必要的依赖包：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><ol start="3"><li>配置 docker-ce 仓库：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ol start="4"><li>安装 docker-ce:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-ce <span class="comment"># 安装过程中跳出确认则输入 y</span></span><br></pre></td></tr></table></figure><p>至此，Docker 已经安装完成了，Docker 服务是没有启动的，操作系统里的 docker 组被创建，但是没有用户在这个组里。</p><p>使用下面的命令将你的用户添加到 docker 的用户组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo usermod -aG docker $(yourname)</span><br></pre></td></tr></table></figure><p>添加完成后重启系统生效。</p><p>设置 Docker 开机自启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>启动 Docker 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><ol start="5"><li>验证<code>Docker</code></li></ol><p>使用下面的命令查看<code>Docker</code>的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker -v</span><br><span class="line">Docker version 19.03.3, build a872fc2f86</span><br></pre></td></tr></table></figure><p>然后使用下面的命令可以运行<code>hello-world</code>程序，因为<code>Docker</code>中还没有<code>hello-world</code>程序的镜像，所以会先<code>pull</code>（下载）下来然后运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>如果看到打印 <code>Hello for Docker!</code>说明程序已经运行成功了。</p><p><img src="https://i.loli.net/2019/10/13/FgLUd1AWtxlaoEh.jpg" alt="docker-run-hello-world-centos.png"></p><h3 id="更新及卸载"><a href="#更新及卸载" class="headerlink" title="更新及卸载"></a>更新及卸载</h3><ol><li>更新 Docker CE</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum update docker-ce</span><br></pre></td></tr></table></figure><ol start="2"><li>卸载 Docker CE</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker-ce</span><br></pre></td></tr></table></figure><ol start="3"><li>主机上的镜像、容器、卷或者自定义配置文件是不会自动删除的，需要使用下面的命令手动删除这些文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><h3 id="Docker-Compose-安装"><a href="#Docker-Compose-安装" class="headerlink" title="Docker Compose 安装"></a>Docker Compose 安装</h3><ol><li>安装额外依赖包：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install epel-release</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 python-pip:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y python-pip</span><br></pre></td></tr></table></figure><ol start="3"><li>安装 Docker Compose:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install docker-compose</span><br></pre></td></tr></table></figure><ol start="4"><li>升级 python 包：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum upgrade python*</span><br></pre></td></tr></table></figure><ol start="5"><li>验证安装：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose version</span><br><span class="line">docker-compose version 1.24.1, build 4667896</span><br><span class="line">docker-py version: 3.7.3</span><br><span class="line">CPython version: 2.7.5</span><br><span class="line">OpenSSL version: OpenSSL 1.0.2k-fips  26 Jan 2017</span><br></pre></td></tr></table></figure><ol start="6"><li>卸载 Docker Compose:</li></ol><p>如果你是使用<code>curl</code>的方式安装的，则运行下面的命令删除docker-conpose的文件（本文使用此种方式安装）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>如果你是使用 <code>pip</code> 的方式安装的，则运行下面的命令删除docker-conpose的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip uninstall docker-compose</span><br></pre></td></tr></table></figure><h2 id="Docker-的使用"><a href="#Docker-的使用" class="headerlink" title="Docker 的使用"></a>Docker 的使用</h2><h3 id="Docker-的启动、关闭等"><a href="#Docker-的启动、关闭等" class="headerlink" title="Docker 的启动、关闭等"></a>Docker 的启动、关闭等</h3><p>可以使用下面的命令对<code>Docker</code>进行启动、关闭、重启等操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 Docker</span></span><br><span class="line">$ sudo service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 Docker</span></span><br><span class="line">$ sudo service docker stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Docker</span></span><br><span class="line">$ sudo service docker restart</span><br></pre></td></tr></table></figure><p>也可以使用<code>systemctl</code>命令进行操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 Docker</span></span><br><span class="line">$ sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 Docker</span></span><br><span class="line">$ sudo systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Docker</span></span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="Docker-及镜像"><a href="#Docker-及镜像" class="headerlink" title="Docker 及镜像"></a>Docker 及镜像</h3><p>请阅读<a href="http://jemgeek.com/archives/2019/docker-base-install.html">安装 Docker 和 Docker Compose (Ubuntu)</a>后面的部分，在此不再赘述。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>关于<code>Docker</code>的知识还有很多，我会在后续的文章继续介绍，欢迎您持续关注本博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/10/26/Kw17keXPrWdIihU.png&quot; alt=&quot;how-to-install-docker-on-centos7.png&quot;&gt;&lt;/p&gt;&lt;p&gt;在上一篇博客中发布了在Ubuntu系统中安装 Docker 及 Docker Compose 的教程，然而在企业用服务器中&lt;code&gt;Centos 7&lt;/code&gt;系统可能更受欢迎，那么本篇就说一说在 Centos 7 服务器系统中如何安装 Docker 及 Docker Compose。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://jemgeek.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://jemgeek.com/tags/Docker/"/>
    
      <category term="Docker Compose" scheme="http://jemgeek.com/tags/Docker-Compose/"/>
    
      <category term="centos" scheme="http://jemgeek.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Docker 安装 MySQL</title>
    <link href="http://jemgeek.com/archives/2019/docker-mysql-install.html"/>
    <id>http://jemgeek.com/archives/2019/docker-mysql-install.html</id>
    <published>2019-10-12T12:33:47.000Z</published>
    <updated>2019-10-13T07:40:04.558Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/10/13/UB2IC1wopdhVeKZ.jpg" alt="docker-install-mysql.jpg"></p><p>本篇将介绍如何使用 Docker 部署 MySQL 数据库及远程访问配置。</p><a id="more"></a><h2 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>使用下面的命令拉取 MySQL 数据库的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker pull mysql  <span class="comment"># 拉取最新版本的镜像，当前为 MySQL 8 版本，tag 为 latest</span></span><br><span class="line"></span><br><span class="line">$ sudo docker pull mysql:5.7 <span class="comment"># 指定拉取 MySQL 5.7 版本</span></span><br></pre></td></tr></table></figure><p>也可以使用搜索命令，查找其他的 MySQL 相关镜像，其中有标识 Stars 数，即受欢迎程度。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker search mysql</span><br></pre></td></tr></table></figure><h3 id="运行-MySQL"><a href="#运行-MySQL" class="headerlink" title="运行 MySQL"></a>运行 MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -p 3306:3306 \</span><br><span class="line">--name mysql \</span><br><span class="line">-v <span class="variable">$PWD</span>/conf:/etc/mysql/conf.d \</span><br><span class="line">-v <span class="variable">$PWD</span>/logs:/logs \</span><br><span class="line">-v <span class="variable">$PWD</span>/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=your-password \</span><br><span class="line">-d mysql</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li>-p 3306:3306 ：将容器的 3306 端口映射到主机的 3306 端口。</li><li>-v $PWD/conf:/etc/mysql/conf.d ：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。</li><li>-v $PWD/logs:/logs ：将主机当前目录下的 logs 目录挂载到容器的 /logs。</li><li>-v $PWD/data:/var/lib/mysql ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。</li><li>-e MYSQL_ROOT_PASSWORD=your-password ：初始化 root 用户的密码,建议使用复杂度高的密码。</li><li>-d mysql : 要部署的镜像名，如果是5.7版本的话，这里则为mysql:5.7</li></ul><h2 id="配置远程访问"><a href="#配置远程访问" class="headerlink" title="配置远程访问"></a>配置远程访问</h2><p>远程访问 MySQL 属于基本配置，但是在配置的时候要注意安全性问题，否则将存在安全性隐患，尤其是企业用服务器更要注重安全性。</p><p>并且需要注意服务器防火墙要开启 <code>3306</code> 端口，服务器提供商的安全组中也需要开启，否则会无法访问哦。</p><p>要配置远程访问，先要打开 MySQL 的控制终端，使用下面的命令开启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker <span class="built_in">exec</span> -it mysql bash <span class="comment"># 进入 MySQL 容器</span></span><br><span class="line"></span><br><span class="line">$ mysql -uroot -p <span class="comment"># 登录 MySQL，执行后输入密码进入 MySQL</span></span><br><span class="line"></span><br><span class="line">$ use mysql; <span class="comment"># 选择使用 mysql 数据库</span></span><br></pre></td></tr></table></figure><h3 id="MySQL-8-配置"><a href="#MySQL-8-配置" class="headerlink" title="MySQL 8 配置"></a>MySQL 8 配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER <span class="string">'username'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'password'</span>;</span><br><span class="line"><span class="comment"># 创建一个账号，用来进行远程访问；</span></span><br><span class="line"><span class="comment"># &#123;usernama&#125; 是远程访问登录的用户名，不建议用 root;</span></span><br><span class="line"><span class="comment"># &#123;password&#125; 是远程访问的登录密码;</span></span><br><span class="line"><span class="comment"># '%'代表的是所有IP，如果可以尽量设置指定 IP 或 IP 段</span></span><br><span class="line"></span><br><span class="line">GRANT ALL ON *.* TO <span class="string">'username'</span>@<span class="string">'%'</span>;</span><br><span class="line"><span class="comment"># 赋予所有权限给之前创建的账号</span></span><br><span class="line"></span><br><span class="line">ALTER USER <span class="string">'username'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'password'</span>;</span><br><span class="line"><span class="comment"># 确认使用这里的密码登录此账号</span></span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="comment"># 刷新权限</span></span><br></pre></td></tr></table></figure><p>完整命令如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER <span class="string">'james'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'123456asd'</span>;</span><br><span class="line"><span class="comment"># 创建一个账号-james，用来进行远程访问；</span></span><br><span class="line"></span><br><span class="line">GRANT ALL ON *.* TO <span class="string">'james'</span>@<span class="string">'%'</span>;</span><br><span class="line"><span class="comment"># 赋予所有权限给之前创建的账号:james</span></span><br><span class="line"></span><br><span class="line">ALTER USER <span class="string">'james'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'123456asd'</span>;</span><br><span class="line"><span class="comment"># 确认使用密码&#123;123456asd&#125;登录此账号&#123;james&#125;</span></span><br><span class="line"><span class="comment"># 密码尽量复杂，安全性更高。</span></span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="comment"># 刷新权限</span></span><br></pre></td></tr></table></figure><p>配置完毕后，使用 Navicat 工具或其他工具进行连接测试即可。</p><h3 id="MySQL-5-7-配置"><a href="#MySQL-5-7-配置" class="headerlink" title="MySQL 5.7 配置"></a>MySQL 5.7 配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">'username'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'password'</span> WITH GRANT OPTION;</span><br><span class="line"><span class="comment"># &#123;usernama&#125; 是远程访问登录的用户名，不建议用 root;</span></span><br><span class="line"><span class="comment"># &#123;password&#125; 是远程访问的登录密码;</span></span><br><span class="line"><span class="comment"># '%'代表的是所有IP，如果可以尽量设置指定 IP 或 IP 段</span></span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="comment"># 刷新权限</span></span><br></pre></td></tr></table></figure><p>配置完毕后，使用 Navicat 工具或其他工具进行连接测试即可。</p><blockquote><p>注：如果无法访问请注意防火墙 <code>3306</code> 端口是否开启，服务器提供商的安全组中的端口是否开启。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/10/13/UB2IC1wopdhVeKZ.jpg&quot; alt=&quot;docker-install-mysql.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;本篇将介绍如何使用 Docker 部署 MySQL 数据库及远程访问配置。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://jemgeek.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://jemgeek.com/tags/Docker/"/>
    
      <category term="MySQL" scheme="http://jemgeek.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>使用 Docker 搭建 GitLab</title>
    <link href="http://jemgeek.com/archives/2019/install-gitlab-with-docker.html"/>
    <id>http://jemgeek.com/archives/2019/install-gitlab-with-docker.html</id>
    <published>2019-04-25T13:51:47.000Z</published>
    <updated>2019-04-25T16:19:41.793Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/04/25/5cc1bc330a855.png" alt="gitlab-logo.png"></p><p>作为互联网工作者，相信对 <strong>GitHub</strong> 这个 <strong>全球最大的同性交友网站</strong> 一定不会陌生，<strong>GitHub</strong> 使用的是目前如日中天的 <strong>Git</strong> 分布式版本控制系统。</p><p><strong>Git</strong> 是什么？<strong>Git</strong> 是目前世界上最先进的分布式版本控制系统，没有之一！关于 <strong>Git</strong> 与 <strong>GitHub</strong> 的相关内容可以查看我往期的教程。而本篇博客要介绍的是如何搭建一套私人的类似于 <strong>GitHub</strong> 的网站【<strong>GitLab</strong>】，它可以为个人、组织、企业提供项目或代码的管理功能。</p><a id="more"></a><h2 id="Git-与-GitHub"><a href="#Git-与-GitHub" class="headerlink" title="Git 与 GitHub"></a>Git 与 GitHub</h2><p>具体请查看我往期的博客文章：</p><ul><li><a href="http://jemgeek.com/archives/2016/git-base-usage-summary.html">Git 基础用法总结</a></li><li><a href="http://jemgeek.com/archives/2016/git-github-base.html">Git 系列之初识 Git 与 Github</a></li><li><a href="http://jemgeek.com/archives/2016/git-github-base-usage.html">Git 系列之 Github 基础设置及使用详解</a></li></ul><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p><code>GitLab</code> 的搭建有多种方式，在本篇博客将介绍一种比较简单快捷的方式，那就是使用 Docker 来搭建。</p><ul><li>系统：Ubuntu 18.04</li><li>Docker: 18.9.05</li><li>GitLab: 最新版本 latest</li><li>需求内存：最低 2 GB</li></ul><p>想要使用 Docker 来搭建 GitLab 的话需要先安装 Docker, 关于 Docker 的详细安装步骤已经在我的上一篇博客中介绍了。请前往查看：<a href="http://jemgeek.com/archives/2019/docker-base-install.html">Docker 之 ubuntu 安装</a>。</p><h2 id="搭建-GitLab"><a href="#搭建-GitLab" class="headerlink" title="搭建 GitLab"></a>搭建 GitLab</h2><p>在按照上篇博客成功安装了 Docker 之后，我们就可以在 Docker 中来搭建 GitLab 了。</p><p><code>GitLab</code> 分为 <strong>社区版</strong>（Community Edition，缩写为 CE）和 <strong>企业版</strong>（Enterprise Edition，缩写为 EE）。社区版是免费的，而企业版包含一些收费服务，一般来说个人开发者用社区版就足够了，本篇博文的教程也只是针对社区版。</p><p>首先需要先下载 GitLab CE 的镜像，使用下面的命令进行下载，因为文件较大，所以可能需要一点时间，耐心等待即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不加 tag 则默认为最新版本 latest (一般使用这种)</span></span><br><span class="line">$ sudo docker pull gitlab/gitlab-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果需要下载其他版本，加上对应的 tag 即可，如：</span></span><br><span class="line">$ sudo docker pull gitlab/gitlab-ce:rc</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/25/5cc1c9ef16b7f.png" alt="docker-pull-gitlab.png"></p><p>下载完成之后只需要一行命令即可启动 <code>GitLab</code> ，复制下面的命令直接运行即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run --detach \</span><br><span class="line">  --hostname gitlab.example.com \</span><br><span class="line">  --publish 443:443 --publish 80:80 --publish 22:22 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume /srv/gitlab/config:/etc/gitlab \</span><br><span class="line">  --volume /srv/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">  --volume /srv/gitlab/data:/var/opt/gitlab \</span><br><span class="line">  gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><p>这条命令很长，我们来分解一下看看每行都代表什么意思。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run --detach \</span><br><span class="line">  --hostname gitlab.example.com \   <span class="comment"># 设置主机名或域名</span></span><br><span class="line">  --publish 443:443 --publish 80:80 --publish 22:22 \ <span class="comment"># 本地端口的映射</span></span><br><span class="line">  --name gitlab \     <span class="comment"># gitlab-ce 的镜像运行成为一个容器，这里是对容器的命名</span></span><br><span class="line">  --restart always \  <span class="comment"># 设置重启方式，always 代表一直开启，服务器开机后也会自动开启的</span></span><br><span class="line">  --volume /srv/gitlab/config:/etc/gitlab \   <span class="comment"># 将 gitlab 的配置文件目录映射到 /srv/gitlab/config 目录中</span></span><br><span class="line">  --volume /srv/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \ <span class="comment"># 将 gitlab 的log文件目录映射到 /srv/gitlab/logs 目录中</span></span><br><span class="line">  --volume /srv/gitlab/data:/var/opt/gitlab \ <span class="comment"># 将 gitlab 的数据文件目录映射到 /srv/gitlab/data 目录中</span></span><br><span class="line">  gitlab/gitlab-ce:latest  <span class="comment"># 需要运行的镜像</span></span><br></pre></td></tr></table></figure><p>运行成功之后，可以使用下面的命令列表所有的容器，当然其中应该包括刚运行的 <code>gitlab</code>容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker container ls</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/25/5cc1cb96e8cf6.png" alt="docker-run-gitlab.png"></p><p>如上图所示，可以看到 <code>GitLab</code> 已经在运行了，其他有一个属性 <code>STATUS</code> 为 <code>health: starting</code>，说明 gitlab 的服务正在启动中，还没有启动完毕。等这个状态变成 <code>healthy</code> 时则说明已经部署完成，可以访问了。使用 <code>ip addr</code> 命令查看系统的 IP 地址，然后在浏览器输入地址即可访问。</p><p><img src="https://i.loli.net/2019/04/25/5cc1cdf515995.png" alt="gitlab-login.png"></p><p><img src="https://i.loli.net/2019/04/25/5cc1cdf6222d7.png" alt="gitlab-show.png"></p><h2 id="配置邮件服务器"><a href="#配置邮件服务器" class="headerlink" title="配置邮件服务器"></a>配置邮件服务器</h2><p>想要让 GitLab 给你发送邮件，还要配置一下邮件服务器，这里以QQ邮箱的 <strong>IMAP/SMTP服务</strong> 来配置。</p><p>打开邮箱-&gt;设置-&gt;账户，然后开启 <strong>IMAP/SMTP服务</strong>，然后根据文档获取 <strong>授权码</strong> ，这步比较重要。</p><p>然后打开在系统中打开文件 <code>/srv/gitlab/config/gitlab.rb</code> 文件，可以使用<code>gedit</code>、<code>vi</code>、<code>vim</code>等等编辑器编辑。找到 <code>Email Settings</code>的注释位置，然后添加以下内容：</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### Email Settings</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_enable'</span>] = <span class="literal">true</span> <span class="comment"># 开启 SMTP 功能</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_address'</span>] = <span class="string">"smtp.qq.com"</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_port'</span>] = <span class="number">465</span> <span class="comment"># 端口不可以选择587，测试过会发送邮件失败</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_user_name'</span>] = <span class="string">"212****71@qq.com"</span> <span class="comment"># * 你的邮箱账号，也可以是ge**lin<span class="doctag">@qq</span>.com等</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_password'</span>] = <span class="string">"cdns********fdgc"</span> <span class="comment"># * 授权码，不是密码</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_authentication'</span>] = <span class="string">"login"</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_enable_starttls_auto'</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_tls'</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">'gitlab_email_from'</span>] = <span class="string">'212****71@qq.com'</span> <span class="comment"># * 发件人信息，必须跟‘smtp_user_name’保持一致，否则报错</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_domain'</span>] = <span class="string">"qq.com"</span> <span class="comment"># 修改并不影响 可修改为exmail.qq.com/james.com 经测试完全不影响，删除也不影响，并且发送的邮件都是一样的。</span></span><br></pre></td></tr></table></figure><p>上面这些参数，除了注释开头加了 <code>*</code> 的需要修改为你自己的信息之外，其他信息照写即可，配置完成后保存。然后输入下面的命令使配置生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 Docker安装的 gitlab 只能使用下面的命令，gitlab-ctl reconfigure命令是不会生效的</span></span><br><span class="line">$ sudo docker <span class="built_in">exec</span> gitlab gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>使配置生效之后我们可以使用 gitlab 自带的工具进行一下测试。依次执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 gitlab 的 bash 工具</span></span><br><span class="line">$ sudo docker <span class="built_in">exec</span> -it gitlab bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启 gitlab-rails 工具</span></span><br><span class="line">$ gitlab-rails console production</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送邮件进行测试，换自己邮箱哈~</span></span><br><span class="line">Notify.test_email(<span class="string">'gekylin@gmail.com'</span>, <span class="string">'Message Subject'</span>, <span class="string">'Message Body'</span>).deliver_now</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/25/5cc1d2eb8d2d9.png" alt="mail-test.png"></p><p>测试完成之后重启 gitlab 即可。</p><h2 id="配置-Git-仓库访问路径"><a href="#配置-Git-仓库访问路径" class="headerlink" title="配置 Git 仓库访问路径"></a>配置 Git 仓库访问路径</h2><p>在之前第一次运行 gitlab 容器的时候，有一个参数 <code>hostname</code> 为 <code>gitlab.example.com</code> , 如果你没有配置相应域名的话，你的仓库的地址将会变为下面这样：</p><ul><li>ssh : <a href="mailto:git@gitlab.example.com" target="_blank" rel="noopener">git@gitlab.example.com</a>:James/test.git</li><li>http：<a href="http://gitlab.example.com/James/test.git" target="_blank" rel="noopener">http://gitlab.example.com/James/test.git</a></li></ul><p>如果域名不存在的话，这个地址是无法进行 <code>clone</code> 的。</p><p>为了解决这个问题，我们可以设置成 IP 或 你配置了的域名来访问。</p><p>打开文件 <code>/srv/gitlab/config/gitlab.rb</code> 文件并找到 <code># external_url &#39;GENERATED_EXTERNAL_URL&#39;</code> 这行，去掉注释，并按照下面的格式修改。</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ip 形式</span></span><br><span class="line">external_url <span class="string">'http://192.168.1.44'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 域名形式</span></span><br><span class="line">external_url <span class="string">'http://JemGeek.com'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子域名</span></span><br><span class="line">external_url <span class="string">'http://gitlab.JemGeek.com'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他形式</span></span><br><span class="line">external_url <span class="string">'http://JemGeek.com/gitlab'</span></span><br></pre></td></tr></table></figure><p>以上形式都是可以的。修改完成后，输入命令 <code>sudo docker exec gitlab gitlab-ctl reconfigure</code> 使配置生效，然后重启 gitlab 即可。</p><p>重启之后，仓库的地址将变为下面这样，以 ip 形式为例：</p><ul><li>ssh : <a href="mailto:git@192.168.1.44" target="_blank" rel="noopener">git@192.168.1.44</a>:James/test.git</li><li>http：<a href="http://192.168.1.44/James/test.git" target="_blank" rel="noopener">http://192.168.1.44/James/test.git</a></li></ul><h2 id="容器的常用操作"><a href="#容器的常用操作" class="headerlink" title="容器的常用操作"></a>容器的常用操作</h2><p>在 Docker 中，gitlab 是作为一个容器存在的，gitlab 的所有程序，配置，依赖等都在这个容器中。下面列出一些容器的常用操作命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 gitlab 容器</span></span><br><span class="line"><span class="comment"># 上面那个特别长的那一条命令仅在第一次运行 gitlab 的时候需要</span></span><br><span class="line"><span class="comment"># 之后开启 gitlab 使用下面的命令即可</span></span><br><span class="line">$ sudo docker start gitlab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 gitlab</span></span><br><span class="line">$ sudo docker stop gitlab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 gitlab</span></span><br><span class="line">$ sudo docker restart gitlab</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>关于<code>Docker</code> 及 <code>GitLab</code> 的知识还有很多，我会在后续的文章继续介绍，欢迎您持续关注本博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/25/5cc1bc330a855.png&quot; alt=&quot;gitlab-logo.png&quot;&gt;&lt;/p&gt;&lt;p&gt;作为互联网工作者，相信对 &lt;strong&gt;GitHub&lt;/strong&gt; 这个 &lt;strong&gt;全球最大的同性交友网站&lt;/strong&gt; 一定不会陌生，&lt;strong&gt;GitHub&lt;/strong&gt; 使用的是目前如日中天的 &lt;strong&gt;Git&lt;/strong&gt; 分布式版本控制系统。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; 是什么？&lt;strong&gt;Git&lt;/strong&gt; 是目前世界上最先进的分布式版本控制系统，没有之一！关于 &lt;strong&gt;Git&lt;/strong&gt; 与 &lt;strong&gt;GitHub&lt;/strong&gt; 的相关内容可以查看我往期的教程。而本篇博客要介绍的是如何搭建一套私人的类似于 &lt;strong&gt;GitHub&lt;/strong&gt; 的网站【&lt;strong&gt;GitLab&lt;/strong&gt;】，它可以为个人、组织、企业提供项目或代码的管理功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://jemgeek.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://jemgeek.com/tags/Docker/"/>
    
      <category term="GitLab" scheme="http://jemgeek.com/tags/GitLab/"/>
    
      <category term="Ubuntu" scheme="http://jemgeek.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>科学上网：在 Vultr VPS 中安装 Shadowsocks</title>
    <link href="http://jemgeek.com/archives/2019/install-shadowsocks-on-vultr.html"/>
    <id>http://jemgeek.com/archives/2019/install-shadowsocks-on-vultr.html</id>
    <published>2019-04-15T13:18:50.000Z</published>
    <updated>2019-04-17T16:06:08.182Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/04/15/5cb486b99e583.png" alt="shadowsocks-logo.png"></p><p>在程序员的日常开发中，经常需要访问 <code>Google</code> 、<code>StackOverflow</code> 等网站查找技术资料、文献等。但是正常情况下是无法访问的，那么此时你可能需要使用 VPN 等代理的方式进行访问。本篇将详细介绍如何在 <a href="https://www.vultr.com/" target="_blank" rel="noopener">Vultr</a> 中购买服务器并安装<code>Shadowsocks</code>，搭建自己的VPN。</p><a id="more"></a><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><a href="https://www.vultr.com/" target="_blank" rel="noopener">Vultr</a> 是一个服务器提供商，可以在 Vultr 中购买服务器，然后安装<code>Shadowsocks</code>工具实现 VPN 代理访问国外网站。而且 Vultr 支持支付宝付款，相对来说更方便购买。</p><p><code>Shadowsocks</code> 的相关介绍请见 wiki 介绍： <a href="https://zh.wikipedia.org/wiki/Shadowsocks" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Shadowsocks</a></p><h2 id="二、Vultr-注册"><a href="#二、Vultr-注册" class="headerlink" title="二、Vultr 注册"></a>二、Vultr 注册</h2><p>打开Vultr的官网：<a href="https://www.vultr.com/" target="_blank" rel="noopener">https://www.vultr.com/</a> 进行注册。一般使用邮箱注册即可。</p><p>也可以使用我的邀请码进行注册：<a href="https://www.vultr.com/?ref=7004732" target="_blank" rel="noopener">https://www.vultr.com/?ref=7004732</a> (使用我的邀请码注册，新用户 <strong>充值10美元，送25美元</strong>，你一共可以得到 <strong>35美元</strong>)。</p><p>进入Vultr的官网主页后，可以看到下图所示的注册界面。</p><p><img src="https://i.loli.net/2019/04/15/5cb48b65c7608.png" alt="vultr-register.png"></p><p>输入邮箱账号和密码，点击 <strong>Create Account</strong> 即可创建账号。Vultr的密码规格较为严格。</p><ul><li>必须超过10个字符</li><li>必须至少有一个小写字母</li><li>必须至少有一个大写字母</li><li>必须至少含有一个数字</li></ul><p>如果注册失败注意检查一下是否是密码不符合要求，按要求注册完了之后去自己的邮箱激活账号即可登录。</p><h2 id="三、购买-VPS-并配置"><a href="#三、购买-VPS-并配置" class="headerlink" title="三、购买 VPS 并配置"></a>三、购买 VPS 并配置</h2><h3 id="3-1-充值"><a href="#3-1-充值" class="headerlink" title="3.1 充值"></a>3.1 充值</h3><p>登录成功之后将进入到个人控制台页面，想要购买VPS服务器的话，需要先充值。点击页面左侧菜单 <strong>Billing</strong>，选择支付方式为 <strong>Alipay</strong>，选择你要充值的面额，然后支付即可，如下图所示。</p><p><img src="https://i.loli.net/2019/04/15/5cb48d31d5ae9.png" alt="Alipay.png"></p><h3 id="3-2-选择服务器地址"><a href="#3-2-选择服务器地址" class="headerlink" title="3.2 选择服务器地址"></a>3.2 选择服务器地址</h3><p>充值完成之后即可购买VPS服务器了，如下图所示，点击左侧菜单 <strong>Servers</strong> 并点击右侧的悬浮按钮 <strong>+</strong> 添加服务器。</p><p><img src="https://i.loli.net/2019/04/15/5cb48f4176aa7.png" alt="add-server.png"></p><p>第一个选项是选择服务器地址，Vultr 的机房有很多，很多国家地区都有服务器可以选择，<strong>Tokyo</strong> （东京）的节点离的最近，但是可能用的人很多，所以速度并没有那么快，据我自己测试，<strong>London</strong>（伦敦）的服务器相对来说文件下载最快。可以自己用下面的网址进行速度测试。</p><p>各地区服务器文件下载速度测试：<a href="https://www.vultr.com/faq/#downloadspeedtests" target="_blank" rel="noopener">官方速度测试网址</a></p><p><img src="https://i.loli.net/2019/04/15/5cb4921c4ca1e.png" alt="choose-server-location.png"></p><h3 id="3-3-选择服务器系统"><a href="#3-3-选择服务器系统" class="headerlink" title="3.3 选择服务器系统"></a>3.3 选择服务器系统</h3><p>第二项是选择服务器系统，按照你自己的爱好选择即可。我更熟悉 <strong>Ubuntu</strong>，这里以 <strong>Ubuntu 18.10</strong> 为例。</p><p><img src="https://i.loli.net/2019/04/15/5cb492e6eee52.png" alt="choose-server-type.png"></p><h3 id="3-4-选择服务器规格"><a href="#3-4-选择服务器规格" class="headerlink" title="3.4 选择服务器规格"></a>3.4 选择服务器规格</h3><p>第三项是选择服务器的规格，现在Vultr的服务器规格一般都是 <strong>5美元/月</strong> 起步了。以前还有 <strong>3.5美元/月</strong> 的服务器，现在好像基本没了。这里就选择最低的 <strong>5美元/月</strong> 就足够我们用了，还能用来干点其他的事情。</p><p><img src="https://i.loli.net/2019/04/15/5cb493afa98e7.png" alt="choose-server-size.png"></p><h3 id="3-5-设置-SSH-Keys"><a href="#3-5-设置-SSH-Keys" class="headerlink" title="3.5 设置 SSH Keys"></a>3.5 设置 SSH Keys</h3><p>第四项及第五项无特殊需求可以不做选择，默认的就可以了。第六项是 <strong>SSH Keys</strong> ，这个比较重要，添加了 <strong>SSH Key</strong> 你才可以对你的服务器使用SSH进行访问，不然只能使用网页版本的终端进行访问，操作极为难受。添加了 SSH 公钥后我们就可以使用 <strong>putty</strong> 等工具连接服务器进行操作了。</p><p>如下图所示，如果你之前添加过 <strong>SSH Keys</strong> 的话，直接选择就好，如果没有添加的话，点击 <strong>Add New</strong> 添加新的。</p><p><img src="https://i.loli.net/2019/04/15/5cb495e11a1dc.png" alt="ssh-keys.png"></p><p>至于如何生成 SSH 公钥，可以查看<a href="https://www.vultr.com/docs/how-do-i-generate-ssh-keys/" target="_blank" rel="noopener">官方文档</a></p><p>可以根据文档所述安装 <a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" target="_blank" rel="noopener">PuTTYgen</a> 工具，然后按照文档操作。也可以安装 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git 工具</a>，然后打开 <code>Git Bash</code> ，然后使用 Linux 命令生成 SSH 公钥，这种方法我在我的另一篇文章中有详细说到。具体请查看：<a href="http://jemgeek.com/archives/2016/build-blog-by-hexo-based.html">Hexo 搭建个人博客之基础篇</a> 文章章节 <strong>[2.3 配置 SSH]</strong></p><p>点击 <strong>Add New</strong> 按钮将出现如下图所示的界面，当你生成了本地的SSH 公钥之后，打开 <code>id_rsa.pub</code> 文件，将其中的内容复制到图中的 <strong>SSH Key</strong> 输入框中，至于名字，随便输入即可。完成之后点击 <strong>Add SSH Key</strong> 添加即可。</p><p><img src="https://i.loli.net/2019/04/15/5cb495e132f47.png" alt="add-ssh-key.png"></p><p>以上的内容全部设置完成之后，在第七项输入服务器的名称之后，点击 <strong>Deploy Now</strong> ，开始安装VPS。</p><h3 id="3-6-查看及管理-VPS"><a href="#3-6-查看及管理-VPS" class="headerlink" title="3.6 查看及管理 VPS"></a>3.6 查看及管理 VPS</h3><p>所有的服务器信息都可以在 <strong>Servers</strong> 面板中查看，如下图所示。</p><p><img src="https://i.loli.net/2019/04/15/5cb49a15541fa.png" alt="server-instances.png"></p><p>点击服务器名称可以查看服务器详细信息（如下图所示）。菜单功能为：</p><ul><li>Overview : 概览（服务器主要信息）</li><li>Usage Graphs : 运行图表</li><li>Settings : 设置</li><li>Snapshots : 快照（配置完成后可以生成快照，出现问题恢复即可）</li><li>Backups : 备份（额外功能，1美元/月可开启）</li><li>DDOS : DDOS 保护（额外功能，10美元/月可开启）</li></ul><p><img src="https://i.loli.net/2019/04/15/5cb49a1568bb2.png" alt="server-info.png"></p><p>在概览中，有几个重要信息：</p><ul><li>IP Address : 服务器 IP 地址</li><li>Username : 登录用户名</li><li>Password : 登录密码</li></ul><p>Windows 电脑上可使用 <a href="https://www.putty.org/" target="_blank" rel="noopener">putty</a> 等工具通过 SSH 协议连接服务器进行操作。Mac 使用自带的终端即可。</p><h2 id="四、安装-Shadowsocks"><a href="#四、安装-Shadowsocks" class="headerlink" title="四、安装 Shadowsocks"></a>四、安装 Shadowsocks</h2><p>服务器安装完毕之后，就可以连接服务器进行 <code>Shadowsocks</code> 的安装配置了。</p><h3 id="4-1-连接服务器"><a href="#4-1-连接服务器" class="headerlink" title="4.1 连接服务器"></a>4.1 连接服务器</h3><p><strong>Windows</strong></p><p>Windows 连接服务器，可以下载 <a href="https://the.earth.li/~sgtatham/putty/latest/w64/putty.exe" target="_blank" rel="noopener">putty</a> ，直接双击打开 <code>putty.exe</code> 即可使用，无需安装。</p><p><img src="https://i.loli.net/2019/04/15/5cb4a0b76af58.png" alt="putty.png"></p><p>如上图，在 Host Name 中输入你的服务器 IP 地址，端口默认为 22。点击 <strong>Open</strong> 打开。</p><p><img src="https://i.loli.net/2019/04/15/5cb4a0b739b82.png" alt="putty-ssh-login.png"></p><p>输入登录用户名 <strong>root</strong>，点击键盘 <strong>Enter</strong> 进行下一步，输入登录密码。可以直接复制，然后在 <strong>Putty</strong> 的界面上点击鼠标右键粘贴，因为是模拟Linux系统的终端，所以输入密码是不显示的，所以不要奇怪光标没有变化。直接点击键盘 <strong>Enter</strong> 开始登录即可。若出现对话框，点击 <strong>yes</strong> 即可。</p><p><img src="https://i.loli.net/2019/04/15/5cb4a0b758795.png" alt="putty-ssh-login-success.png"></p><p><strong>Mac 或 Linux</strong></p><p>打开终端，使用 SSH 命令进行登录即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@ip</span><br></pre></td></tr></table></figure><h3 id="4-2-安装-BBR-加速"><a href="#4-2-安装-BBR-加速" class="headerlink" title="4.2 安装 BBR 加速"></a>4.2 安装 BBR 加速</h3><p>在安装 <code>Shadowsocks</code> 之前，我们先安装 <code>BBR</code> 工具，这是谷歌的网络加速优化的工具。</p><p>逐行执行下面的命令安装<code>BBR</code> 工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 下载脚本</span><br><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line"></span><br><span class="line"># 添加执行权限</span><br><span class="line">chmod 777 bbr.sh</span><br><span class="line"></span><br><span class="line"># 执行脚本安装</span><br><span class="line">./bbr.sh</span><br></pre></td></tr></table></figure><p>显示 <strong>Press any key to start…</strong> 按回车确认，等待安装完成。安装完成后输入 <code>lsmod | grep bbr</code>，若出现 <code>tcp_bbr</code> 则说明 <strong>BBR</strong> 已经启动。Ubuntu 18.10 版本的系统在安装完成之后会自动启动 BBR 工具，无需重启，其他的系统可能需要重启<code>tcp_bbr</code>才会出现（如下图所示）。</p><p><img src="https://i.loli.net/2019/04/17/5cb74000a0fc5.png" alt="bbr_install_success.png"></p><h3 id="4-3-安装-Shadowsocks"><a href="#4-3-安装-Shadowsocks" class="headerlink" title="4.3 安装 Shadowsocks"></a>4.3 安装 Shadowsocks</h3><p>安装<code>Shadowsocks</code>也很简单，逐行执行下面的命令安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">## 下载脚本</span><br><span class="line">wget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class="line"></span><br><span class="line">## 添加执行权限</span><br><span class="line">chmod 777 shadowsocks.sh</span><br><span class="line"></span><br><span class="line">## 执行脚本安装</span><br><span class="line">./shadowsocks.sh</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/17/5cb740a9d4263.png" alt="install_ss.png"></p><p>如上图所示，在脚本安装的过程中，将会要求你输入 <strong>密码</strong>，<strong>端口号</strong> 及 <strong>加密方式</strong>，选择完毕之后进行安装，等待安装完成。</p><p><img src="https://i.loli.net/2019/04/17/5cb741d6bf151.png" alt="ss_install_success.png"></p><p>安装完成之后需要将标红的信息记录下来。此时ss就安装完毕了。</p><h3 id="4-4-使用方式"><a href="#4-4-使用方式" class="headerlink" title="4.4 使用方式"></a>4.4 使用方式</h3><p>要想连接Shadowsocks，需要先下载客户端，下面是Github中的下载地址。</p><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">Shadowsocks-Windows</a></p><p><a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">Shadowsocks-Android</a></p><p><a href="https://play.google.com/store/apps/details?id=com.github.shadowsocks" target="_blank" rel="noopener">Shadowsocks on Google Play</a></p><p><a href="https://github.com/shadowsocks/shadowsocks-iOS/releases" target="_blank" rel="noopener">Shadowsocks-iOS</a></p><p>实在不会下载的，请加我的技术群：Techno Geek (563965745)，群文件就有。</p><p><img src="https://ooo.0o0.ooo/2017/03/31/58ddd26b90e76.jpg" alt="Techno-Geek-qrcode.jpg"></p><p>以 <code>Shadowsocks-Windows</code> 为例，下载完毕之后，解压之后会发现一个 <code>Shadowsocks.exe</code> 程序，双击打开即可。我这里下载的是最新的 <code>4.1.6</code> 版本 。</p><p><img src="https://i.loli.net/2019/04/17/5cb7463d91ebe.png" alt="ss_client.png"></p><p>如上图，按照你服务器的配置，依次输入服务器IP地址，服务器端口，密码，加密方式，点击确定即可。</p><p><img src="https://i.loli.net/2019/04/17/5cb7481413d24.png" alt="ss_client_open.png"></p><p>配置完成之后，在电脑任务栏右侧小图标中有一个白色纸飞机的图标，右键图标出现Shadowsocks的操作菜单，想要开启Shadowsocks的话，只需要选择 <strong>系统代理</strong> -&gt; <strong>PAC模式</strong> 或 <strong>全局模式</strong>。<strong>PAC模式</strong> 和 <strong>全局模式</strong> 有什么区别呢？</p><ul><li>PAC模式: Shadowsocks 只代理国外网站，一般使用这种模式更多。</li><li>全局模式：Shadowsocks 代理国内国外全部网站，此种模式下国内网站很多会打不开或者打开很慢。</li></ul><p>Google 测试：</p><p><img src="https://i.loli.net/2019/04/17/5cb749b8724c3.png" alt="Google_test.png"></p><h3 id="4-5-多用户配置"><a href="#4-5-多用户配置" class="headerlink" title="4.5 多用户配置"></a>4.5 多用户配置</h3><p>Vultr 一台服务器配置Shadowsocks 是可以给多个人一起使用的，带宽和流量是完全够的。那么如何配置多用户登录呢？其实只要修改一下Shadowsocks配置文件即可。使用下面的命令用 <code>vim</code> 或 <code>vi</code> 等工具打开配置文件并编辑，不会 <code>vim</code> 或 <code>vi</code> 文本编辑的同学可以查一下简单的编辑操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/17/5cb74c3c7c35d.png" alt="ss_config.png"></p><p>如上图的配置文件，其中的端口、密码、加密方法（method）均是上文配置的。想要修改为多用户，只要按照下面的格式进行修改即可。</p><ol><li>先删除 <code>server_port</code> 与 <code>password</code> 这行；</li><li>添加 <code>&quot;poer_password&quot;:{...}</code> 字段，并按照<code>&quot;端口&quot;:&quot;密码&quot;</code>的方式进行设置，如<code>&quot;10666&quot;:&quot;password666&quot;</code>。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"port_password"</span>:&#123;</span><br><span class="line">         <span class="attr">"10666"</span>:<span class="string">"password666"</span>,</span><br><span class="line">         <span class="attr">"10667"</span>:<span class="string">"password667"</span>,</span><br><span class="line">         <span class="attr">"10668"</span>:<span class="string">"password668"</span>,</span><br><span class="line">         <span class="attr">"10669"</span>:<span class="string">"password669"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完毕之后，记得保存退出，命令 <code>:wq</code>，重启 Shadowsocks 后生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 重启 Shadowsocks</span><br><span class="line">/etc/init.d/shadowsocks restart</span><br></pre></td></tr></table></figure><h3 id="4-6-Shadowsocks-操作命令"><a href="#4-6-Shadowsocks-操作命令" class="headerlink" title="4.6 Shadowsocks 操作命令"></a>4.6 Shadowsocks 操作命令</h3><p>卸载 Shadowsocks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./shadowsocks.sh uninstall</span><br></pre></td></tr></table></figure><p>Shadowsocks 操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/shadowsocks start      # 启动</span><br><span class="line">/etc/init.d/shadowsocks stop       # 停止</span><br><span class="line">/etc/init.d/shadowsocks restart    # 重启</span><br><span class="line">/etc/init.d/shadowsocks status     # 查看状态</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/15/5cb486b99e583.png&quot; alt=&quot;shadowsocks-logo.png&quot;&gt;&lt;/p&gt;&lt;p&gt;在程序员的日常开发中，经常需要访问 &lt;code&gt;Google&lt;/code&gt; 、&lt;code&gt;StackOverflow&lt;/code&gt; 等网站查找技术资料、文献等。但是正常情况下是无法访问的，那么此时你可能需要使用 VPN 等代理的方式进行访问。本篇将详细介绍如何在 &lt;a href=&quot;https://www.vultr.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vultr&lt;/a&gt; 中购买服务器并安装&lt;code&gt;Shadowsocks&lt;/code&gt;，搭建自己的VPN。&lt;/p&gt;
    
    </summary>
    
      <category term="Shadowsocks" scheme="http://jemgeek.com/categories/Shadowsocks/"/>
    
    
      <category term="Shadowsocks" scheme="http://jemgeek.com/tags/Shadowsocks/"/>
    
      <category term="Tutorial" scheme="http://jemgeek.com/tags/Tutorial/"/>
    
      <category term="Vultr" scheme="http://jemgeek.com/tags/Vultr/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 文件上传与下载</title>
    <link href="http://jemgeek.com/archives/2019/spring-boot-file-upload-download.html"/>
    <id>http://jemgeek.com/archives/2019/spring-boot-file-upload-download.html</id>
    <published>2019-03-30T15:50:50.000Z</published>
    <updated>2019-04-01T15:36:31.466Z</updated>
    
    <content type="html"><![CDATA[<p>文件的上传及下载功能是开发人员在日常应用及编程开发中经常会遇到的。正好最近开发需要用到此功能，虽然本人是 Android 开发人员，但还是业余客串了一下后台开发。</p><p>在本文中，您将学习如何使用 Spring Boot 实现 Web 服务中的文件上传和下载功能。首先会构建一个 REST APIs 实现上传及下载的功能，然后使用 Postman 工具来测试这些接口，最后创建一个 Web 界面使用 JavaScript 调用接口演示完整的功能。最终界面及功能如下：</p><p><img src="https://i.loli.net/2019/03/29/5c9e3f3eeb13c.png" alt="show_demo.png"></p><a id="more"></a><h2 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h2><pre><code>- Spring Boot : 2.1.3.RELEASE- Gredle : 5.2.1- Java : 1.8- Intellij IDEA : 2018.3.3</code></pre><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>开发环境为 Intellij IDEA，项目创建很简单，按照下面的步骤创建即可：</p><ol><li>File -&gt; New -&gt; Project…</li><li>选择 <strong>Spring Initializr</strong>，点击 Next</li><li>填写 Group (项目域名) 和 Artifact (项目别名)</li><li>构建类型可以选择 Maven 或 Gradle， 看个人习惯</li><li>添加 <strong>Web</strong> 依赖</li><li>输入项目名称及保存路径，完成创建</li></ol><p>项目创建完毕之后就可以进行开发，项目的完整结构如下图所示：</p><p><img src="https://i.loli.net/2019/03/30/5c9e436fee3ca.png" alt="project_structure.png"></p><h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><p>项目创建完成之后，需要设置一些必要的参数，打开项目<code>resources</code>目录下配置文件<code>application.properties</code>，在其中添加以下参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server.port=80</span><br><span class="line"></span><br><span class="line">## MULTIPART (MultipartProperties)</span><br><span class="line"># 开启 multipart 上传功能</span><br><span class="line">spring.servlet.multipart.enabled=true</span><br><span class="line"># 文件写入磁盘的阈值</span><br><span class="line">spring.servlet.multipart.file-size-threshold=2KB</span><br><span class="line"># 最大文件大小</span><br><span class="line">spring.servlet.multipart.max-file-size=200MB</span><br><span class="line"># 最大请求大小</span><br><span class="line">spring.servlet.multipart.max-request-size=215MB</span><br><span class="line"></span><br><span class="line">## 文件存储所需参数</span><br><span class="line"># 所有通过 REST APIs 上传的文件都将存储在此目录下</span><br><span class="line">file.upload-dir=./uploads</span><br></pre></td></tr></table></figure><p>其中<code>file.upload-dir=./uploads</code>参数为自定义的参数，创建<code>FileProperties.java</code>POJO类，使配置参数可以自动绑定到POJO类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"file"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String uploadDir;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUploadDir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uploadDir;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUploadDir</span><span class="params">(String uploadDir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uploadDir = uploadDir;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>@SpringBootApplication</code>注解的类中添加<code>@EnableConfigurationProperties</code>注解以开启<code>ConfigurationProperties</code>功能。</p><p><code>SpringBootFileApplication.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;</span><br><span class="line">        FileProperties.class</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootFileApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootFileApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成，以后若有<code>file</code>前缀开头的参数需要配置，可直接在<code>application.properties</code>配置文件中配置并更新<code>FileProperties.java</code>即可。</p><p>另外再创建一个上传文件成功之后的<code>Response</code>响应实体类<code>UploadFileResponse.java</code>及异常类<code>FileException.java</code>来处理异常信息。</p><p><code>UploadFileResponse.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadFileResponse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line">    <span class="keyword">private</span> String fileDownloadUri;</span><br><span class="line">    <span class="keyword">private</span> String fileType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UploadFileResponse</span><span class="params">(String fileName, String fileDownloadUri, String fileType, <span class="keyword">long</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">        <span class="keyword">this</span>.fileDownloadUri = fileDownloadUri;</span><br><span class="line">        <span class="keyword">this</span>.fileType = fileType;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getter and setter ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FileException.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h2><p>下面需要创建文件上传下载所需的 REST APIs 接口。创建文件<code>FileController.java</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.james.sample.file.dto.UploadFileResponse;</span><br><span class="line"><span class="keyword">import</span> com.james.sample.file.service.FileService;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.ServletUriComponentsBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(FileController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileService fileService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/uploadFile"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UploadFileResponse <span class="title">uploadFile</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile file)</span>&#123;</span><br><span class="line">        String fileName = fileService.storeFile(file);</span><br><span class="line"></span><br><span class="line">        String fileDownloadUri = ServletUriComponentsBuilder.fromCurrentContextPath()</span><br><span class="line">                .path(<span class="string">"/downloadFile/"</span>)</span><br><span class="line">                .path(fileName)</span><br><span class="line">                .toUriString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UploadFileResponse(fileName, fileDownloadUri,</span><br><span class="line">                file.getContentType(), file.getSize());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/uploadMultipleFiles"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UploadFileResponse&gt; <span class="title">uploadMultipleFiles</span><span class="params">(@RequestParam(<span class="string">"files"</span>)</span> MultipartFile[] files) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(files)</span><br><span class="line">                .map(<span class="keyword">this</span>::uploadFile)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/downloadFile/&#123;fileName:.+&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Resource&gt; <span class="title">downloadFile</span><span class="params">(@PathVariable String fileName, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Load file as Resource</span></span><br><span class="line">        Resource resource = fileService.loadFileAsResource(fileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Try to determine file's content type</span></span><br><span class="line">        String contentType = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            contentType = request.getServletContext().getMimeType(resource.getFile().getAbsolutePath());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            logger.info(<span class="string">"Could not determine file type."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fallback to the default content type if type could not be determined</span></span><br><span class="line">        <span class="keyword">if</span>(contentType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            contentType = <span class="string">"application/octet-stream"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok()</span><br><span class="line">                .contentType(MediaType.parseMediaType(contentType))</span><br><span class="line">                .header(HttpHeaders.CONTENT_DISPOSITION, <span class="string">"attachment; filename=\""</span> + resource.getFilename() + <span class="string">"\""</span>)</span><br><span class="line">                .body(resource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FileController</code>类在接收到用户的请求后，使用<code>FileService</code>类提供的<code>storeFile()</code>方法将文件写入到系统中进行存储，其存储目录就是之前在<code>application.properties</code>配置文件中的<code>file.upload-dir</code>参数的值<code>./uploads</code>。</p><p>下载接口<code>downloadFile()</code>在接收到用户请求之后，使用<code>FileService</code>类提供的<code>loadFileAsResource()</code>方法获取存储在系统中文件并返回文件供用户下载。</p><p><code>FileService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.james.sample.file.exception.FileException;</span><br><span class="line"><span class="keyword">import</span> com.james.sample.file.property.FileProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.UrlResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardCopyOption;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Path fileStorageLocation; <span class="comment">// 文件在本地存储的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileService</span><span class="params">(FileProperties fileProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileStorageLocation = Paths.get(fileProperties.getUploadDir()).toAbsolutePath().normalize();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Files.createDirectories(<span class="keyword">this</span>.fileStorageLocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileException(<span class="string">"Could not create the directory where the uploaded files will be stored."</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储文件到系统</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">storeFile</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Normalize file name</span></span><br><span class="line">        String fileName = StringUtils.cleanPath(file.getOriginalFilename());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Check if the file's name contains invalid characters</span></span><br><span class="line">            <span class="keyword">if</span>(fileName.contains(<span class="string">".."</span>)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileException(<span class="string">"Sorry! Filename contains invalid path sequence "</span> + fileName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Copy file to the target location (Replacing existing file with the same name)</span></span><br><span class="line">            Path targetLocation = <span class="keyword">this</span>.fileStorageLocation.resolve(fileName);</span><br><span class="line">            Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> fileName;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileException(<span class="string">"Could not store file "</span> + fileName + <span class="string">". Please try again!"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Resource <span class="title">loadFileAsResource</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Path filePath = <span class="keyword">this</span>.fileStorageLocation.resolve(fileName).normalize();</span><br><span class="line">            Resource resource = <span class="keyword">new</span> UrlResource(filePath.toUri());</span><br><span class="line">            <span class="keyword">if</span>(resource.exists()) &#123;</span><br><span class="line">                <span class="keyword">return</span> resource;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileException(<span class="string">"File not found "</span> + fileName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileException(<span class="string">"File not found "</span> + fileName, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><p>在完成上述的代码之后，打开<code>SpringBootFileApplication.java</code>并运行，运行完成之后就可以使用 Postman 进行测试了。</p><p>单个文件上传结果：</p><p><img src="https://i.loli.net/2019/03/30/5c9e4dd9ded46.png" alt="upload_result1.png"></p><p>多个文件上传结果：</p><p><img src="https://i.loli.net/2019/03/30/5c9e4dda0c477.png" alt="upload_result2.png"></p><p>文件下载结果：</p><p><img src="https://i.loli.net/2019/03/30/5c9e4dda130d6.png" alt="download_result.png"></p><h2 id="Web-前端开发"><a href="#Web-前端开发" class="headerlink" title="Web 前端开发"></a>Web 前端开发</h2><p><code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Required meta tags --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Boot File Upload / Download Rest API Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap CSS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/css/main.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sorry! Your browser doesn't support Javascript<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload-header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Spring Boot File Upload / Download Rest API Example<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload-content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"single-upload"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Upload Single File<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"singleUploadForm"</span> <span class="attr">name</span>=<span class="string">"singleUploadForm"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"singleFileUploadInput"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"file-input"</span> <span class="attr">required</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"primary submit-btn"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload-response"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"singleFileUploadError"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"singleFileUploadSuccess"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"multiple-upload"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Upload Multiple Files<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"multipleUploadForm"</span> <span class="attr">name</span>=<span class="string">"multipleUploadForm"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"multipleFileUploadInput"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"files"</span> <span class="attr">class</span>=<span class="string">"file-input"</span> <span class="attr">multiple</span> <span class="attr">required</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"primary submit-btn"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload-response"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"multipleFileUploadError"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"multipleFileUploadSuccess"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Optional JavaScript --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>main.css</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">-moz-box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>, Helvetica, Arial, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.58</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#128ff2</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.7em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#128ff2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: none;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.6rem</span> <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.2s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">38px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.primary</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#128ff2</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0.12);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="file"]</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#128ff2</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.submit-btn</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">500px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.file-input</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 115px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.submit-btn</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-container</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">11px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.27);</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-header</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ececec</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-header</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.single-upload</span> &#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#e8e8e8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-response</span> &#123;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">    <span class="attribute">word-break</span>: break-all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> singleUploadForm = <span class="built_in">document</span>.querySelector(<span class="string">'#singleUploadForm'</span>);</span><br><span class="line"><span class="keyword">var</span> singleFileUploadInput = <span class="built_in">document</span>.querySelector(<span class="string">'#singleFileUploadInput'</span>);</span><br><span class="line"><span class="keyword">var</span> singleFileUploadError = <span class="built_in">document</span>.querySelector(<span class="string">'#singleFileUploadError'</span>);</span><br><span class="line"><span class="keyword">var</span> singleFileUploadSuccess = <span class="built_in">document</span>.querySelector(<span class="string">'#singleFileUploadSuccess'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> multipleUploadForm = <span class="built_in">document</span>.querySelector(<span class="string">'#multipleUploadForm'</span>);</span><br><span class="line"><span class="keyword">var</span> multipleFileUploadInput = <span class="built_in">document</span>.querySelector(<span class="string">'#multipleFileUploadInput'</span>);</span><br><span class="line"><span class="keyword">var</span> multipleFileUploadError = <span class="built_in">document</span>.querySelector(<span class="string">'#multipleFileUploadError'</span>);</span><br><span class="line"><span class="keyword">var</span> multipleFileUploadSuccess = <span class="built_in">document</span>.querySelector(<span class="string">'#multipleFileUploadSuccess'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadSingleFile</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">    formData.append(<span class="string">"file"</span>, file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"POST"</span>, <span class="string">"/uploadFile"</span>);</span><br><span class="line"></span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">        <span class="keyword">var</span> response = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">        <span class="keyword">if</span>(xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">            singleFileUploadError.style.display = <span class="string">"none"</span>;</span><br><span class="line">            singleFileUploadSuccess.innerHTML = <span class="string">"&lt;p&gt;File Uploaded Successfully.&lt;/p&gt;&lt;p&gt;DownloadUrl : &lt;a href='"</span> + response.fileDownloadUri + <span class="string">"' target='_blank'&gt;"</span> + response.fileDownloadUri + <span class="string">"&lt;/a&gt;&lt;/p&gt;"</span>;</span><br><span class="line">            singleFileUploadSuccess.style.display = <span class="string">"block"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            singleFileUploadSuccess.style.display = <span class="string">"none"</span>;</span><br><span class="line">            singleFileUploadError.innerHTML = (response &amp;&amp; response.message) || <span class="string">"Some Error Occurred"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xhr.send(formData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadMultipleFiles</span>(<span class="params">files</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; files.length; index++) &#123;</span><br><span class="line">        formData.append(<span class="string">"files"</span>, files[index]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"POST"</span>, <span class="string">"/uploadMultipleFiles"</span>);</span><br><span class="line"></span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">        <span class="keyword">var</span> response = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">        <span class="keyword">if</span>(xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">            multipleFileUploadError.style.display = <span class="string">"none"</span>;</span><br><span class="line">            <span class="keyword">var</span> content = <span class="string">"&lt;p&gt;All Files Uploaded Successfully&lt;/p&gt;"</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; response.length; i++) &#123;</span><br><span class="line">                content += <span class="string">"&lt;p&gt;DownloadUrl : &lt;a href='"</span> + response[i].fileDownloadUri + <span class="string">"' target='_blank'&gt;"</span> + response[i].fileDownloadUri + <span class="string">"&lt;/a&gt;&lt;/p&gt;"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            multipleFileUploadSuccess.innerHTML = content;</span><br><span class="line">            multipleFileUploadSuccess.style.display = <span class="string">"block"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            multipleFileUploadSuccess.style.display = <span class="string">"none"</span>;</span><br><span class="line">            multipleFileUploadError.innerHTML = (response &amp;&amp; response.message) || <span class="string">"Some Error Occurred"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xhr.send(formData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">singleUploadForm.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> files = singleFileUploadInput.files;</span><br><span class="line">    <span class="keyword">if</span>(files.length === <span class="number">0</span>) &#123;</span><br><span class="line">        singleFileUploadError.innerHTML = <span class="string">"Please select a file"</span>;</span><br><span class="line">        singleFileUploadError.style.display = <span class="string">"block"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    uploadSingleFile(files[<span class="number">0</span>]);</span><br><span class="line">    event.preventDefault();</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">multipleUploadForm.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> files = multipleFileUploadInput.files;</span><br><span class="line">    <span class="keyword">if</span>(files.length === <span class="number">0</span>) &#123;</span><br><span class="line">        multipleFileUploadError.innerHTML = <span class="string">"Please select at least one file"</span>;</span><br><span class="line">        multipleFileUploadError.style.display = <span class="string">"block"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    uploadMultipleFiles(files);</span><br><span class="line">    event.preventDefault();</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，文件的上传及下载功能已完成。在正式环境中可能还需要将上传的文件存储到数据库，此处按照实际需求去处理即可。</p><p>本文源代码地址：<a href="https://github.com/JemGeek/spring-boot-sample/tree/master/spring-boot-file-upload" target="_blank" rel="noopener">https://github.com/JemGeek/spring-boot-sample/tree/master/spring-boot-file-upload</a></p><p>本文参考(需要翻墙)：<a href="https://www.callicoder.com/spring-boot-file-upload-download-rest-api-example/" target="_blank" rel="noopener">https://www.callicoder.com/spring-boot-file-upload-download-rest-api-example/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文件的上传及下载功能是开发人员在日常应用及编程开发中经常会遇到的。正好最近开发需要用到此功能，虽然本人是 Android 开发人员，但还是业余客串了一下后台开发。&lt;/p&gt;&lt;p&gt;在本文中，您将学习如何使用 Spring Boot 实现 Web 服务中的文件上传和下载功能。首先会构建一个 REST APIs 实现上传及下载的功能，然后使用 Postman 工具来测试这些接口，最后创建一个 Web 界面使用 JavaScript 调用接口演示完整的功能。最终界面及功能如下：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/03/29/5c9e3f3eeb13c.png&quot; alt=&quot;show_demo.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://jemgeek.com/categories/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://jemgeek.com/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://jemgeek.com/tags/Spring-Boot/"/>
    
      <category term="Spring" scheme="http://jemgeek.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Java equals 和 == 完全解析</title>
    <link href="http://jemgeek.com/archives/2019/java-equals-fully-resolved.html"/>
    <id>http://jemgeek.com/archives/2019/java-equals-fully-resolved.html</id>
    <published>2019-03-25T05:30:35.000Z</published>
    <updated>2020-01-05T03:33:12.112Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/03/25/5c9867e360501.jpg" alt="equals_logo.jpg"></p><p>今天朋友突然问到一个问题：</p><blockquote><p>两个对象使用 <code>x.equals(y)</code> 判断结果为 <code>true</code> 时，两个对象的 <code>hashCode</code> 可以不同吗？</p></blockquote><p>在Java编程中，判断两个对象是否相等常常使用 <code>equals()</code> 或是 <code>==</code> ，但是其中的区别和原理可能很多人并不完全清楚。今天就借着上面这个问题来看看 <code>equals()</code> 和 <code>==</code> 的区别和原理。</p><a id="more"></a><h2 id="1-数据类型与-的含义"><a href="#1-数据类型与-的含义" class="headerlink" title="1. 数据类型与==的含义"></a>1. 数据类型与==的含义</h2><p>Java中的数据类型分为基本数据类型和引用数据类型：</p><ol><li><p>基本类型：编程语言中内置的最小粒度的数据类型。它包括四大类八种类型</p><ul><li>4种整数类型：byte、short、int、long</li><li>2种浮点数类型：float、double</li><li>1种字符类型：char</li><li>1种布尔类型：boolean</li></ul></li><li><p>引用类型：引用也叫句柄，引用类型，是编程语言中定义的在句柄中存放着实际内容所在地址的地址值的一种数据形式</p><ul><li>类</li><li>接口</li><li>数组</li></ul></li></ol><ul><li>对于基本类型来说， <code>==</code> 比较的是它们的值</li><li>对于引用类型来说， <code>==</code> 比较的是它们在内存中存放的地址（堆内存地址）</li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    String str1 = <span class="string">"James"</span>;</span><br><span class="line">    String str2 = <span class="string">"James"</span>;</span><br><span class="line"></span><br><span class="line">    String str3 = <span class="keyword">new</span> String(<span class="string">"James"</span>);</span><br><span class="line">    String str4 = <span class="keyword">new</span> String(<span class="string">"James"</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"num1 == num2 : "</span> + (num1 == num2));</span><br><span class="line">    System.out.println(<span class="string">"str1 address : "</span> + System.identityHashCode(str1) + <span class="string">";\nstr2 address : "</span> + System.identityHashCode(str1) + <span class="string">";\nstr1 == str2 : "</span> + (str1 == str2));</span><br><span class="line">    System.out.println(<span class="string">"str3 address : "</span> + System.identityHashCode(str3) + <span class="string">";\nstr4 address : "</span> + System.identityHashCode(str4) + <span class="string">";\nstr3 == str4 : "</span> + (str3 == str4));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的代码，可以得到以下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num1 == num2 : true</span><br><span class="line"></span><br><span class="line">str1 address : 1174290147;</span><br><span class="line">str2 address : 1174290147;</span><br><span class="line">str1 == str2 : true</span><br><span class="line"></span><br><span class="line">str3 address : 1289696681;</span><br><span class="line">str4 address : 1285044316;</span><br><span class="line">str3 == str4 : false</span><br></pre></td></tr></table></figure><p>可以看到str1和str2的内存地址都是<code>1174290147</code>,所以使用<code>==</code>判断为<code>true</code>,但是str3和str4的地址是不同的，所以判断为<code>false</code>。</p><h2 id="2-equals-方法解析"><a href="#2-equals-方法解析" class="headerlink" title="2. equals() 方法解析"></a>2. equals() 方法解析</h2><p>在Java语言中，所有类都是继承于<code>Object</code>这个超类的，在这个类中也有一个<code>equals()</code>方法，那么我们先来看一下这个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看得出，这个方法很简单，就是比较对象的内存地址的。所以在对象没有重写这个方法时，默认使用此方法，即比较对象的内存地址值。但是类似于String、Integer等类均已重写了<code>equals()</code>。下面以<code>String</code>为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = length();</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.length()) &#123;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (charAt(i) != anotherString.charAt(i))</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>很明显，String的equals()方法仅仅是对比它的 <strong>数据值</strong>，而不是对象的 <strong>内存地址</strong> 。</p><p>以 <code>String</code> 为例测试一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String str1 = <span class="string">"James"</span>;</span><br><span class="line">    String str2 = <span class="string">"James"</span>;</span><br><span class="line"></span><br><span class="line">    String str3 = <span class="keyword">new</span> String(<span class="string">"James"</span>);</span><br><span class="line">    String str4 = <span class="keyword">new</span> String(<span class="string">"James"</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"str1 address : "</span> + System.identityHashCode(str1) + <span class="string">";\nstr2 address : "</span> + System.identityHashCode(str1) + <span class="string">";\nstr1.equals(str2) : "</span> + str1.equals(str2));</span><br><span class="line">    System.out.println(<span class="string">"str3 address : "</span> + System.identityHashCode(str3) + <span class="string">";\nstr4 address : "</span> + System.identityHashCode(str4) + <span class="string">";\nstr3.equals(str4) : "</span> + str3.equals(str4));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str1 address : 1174290147;</span><br><span class="line">str2 address : 1174290147;</span><br><span class="line">str1.equals(str2) : true</span><br><span class="line"></span><br><span class="line">str3 address : 1289696681;</span><br><span class="line">str4 address : 1285044316;</span><br><span class="line">str3.equals(str4) : true</span><br></pre></td></tr></table></figure><p>可以发现不管对象的内存地址是否相同并不影响其结果，所以String类型比较的是 <strong>数据值</strong>, 而不是 <strong>内存地址值</strong>。</p><p>所以总结一下<code>equals()</code> 和 <code>==</code> 的区别：</p><ol><li><p><code>==</code></p><ul><li>基本类型：对比它们的值是否相等</li><li>引用类型：对比它们的内存地址是否相等</li></ul></li><li><p><code>equals()</code></p><ul><li>基本类型：使用<code>==</code>进行比较，基本类型无 equals() 方法。</li><li>引用类型：<ul><li>默认情况下，对比它们的地址是否相等；</li><li>如果<code>equals()</code>方法被重写，则根据重写的要求来比较，一般是比较 <strong>数据值</strong> 是否相同。</li></ul></li></ul></li></ol><h2 id="3-equals-与-hashCode"><a href="#3-equals-与-hashCode" class="headerlink" title="3. equals() 与 hashCode()"></a>3. equals() 与 hashCode()</h2><p>在详细的了解了<code>==</code>和<code>equals()</code>的作用和区别后，现在来研究一下之前的那个问题：</p><blockquote><p>两个对象使用<code>x.equals(y)</code>判断结果为<code>true</code>时，两个对象的<code>hashCode</code>可以不同吗？</p></blockquote><p>首先我们需要知道<code>hashCode</code>到底是什么？还是从<code>Object</code>这个超类来看一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> identityHashCode(<span class="keyword">this</span>); <span class="comment">// 此处返回对象的内存地址值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码也很简单，看来默认情况下，<code>hashCode</code>就等于对象的 <strong>内存地址值</strong>（注：<code>System.identityHashCode(Object obj)</code>方法用于获取对象的内存地址，之前的样例代码中有使用）。和<code>equals()</code>方法一样重写之后，<code>hashCode()</code>方法方法也是可以被重写的，而且两者一般情况下都是成对出现。</p><p>简单测试一下String类型重写<code>hashCode()</code>方法之后有什么变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str1 = <span class="string">"James"</span>;</span><br><span class="line">    System.out.println(<span class="string">"str1 address : "</span> + System.identityHashCode(str1) + <span class="string">"\nstr1 hashCode : "</span> + str1.hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 address : 1174290147</span><br><span class="line">str1 hashCode : 71338276</span><br></pre></td></tr></table></figure><p>很明显，hashCode 已经不是内存地址了。</p><p>那么总结一下：</p><ul><li><code>equals()</code>：默认情况下比较的是对象的 <strong>内存地址值</strong>，被重写后按照重写要求进行比较，一般是比较对象的 <strong>数据值</strong></li><li><code>hashCode()</code>: 默认情况下为对象的 <strong>内存地址值</strong>，被重写后按照重写要求生成新的值。</li></ul><p>到此对于刚开始提出的问题应该很好解决了。对于这两个对象，只要我们重写<code>equals()</code>方法，就可以比较对象的 <strong>数据值</strong>，而不重写<code>hashCode()</code>方法，此时两个对象的 <strong>hashCode</strong> 就默认为内存地址值了，只要将两个对象指向不同的地址即可。</p><p>验证环节，先创建一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomBean</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        CustomBean that = (CustomBean) o;</span><br><span class="line">        <span class="keyword">return</span> age == that.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, that.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Override</span></span><br><span class="line">    <span class="comment">// public int hashCode() &#123;</span></span><br><span class="line">    <span class="comment">//     return Objects.hash(name, age);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CustomBean x = <span class="keyword">new</span> CustomBean(<span class="string">"James"</span>, <span class="number">18</span>);</span><br><span class="line">    CustomBean y = <span class="keyword">new</span> CustomBean(<span class="string">"James"</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"x.hashCode: "</span> + x.hashCode());</span><br><span class="line">    System.out.println(<span class="string">"x address : "</span> + System.identityHashCode(x));</span><br><span class="line">    System.out.println(<span class="string">"y.hashCode: "</span> + y.hashCode());</span><br><span class="line">    System.out.println(<span class="string">"x address : "</span> + System.identityHashCode(y));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"x and y is equals : "</span> + x.equals(y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x.hashCode: 1174290147</span><br><span class="line">x address : 1174290147</span><br><span class="line"></span><br><span class="line">y.hashCode: 1289696681</span><br><span class="line">x address : 1289696681</span><br><span class="line"></span><br><span class="line">x and y is equals : true</span><br></pre></td></tr></table></figure><p>很明显，这就是问题中所描述的那种情况：两个对象使用<code>x.equals(y)</code>判断结果为<code>true</code>时，两个对象的<code>hashCode</code>不相同。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>至此，<code>==</code>和<code>equals()</code>的区别及作用，<code>equals()</code>和<code>hashCode</code>的关系及使用已经了解清楚了。下面再总结一下：</p><p>对于<code>equals()</code> 和 <code>==</code> 的区别：</p><ol><li><p><code>==</code></p><ul><li>基本类型：对比它们的值是否相等</li><li>引用类型：对比它们的内存地址是否相等</li></ul></li><li><p><code>equals()</code></p></li></ol><ul><li>基本类型：使用<code>==</code>进行比较，基本类型无 equals() 方法。</li><li>引用类型：<ul><li>默认情况下，对比它们的地址是否相等；</li><li>如果<code>equals()</code>方法被重写，则根据重写的要求来比较，一般是比较 <strong>数据值</strong> 是否相同。</li></ul></li></ul><p>对于<code>equals()</code>和<code>hashCode()</code>的关系：</p><p>根据<code>Object</code>超类中的文档说明，<code>equals()</code>和<code>hashCode()</code>两个方法应该 <strong>同进同退</strong>。上面的例子只是举例说明存在那种情况，但那并不是一个很好的应用。</p><ul><li>所以一定要记住<code>equals()</code>和<code>hashCode()</code>两个方法应该 <strong>同进同退</strong>。</li><li>所以一定要记住<code>equals()</code>和<code>hashCode()</code>两个方法应该 <strong>同进同退</strong>。</li><li>所以一定要记住<code>equals()</code>和<code>hashCode()</code>两个方法应该 <strong>同进同退</strong>。</li></ul><p>重要的事情说三遍。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/03/25/5c9867e360501.jpg&quot; alt=&quot;equals_logo.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;今天朋友突然问到一个问题：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;两个对象使用 &lt;code&gt;x.equals(y)&lt;/code&gt; 判断结果为 &lt;code&gt;true&lt;/code&gt; 时，两个对象的 &lt;code&gt;hashCode&lt;/code&gt; 可以不同吗？&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在Java编程中，判断两个对象是否相等常常使用 &lt;code&gt;equals()&lt;/code&gt; 或是 &lt;code&gt;==&lt;/code&gt; ，但是其中的区别和原理可能很多人并不完全清楚。今天就借着上面这个问题来看看 &lt;code&gt;equals()&lt;/code&gt; 和 &lt;code&gt;==&lt;/code&gt; 的区别和原理。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://jemgeek.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://jemgeek.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android推送之MQTT基本用法</title>
    <link href="http://jemgeek.com/archives/2019/android-push-mqtt-base-usage.html"/>
    <id>http://jemgeek.com/archives/2019/android-push-mqtt-base-usage.html</id>
    <published>2019-02-23T12:55:00.000Z</published>
    <updated>2019-02-23T12:55:32.737Z</updated>
    
    <content type="html"><![CDATA[<p>在Android应用开发中，<strong>推送</strong> 功能经常是必不可少的一环，目前常用的推送可能有小米推送、极光推送、华为推送、友盟推送等等，在此就不一一说明了。在后台开发中，经常使用ActiveMQ或RabbitMQ等作为消息中间件，Android端可以使用MQTT协议连接ActiveMQ进行通信，实现推送的功能。</p><a id="more"></a><p>在连接 <strong>ActiveMQ</strong> 之前请先前往 <a href="http://activemq.apache.org/download.html" target="_blank" rel="noopener">ActiveMQ 官网</a> 下载最新版的 ActiveMQ，解压到本地，并运行 ActiveMQ 。</p><p><a href="https://github.com/JemGeek/AndroidSamples/tree/AndroidMQTT-v1.0/AndroidMQTT" target="_blank" rel="noopener">GitHub 样例代码</a><br><a href="https://github.com/JemGeek/AndroidSamples/blob/AndroidMQTT-v1.0/AndroidMQTT/apk/app-debug.apk" target="_blank" rel="noopener">点击下载 APK 样例</a></p><p>Demo 演示：</p><p><img src="https://i.loli.net/2019/02/23/5c710647b9e0c.gif" alt="AndroidMQTT-v1.0.gif"></p><h3 id="依赖及配置"><a href="#依赖及配置" class="headerlink" title="依赖及配置"></a>依赖及配置</h3><p>在 <strong>build.gradle</strong> 文件中引入 <strong>MQTT</strong> 协议所需的包。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">// MQTT</span></span><br><span class="line">    implementation <span class="string">'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.0'</span></span><br><span class="line">    implementation <span class="string">'org.eclipse.paho:org.eclipse.paho.android.service:1.1.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <strong>AndroidManifest.xml</strong> 中引入 <strong>MqttService</strong> 及相应的权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Permissions the Application Requires --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WAKE_LOCK"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">"org.eclipse.paho.android.service.MqttService"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="连接-ActiveMQ"><a href="#连接-ActiveMQ" class="headerlink" title="连接 ActiveMQ"></a>连接 ActiveMQ</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="comment">// MQTT 客户端</span></span><br><span class="line">    <span class="keyword">private</span> MqttAndroidClient mqttAndroidClient;</span><br><span class="line">    <span class="comment">// 连接 ActiveMQ 的URI</span></span><br><span class="line">    <span class="keyword">private</span> String serverUri = <span class="string">"tcp://iot.eclipse.org:1883"</span>;</span><br><span class="line"><span class="comment">//    private String serverUri = "tcp://[your ip]:[mqtt port]";</span></span><br><span class="line">    <span class="comment">// 客户端 ID，用以识别客户端</span></span><br><span class="line">    <span class="keyword">private</span> String clientId = <span class="string">"android_sample_001"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 MQTT 协议连接 ActiveMQ</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mqttAndroidClient = <span class="keyword">new</span> MqttAndroidClient(getApplicationContext(), serverUri, clientId);</span><br><span class="line">        mqttAndroidClient.setCallback(<span class="keyword">new</span> MqttCallbackExtended() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectComplete</span><span class="params">(<span class="keyword">boolean</span> reconnect, String serverURI)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO 连接完成</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectionLost</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO 连接中断</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageArrived</span><span class="params">(String topic, MqttMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// TODO 消息到达</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliveryComplete</span><span class="params">(IMqttDeliveryToken token)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 消息成功传输后调用</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 设置 MQTT 连接参数</span></span><br><span class="line">        MqttConnectOptions mqttConnectOptions = <span class="keyword">new</span> MqttConnectOptions();</span><br><span class="line">        mqttConnectOptions.setAutomaticReconnect(<span class="keyword">true</span>); <span class="comment">// 设置自动重连</span></span><br><span class="line">        mqttConnectOptions.setCleanSession(<span class="keyword">false</span>); <span class="comment">// 设置是否清除 Session</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 开始连接</span></span><br><span class="line">            mqttAndroidClient.connect(mqttConnectOptions, <span class="keyword">null</span>, <span class="keyword">new</span> IMqttActionListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(IMqttToken asyncActionToken)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// TODO 连接成功</span></span><br><span class="line">                    <span class="comment">// 连接成功后可订阅主题</span></span><br><span class="line">                    subscribeToTopic();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(IMqttToken asyncActionToken, Throwable exception)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// TODO 连接失败</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MqttException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="订阅主题"><a href="#订阅主题" class="headerlink" title="订阅主题"></a>订阅主题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="comment">// MQTT 客户端</span></span><br><span class="line">    <span class="keyword">private</span> MqttAndroidClient mqttAndroidClient;</span><br><span class="line">    <span class="comment">// 主题名称</span></span><br><span class="line">    <span class="keyword">private</span> String topic = <span class="string">"AndroidTopic"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订阅主题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">subscribeToTopic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mqttAndroidClient.subscribe(topic, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">new</span> IMqttActionListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(IMqttToken asyncActionToken)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// TODO 主题订阅成功</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(IMqttToken asyncActionToken, Throwable exception)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// TODO 主题订阅失败</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发布消息"><a href="#发布消息" class="headerlink" title="发布消息"></a>发布消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isConnected(mqttAndroidClient)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 包装 MqttMessage 消息体</span></span><br><span class="line">                MqttMessage message = <span class="keyword">new</span> MqttMessage();</span><br><span class="line">                message.setPayload(msg.getBytes());</span><br><span class="line"></span><br><span class="line">                mqttAndroidClient.publish(topic, message, <span class="keyword">null</span>, <span class="keyword">new</span> IMqttActionListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(IMqttToken asyncActionToken)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// TODO 发布消息成功</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(IMqttToken asyncActionToken, Throwable exception)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// TODO 发布消息失败</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Android应用开发中，&lt;strong&gt;推送&lt;/strong&gt; 功能经常是必不可少的一环，目前常用的推送可能有小米推送、极光推送、华为推送、友盟推送等等，在此就不一一说明了。在后台开发中，经常使用ActiveMQ或RabbitMQ等作为消息中间件，Android端可以使用MQTT协议连接ActiveMQ进行通信，实现推送的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jemgeek.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jemgeek.com/tags/Android/"/>
    
      <category term="push" scheme="http://jemgeek.com/tags/push/"/>
    
      <category term="MQTT" scheme="http://jemgeek.com/tags/MQTT/"/>
    
      <category term="推送" scheme="http://jemgeek.com/tags/%E6%8E%A8%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>七牛云测试域名过期后如何备份文件</title>
    <link href="http://jemgeek.com/archives/2019/qiniu-backup-images.html"/>
    <id>http://jemgeek.com/archives/2019/qiniu-backup-images.html</id>
    <published>2019-01-15T06:46:00.000Z</published>
    <updated>2019-02-23T09:08:00.837Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/01/15/5c3da14e2eb8b.jpg" alt="qiniu-logo.jpg"></p><p>之前很多人都会使用【七牛云】作为图床，非常方便，但是后来七牛云政策做了修改，测试域名只有30个自然日的试用期，到期将自动回收。导致存储空间中文件或图片既不能外链下载，也无法从七牛云的控制台下载或预览，因此很多博客中的图片无法显示。</p><p>如果想要继续正常使用的话，需要绑定完成 ICP 备案的域名才可以，但是进行 ICP 备案，还需要一台国内主机，及一系列的手续，产生了不必要的费用及麻烦。</p><p>那么如何将失效存储空间中的文件或图片下载下来呢？本篇将告诉你方法。</p><a id="more"></a><h2 id="一、使用自定义域名"><a href="#一、使用自定义域名" class="headerlink" title="一、使用自定义域名"></a>一、使用自定义域名</h2><p>如果您有一个完成 ICP 备案的域名，可以与失效存储空间进行绑定，绑定之后可以继续使用，也可以将文件或图片下载下来进行备份。</p><p>此方法在此不再赘述。</p><h2 id="二、使用-qshell-备份文件"><a href="#二、使用-qshell-备份文件" class="headerlink" title="二、使用 qshell 备份文件"></a>二、使用 qshell 备份文件</h2><p>除了绑定自定义域名进行备份外，我们还可以通过 qshell 工具进行文件的备份。</p><p>qshell 工具是七牛云官方提供得，方便开发者测试和使用七牛云API的一个命令行工具。</p><p><a href="https://developer.qiniu.com/kodo/tools/1302/qshell" target="_blank" rel="noopener">qshell 官方文档</a></p><p><a href="https://github.com/qiniu/qshell" target="_blank" rel="noopener">qshell Github地址</a></p><p><strong>快速模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 在同存储区域内创建一个新的存储空间</span><br><span class="line"></span><br><span class="line"># 账号赋权</span><br><span class="line">./qshell.exe account &lt;AccessKey&gt; &lt;SecretKey&gt; &lt;Name&gt;</span><br><span class="line"></span><br><span class="line"># 获取失效存储空间的文件列表</span><br><span class="line">./qshell.exe listbucket bucketError -o list.txt</span><br><span class="line"></span><br><span class="line"># 处理文件，仅获取第一列文件名</span><br><span class="line">cat list.txt | awk &apos;&#123;print $1&#125;&apos; &gt;list_final.txt</span><br><span class="line"></span><br><span class="line"># 将失效存储空间的文件复制到新的存储空间</span><br><span class="line">./qshell.exe batchcopy --force --overwrite bucketError bucketNew -i list_final.txt</span><br><span class="line"></span><br><span class="line"># 下载文件</span><br><span class="line">./qshell.exe qdownload download.conf</span><br></pre></td></tr></table></figure><h3 id="2-1-在七牛云控制台新建空间"><a href="#2-1-在七牛云控制台新建空间" class="headerlink" title="2.1 在七牛云控制台新建空间"></a>2.1 在七牛云控制台新建空间</h3><p>使用浏览器进入<a href="http://devtools.qiniu.com/" target="_blank" rel="noopener">七牛云控制台</a>，在对象存储中新建一个存储空间，此存储空间需要与失效的存储空间在同一个【存储区域】上（比如都在华东，<strong>不在同一存储区域无法拷贝</strong>）。此存储空间被用来将失效存储空间中的文件复制进去，因为新建的存储空间有一个可以使用30天的测试域名，所以可以从这个新建的存储空间中将原来的文件下载下来进行备份。</p><h3 id="2-2-安装-qshell-工具"><a href="#2-2-安装-qshell-工具" class="headerlink" title="2.2 安装 qshell 工具"></a>2.2 安装 qshell 工具</h3><p>qshell 工具下载地址为：<a href="http://devtools.qiniu.com/qshell-v2.3.5.zip" target="_blank" rel="noopener">http://devtools.qiniu.com/qshell-v2.3.5.zip</a></p><p>下载完成后解压，将会得到对应三种操作系统的程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|-qshell-v2.3.5</span><br><span class="line">  |-qshell_darwin_x64</span><br><span class="line">  |-qshell_linux_arm</span><br><span class="line">  |-qshell_linux_x64</span><br><span class="line">  |-qshell_linux_x86</span><br><span class="line">  |-qshell_windows_x64.exe</span><br><span class="line">  |-qshell_windows_x86.exe</span><br></pre></td></tr></table></figure><p>如果你是 Windows 系统的话，那么你应该使用 <strong>qshell_windows_x64.exe</strong> 这个程序，因为这是一个命令行工具，所以双击打开会闪退，应该在命令行中操作。为了简化命令，可将其重命名为 <strong>qshell.exe</strong> ，命令使用形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># CMD 命令格式</span><br><span class="line">qshell.exe 命令 参数</span><br><span class="line"></span><br><span class="line"># Git Bash 等类 Linux 终端命令格式</span><br><span class="line">./qshell.exe 命令 参数</span><br></pre></td></tr></table></figure><h3 id="2-3-设置账号密钥"><a href="#2-3-设置账号密钥" class="headerlink" title="2.3 设置账号密钥"></a>2.3 设置账号密钥</h3><p>想要使用 qshell 操作七牛空间，需要添加账户密钥 AccessKey 和 SecretKey, 赋予 qshell 权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># qshell-2.3.5 版本命令</span><br><span class="line">./qshell.exe account &lt;AccessKey&gt; &lt;SecretKey&gt; &lt;Name&gt;</span><br><span class="line"></span><br><span class="line"># qshell-2.2.0 版本命令</span><br><span class="line">./qshell.exe account &lt;AccessKey&gt; &lt;SecretKey&gt;</span><br></pre></td></tr></table></figure><p>AccessKey, SecretKey 两个参数可以从<a href="https://portal.qiniu.com/user/key" target="_blank" rel="noopener">七牛云-密钥管理</a>中获取。</p><p>Name是用户可以任意取的名字，表示当前在本地记录的账户的名称，和在七牛注册的邮箱信息没有关系。</p><p>注：<strong>qshell-2.2.0 版本</strong> 与 <strong>qshell-2.3.5 版本</strong> 命令上稍有差异。</p><p><a href="https://github.com/qiniu/qshell/blob/master/docs/account.md" target="_blank" rel="noopener">qshell account 命令文档</a></p><h3 id="2-4-复制失效存储空间文件至新存储空间"><a href="#2-4-复制失效存储空间文件至新存储空间" class="headerlink" title="2.4 复制失效存储空间文件至新存储空间"></a>2.4 复制失效存储空间文件至新存储空间</h3><ul><li>假设失效存储空间名为：<strong>bucketError</strong></li><li>假设新建存储空间名为：<strong>bucketNew</strong></li></ul><p>若想要将失效存储空间的文件复制到新的存储空间，首先需要获取失效存储空间的文件列表，使用 <strong>listbucket</strong> 命令进行文件列表的导出。获取到文件列表后，使用 <strong>batchcopy</strong> 命令将 <strong>bucketError</strong> 中的文件全部复制到 <strong>bucketNew</strong> 中。</p><p>(1) 使用 <strong>listbucket</strong> 导出文件列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># qshell-2.3.5 版本命令</span><br><span class="line">./qshell.exe listbucket bucketError -o list.txt</span><br><span class="line"></span><br><span class="line"># qshell-2.2.0 版本命令</span><br><span class="line">./qshell.exe listbucket bucketError list.txt</span><br></pre></td></tr></table></figure><p><strong>list.txt</strong> 文件结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hexo.png33446Fmmc-_RoRE19Gy86M_p3sEqt-Ue315475323542679537image/png0</span><br><span class="line">atom.xml249682FhtSZviyys9iSIMyPBmuohWEJDcE15475323543559808application/xml0</span><br><span class="line">favicon.ico4286FiXUxb856CirSyQ78t3VQNQmCIZO15475323543881185image/x-icon0</span><br><span class="line">ssh_rsa.png17895FsImghWkk55vj06DIt6DAhhLzAxQ15475323564546303image/png0</span><br></pre></td></tr></table></figure><p><a href="https://github.com/qiniu/qshell/blob/master/docs/listbucket.md" target="_blank" rel="noopener">qshell listbucket 命令文档</a></p><p>(2) 修改文件列表结构</p><p>这里需要修改文件，只保留第一列的文件名，可以用awk获取list文件的第一列，不然无法进行复制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat list.txt | awk &apos;&#123;print $1&#125;&apos; &gt;list_final.txt</span><br></pre></td></tr></table></figure><p>windows 系统中CMD无法使用上面的命令，可以使用 <strong>Git Bash</strong> 终端或手动修改文件。 <strong>list_final.txt</strong> 文件结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hexo.png</span><br><span class="line">atom.xml</span><br><span class="line">favicon.ico</span><br><span class="line">ssh_rsa.png</span><br></pre></td></tr></table></figure><p>(3) 复制文件到新存储空间</p><p>获取到需要的文件列表 - <strong>list_final.txt</strong> 后，就可以进行文件的复制了。使用 <strong>batchcopy</strong> 命令进行复制。<br>文件复制方向： <strong>bucketError</strong> -&gt; <strong>bucketNew</strong> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># qshell-2.3.5 版本命令</span><br><span class="line">./qshell.exe batchcopy --force --overwrite bucketError bucketNew -i list_final.txt</span><br><span class="line"></span><br><span class="line"># qshell-2.2.0 版本命令</span><br><span class="line">./qshell.exe batchcopy --force --overwrite bucketError bucketNew list_final.txt</span><br></pre></td></tr></table></figure><ul><li>force : 没有此选项，需要输入验证码，加入此项则不需要输入。</li><li>overwrite ：如果批量复制的文件列表中存在目标空间已有同名文件的情况，针对该文件的复制会失败，如果希望能够强制覆盖目标文件，那么可以使用-overwrite选项。</li></ul><p><a href="https://github.com/qiniu/qshell/blob/master/docs/batchcopy.md" target="_blank" rel="noopener">qshell batchcopy 命令文档</a></p><h3 id="2-5-下载新存储空间的文件"><a href="#2-5-下载新存储空间的文件" class="headerlink" title="2.5 下载新存储空间的文件"></a>2.5 下载新存储空间的文件</h3><p>使用 <strong>qdownload</strong> 命令可以将存储空间中的文件下载到本地。但是该功能默认需要收取流量费用，如果想要免费下载，还需进行以下配置。</p><p>(1) 配置 <strong>download.conf</strong></p><p>在 <strong>qshell</strong> 目录下创建新文件 <strong>download.conf</strong> ，并将以下信息添加进去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;dest_dir&quot;   :   &quot;D:\\Images\\&quot;,</span><br><span class="line">    &quot;bucket&quot;     :   &quot;bucketNew&quot;,</span><br><span class="line">    &quot;cdn_domain&quot; :   &quot;xxxxxx.bkt.clouddn.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>dest_dir</td><td>本地数据备份路径，为全路径，并且文件夹需要事先创建好，不然无法下载</td></tr><tr><td>bucket</td><td>空间名称</td></tr><tr><td>cdn_domain</td><td>设置下载的CDN域名，此处为新建空间的测试域名。默认为空表示从存储源站下载，需支付源站流量费用，无法减免！！！</td></tr></tbody></table><p><strong>备注：</strong></p><ol><li>在Windows系统下面使用的时候，注意dest_dir的设置遵循D:\jemy\backup这种方式。也就是路径里面的\要有两个（\）。</li><li>在默认不指定cdn_domain的情况下，会从存储源站下载资源，这部分下载产生的流量会生成存储源站下载流量的计费，请注意，这部分计费不在七牛CDN免费10G流量覆盖范围。</li></ol><p>(2) 文件下载</p><p>配置好文件之后，可以使用下面的命令进行文件下载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># qshell-2.2.0 与 qshell-2.3.5 版本命令相同</span><br><span class="line">./qshell.exe qdownload download.conf</span><br></pre></td></tr></table></figure><p>下载完成后可以在对应的文件夹中查看下载的文件。不管是备份，还是更换图床都是可以的了。</p><p><a href="https://github.com/qiniu/qshell/blob/master/docs/qdownload.md" target="_blank" rel="noopener">qshell qdownload 命令文档</a></p><h2 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h2><ol><li><a href="https://developer.qiniu.com/kodo/tools/1302/qshell" target="_blank" rel="noopener">七牛云 qshell 官方文档</a></li><li><a href="https://github.com/qiniu/qshell" target="_blank" rel="noopener">qshell Github地址</a></li><li><a href="https://github.com/qiniu/qshell/issues/188" target="_blank" rel="noopener">Github 中关于此问题的issues</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/01/15/5c3da14e2eb8b.jpg&quot; alt=&quot;qiniu-logo.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;之前很多人都会使用【七牛云】作为图床，非常方便，但是后来七牛云政策做了修改，测试域名只有30个自然日的试用期，到期将自动回收。导致存储空间中文件或图片既不能外链下载，也无法从七牛云的控制台下载或预览，因此很多博客中的图片无法显示。&lt;/p&gt;&lt;p&gt;如果想要继续正常使用的话，需要绑定完成 ICP 备案的域名才可以，但是进行 ICP 备案，还需要一台国内主机，及一系列的手续，产生了不必要的费用及麻烦。&lt;/p&gt;&lt;p&gt;那么如何将失效存储空间中的文件或图片下载下来呢？本篇将告诉你方法。&lt;/p&gt;
    
    </summary>
    
      <category term="other" scheme="http://jemgeek.com/categories/other/"/>
    
    
      <category term="other" scheme="http://jemgeek.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 中那些最好用的插件</title>
    <link href="http://jemgeek.com/archives/2018/android-studio-quality-plugins.html"/>
    <id>http://jemgeek.com/archives/2018/android-studio-quality-plugins.html</id>
    <published>2018-01-29T06:17:00.000Z</published>
    <updated>2020-04-12T06:21:41.862Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/01/24/5c49c4d7bc787.jpeg" alt="Android-Studio-3.0-logo.jpeg"></p><p>在日常的 Android 开发中，为了可以减少工作量和更好的使用 Android Studio，插件是必不可少的工具。我们可以使用插件来为我们节约开发时间，用插件帮助我们生成代码，用插件来协助我们更好的开发。</p><p>下面将列举部分我个人使用过并且觉得很不错的一些插件，如果你有其他好的推荐，欢迎在评论中分享。</p><a id="more"></a><h2 id="插件的安装"><a href="#插件的安装" class="headerlink" title="插件的安装"></a>插件的安装</h2><p>在 Android Studio 中安装插件非常简单，步骤如下：</p><ol><li>File -&gt; Settings 打开设置</li><li>选择 Plugins</li><li>搜索框中输入你要安装的插件，如果还未安装，会提示你在仓库中搜索，点击Search in repositorirs</li><li>在左侧选中你要安装的插件，在右侧点击 Install 安装</li><li>按照以上步骤安装其他插件</li><li>所有插件安装完成之后，重启 Android Studio 即可</li></ol><p><img src="https://i.loli.net/2019/01/29/5c4ff59cb3f7c.png" alt="android-studio-plugins-setp-1.png"></p><p>搜索插件，如果插件已安装，将会显示，如果未安装，点击 Search in repositorirs，在仓库中搜索插件。</p><p><img src="https://i.loli.net/2019/01/29/5c4ff59cc8942.png" alt="android-studio-plugins-setp-2.png"></p><p>搜索在插件之后，点击安装即可。</p><h2 id="GsonFormat"><a href="#GsonFormat" class="headerlink" title="GsonFormat"></a><a href="https://plugins.jetbrains.com/plugin/7654-gsonformat" target="_blank" rel="noopener">GsonFormat</a></h2><p><strong>GsonFormat</strong> 插件是用来将 JSON 字符串快速转化为 JavaBean 实体类的一个插件，免去了我们自己手写的过程。</p><p><img src="https://i.loli.net/2019/01/29/5c4fcbadca939.png" alt="GsonFormat-demo-image.png"></p><p>在 Android Studio 中需要先创建一个 JavaBean 的实体类，然后在类中按下快捷键 <strong>Alt + S</strong> 打开 GsonFormat 弹出框，将 JSON 字符串复制进去即可。</p><h2 id="Android-ButterKnife-Zelezny"><a href="#Android-ButterKnife-Zelezny" class="headerlink" title="Android ButterKnife Zelezny"></a><a href="https://plugins.jetbrains.com/plugin/7369-android-butterknife-zelezny" target="_blank" rel="noopener">Android ButterKnife Zelezny</a></h2><p><a href="https://plugins.jetbrains.com/plugin/7369-android-butterknife-zelezny" target="_blank" rel="noopener">Android ButterKnife Zelezny</a> 是开源工具 <a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="noopener">ButterKnife</a> 的相关插件。ButterKnife 将字段和方法与 view 进行绑定，通过注解的方式生成样板代码，使用 <strong>@BindView</strong> 字段代替 <strong>findViewById</strong>。</p><p>而 <strong>Android ButterKnife Zelezny</strong> 插件则可以帮助我们从选定的布局XML中直接生成 ButterKnife 的注入。</p><p><img src="https://i.loli.net/2019/01/29/5c4fd06985046.png" alt="Android-ButterKnife-Zelezny-demo-image.png"></p><p>鼠标在布局文件上右键，选择 <strong>Generate</strong> -&gt; <strong>Generate ButterKnife Injections</strong> 即可生成。</p><h2 id="Android-Parcelable-code-generator"><a href="#Android-Parcelable-code-generator" class="headerlink" title="Android Parcelable code generator"></a><a href="https://plugins.jetbrains.com/plugin/7332-android-parcelable-code-generator" target="_blank" rel="noopener">Android Parcelable code generator</a></h2><p>JavaBean 序列化代码生成插件，可以快速实现 Parcelable 接口，实现序列化。</p><p><img src="https://i.loli.net/2019/01/29/5c4fe70dd8254.png" alt="android-studio-plugins-parcelable.png"></p><p>只需在 JavaBean 实体类中右键，选择 <strong>Generate</strong> -&gt; <strong>Parcelable</strong> 即可生成。</p><h2 id="ADB-WiFi-Connect"><a href="#ADB-WiFi-Connect" class="headerlink" title="ADB WiFi Connect"></a><a href="https://plugins.jetbrains.com/plugin/9717-adb-wifi-connect" target="_blank" rel="noopener">ADB WiFi Connect</a></h2><p>Android 开发，真机调试必不可少，但是总是通过连线进行调试会很不方便，所以我们可以使用无线的方式进行调试，会方便很多，只要保证手机和电脑在同一个局域网中即可。使用下面的命令即可远程连接到手机进行调试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 连接到 IP 为 192.168.1.101 的手机</span><br><span class="line">$ adb connect 192.168.1.101</span><br><span class="line">connected to 192.168.1.107:5555  # 出现此提示说明连接成功，默认端口为 5555</span><br><span class="line"></span><br><span class="line"># 断开连接</span><br><span class="line">$ adb disconnect 192.168.1.101</span><br><span class="line">disconnected 192.168.1.107  # 出现此提示说明断开连接成功</span><br><span class="line"></span><br><span class="line"># 更多用法在此不再赘述</span><br></pre></td></tr></table></figure><p><strong>ADB WiFi Connect</strong> 插件的功能在于当你使用 USB 线将手机接到电脑上之后，可以通过界面进行无线连接并备份、管理等操作，更直观，也更易于操作。</p><p><img src="https://i.loli.net/2019/01/29/5c4fea6c9c0f7.png" alt="android-studio-plugins-adb-wifi.png"></p><p>插件安装好之后，需要重启 Android Studio，重启之后在工具栏最后面有上图所示图标，点击图标即可打开插件。</p><p><img src="https://i.loli.net/2019/01/29/5c4feb2bae7f8.png" alt="android-studio-plugins-adb-wifi-ui.png"></p><p>连接过的设备，可保存在 <strong>Saved devices</strong> 中，如果IP不变的话，下次可直接连接。</p><h2 id="Markdown-Navigator"><a href="#Markdown-Navigator" class="headerlink" title="Markdown Navigator"></a><a href="https://plugins.jetbrains.com/plugin/7896-markdown-navigator" target="_blank" rel="noopener">Markdown Navigator</a></h2><p>MarkDown 文档编辑插件，开发中可以用来编辑 <strong>README</strong> 或是其他开发文档都很好用。</p><p><img src="https://i.loli.net/2019/01/29/5c4fe949aec1e.png" alt="android-studio-plugins-markdown.png"></p><h2 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a><a href="https://plugins.jetbrains.com/plugin/8579-translation" target="_blank" rel="noopener">Translation</a></h2><p>一个功能非常强大的翻译插件，支持的IDE也很多，具体请查看 <a href="https://github.com/YiiGuxing/TranslationPlugin" target="_blank" rel="noopener">Translation 的 GitHub 仓库</a></p><p><img src="https://i.loli.net/2019/01/29/5c4fef2937775.png" alt="android-studio-plugins-translation.png"></p><p>安装完成后，重启 Android Studio，选中英文，右键 -&gt; Translate 即可翻译。</p><p>功能较多，不好一一说明，更多用法及功能请见 <a href="https://github.com/YiiGuxing/TranslationPlugin" target="_blank" rel="noopener">Translation 的 GitHub 仓库</a>，文档为中文，阅读无障碍。</p><h2 id="Android-Material-Design-Icon-Generator"><a href="#Android-Material-Design-Icon-Generator" class="headerlink" title="Android Material Design Icon Generator"></a><a href="https://plugins.jetbrains.com/plugin/7647-android-material-design-icon-generator" target="_blank" rel="noopener">Android Material Design Icon Generator</a></h2><p><strong>Android Material Design Icon Generator</strong> 是一个自动生成 Material Design 风格的图标的插件，相对于插件 <strong>Android Drawable Importer</strong> 来说，个人更喜欢这个插件，个人觉得这个插件更好用一点。</p><p><img src="https://i.loli.net/2019/01/29/5c4ff2840b151.png" alt="android-studio-plugins-material-icon.png"></p><p>在任意地方 <code>右键 -&gt; New -&gt; Material Design icon</code>打开面板即可，在面板中对图标进行选择及设置。</p><h2 id="Genymotion"><a href="#Genymotion" class="headerlink" title="Genymotion"></a><a href="https://plugins.jetbrains.com/plugin/7269-genymotion" target="_blank" rel="noopener">Genymotion</a></h2><p>Genymotion 是一款速度较快的 Android 模拟器，以前单独安装使用过，效果很不错，现在已经可以直接在 Android Studio 的插件中进行了。</p><p><img src="https://i.loli.net/2019/01/29/5c4ff87deeb40.png" alt="android-studio-plugins-Genymotion.png"></p><h2 id="插件资源站"><a href="#插件资源站" class="headerlink" title="插件资源站"></a>插件资源站</h2><p>可在下面的插件资源站搜索更多插件，查看插件资源等信息。</p><ul><li><a href="https://plugins.jetbrains.com/" target="_blank" rel="noopener">JetBrains 插件总站</a></li><li><a href="https://plugins.jetbrains.com/androidstudio" target="_blank" rel="noopener">JetBrains 总站下 Android Studio 插件</a></li></ul><h2 id="其他章节"><a href="#其他章节" class="headerlink" title="其他章节"></a>其他章节</h2><ul><li><a href="http://jemgeek.com/archives/2019/android-studio-installation.html">Android Studio 超详细安装教程</a></li><li><a href="http://jemgeek.com/archives/2019/android-studio-necessary-config.html">Android Studio 安装后必做的配置</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/01/24/5c49c4d7bc787.jpeg&quot; alt=&quot;Android-Studio-3.0-logo.jpeg&quot;&gt;&lt;/p&gt;&lt;p&gt;在日常的 Android 开发中，为了可以减少工作量和更好的使用 Android Studio，插件是必不可少的工具。我们可以使用插件来为我们节约开发时间，用插件帮助我们生成代码，用插件来协助我们更好的开发。&lt;/p&gt;&lt;p&gt;下面将列举部分我个人使用过并且觉得很不错的一些插件，如果你有其他好的推荐，欢迎在评论中分享。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jemgeek.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jemgeek.com/tags/Android/"/>
    
      <category term="Android Studio" scheme="http://jemgeek.com/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 安装后必做的配置</title>
    <link href="http://jemgeek.com/archives/2018/android-studio-necessary-config.html"/>
    <id>http://jemgeek.com/archives/2018/android-studio-necessary-config.html</id>
    <published>2018-01-25T01:38:00.000Z</published>
    <updated>2020-04-12T06:21:29.148Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/01/24/5c49c4d7bc787.jpeg" alt="Android-Studio-3.0-logo.jpeg"></p><p>在上一文：<a href="http://jemgeek.com/archives/2019/android-studio-installation.html">Android Studio 超详细安装教程</a> 中，我们已经成功的安装了 Android Studio 开发工具，并进行了第一次启动前的初步设置。然而这点设置是远远不够的，为了让我们的开发工具能够使用得更加得心应手，还需要更多的设置。</p><a id="more"></a><h2 id="一、系统环境及下载资源"><a href="#一、系统环境及下载资源" class="headerlink" title="一、系统环境及下载资源"></a>一、系统环境及下载资源</h2><h3 id="1-1-安装环境"><a href="#1-1-安装环境" class="headerlink" title="1.1 安装环境"></a>1.1 安装环境</h3><ul><li>电脑系统 : Windows 10</li><li>JDK 版本 : 1.8</li><li>Android Studio : 3.0</li></ul><h3 id="1-2-下载资源"><a href="#1-2-下载资源" class="headerlink" title="1.2 下载资源"></a>1.2 下载资源</h3><ul><li><a href="https://developer.android.com/studio/?hl=zh-cn" target="_blank" rel="noopener">官方下载地址(需翻墙)</a></li><li><a href="http://www.android-studio.org/" target="_blank" rel="noopener">国内Android Studio下载地址(不需翻墙)</a></li></ul><p>官方下载地址是需要翻墙才可以进入并且下载的，国内下载地址虽然可以不用翻墙，但是国内的往往不是最新版本的Android Studio ，如果需要体验最新版本的 Android Studio 还请前往官方下载地址进行下载安装。</p><h2 id="二、设置"><a href="#二、设置" class="headerlink" title="二、设置"></a>二、设置</h2><h3 id="2-1-自动导包"><a href="#2-1-自动导包" class="headerlink" title="2.1 自动导包"></a>2.1 自动导包</h3><p>在日常编程中，我们可以使用 Alt + Enter 进行导包，使用 Ctrl + Alt + O 来清除无用包，但是这些事情其实都是可以自动完成的。</p><ol><li>File -&gt; Settings 打开设置</li><li>选择 Editor -&gt; General -&gt; Auto Import</li><li>勾选 Add unambiguous imports on the fly</li><li>勾选 Optimize imports on the fly(on current project)</li><li>点击 Apply 进行应用</li></ol><p><img src="https://i.loli.net/2019/01/24/5c49d8273ee4b.png" alt="android-studio-config-setp-11.png"></p><h3 id="2-2-字体大小"><a href="#2-2-字体大小" class="headerlink" title="2.2 字体大小"></a>2.2 字体大小</h3><p>Android Studio 的界面 UI 中的字体大小和代码中的字体大小都是 12 。对于我们来说可能有点小了，看着不是很舒服。所以我们需要对字体大小进行设置。</p><p>修改代码字体大小：</p><ol><li>File -&gt; Settings 打开设置</li><li>选择 Editor -&gt; Font</li><li>修改 Size 后的值，如： 14</li><li>点击 Apply 进行应用</li></ol><p><img src="https://i.loli.net/2019/01/24/5c49da008e48f.png" alt="android-studio-config-setp-12.png"></p><p>修改软件界面 UI 中的字体大小：</p><ol><li>File -&gt; Settings 打开设置</li><li>选择 Appearance &amp; Behavior -&gt; Appearance</li><li>勾选 Override default fonts by (not recommended):</li><li>修改 Size 后的值，如： 14</li><li>点击 Apply 进行应用</li></ol><p><img src="https://i.loli.net/2019/01/24/5c49da00a2914.png" alt="android-studio-config-setp-13.png"></p><h3 id="2-3-命名前缀"><a href="#2-3-命名前缀" class="headerlink" title="2.3 命名前缀"></a>2.3 命名前缀</h3><p>在 Android 开发中我们常常遵循一些代码开发规范，在Android 源码中我们可以看到通常成员变量都是以‘m’开头。其实在 Android Studio 中可以在自动生成字段名称的时候加上自定义的前缀。比如：</p><ul><li>非共有，非静态的成员变量以’m’开始</li><li>静态成员变量以’s’开始</li></ul><ol><li>File -&gt; Settings 打开设置</li><li>选择 Editor -&gt; Code Style -&gt; Java</li><li>选择 Code Generation 标签</li><li>给Field 添加一个’m’前缀，给Static filed 添加一个’s’前缀</li><li>点击 Apply 进行应用</li></ol><p><img src="https://i.loli.net/2019/01/24/5c49dbc804da8.png" alt="android-studio-config-setp-14.png"></p><h3 id="2-4-Log-颜色"><a href="#2-4-Log-颜色" class="headerlink" title="2.4 Log 颜色"></a>2.4 Log 颜色</h3><p>Darcula 主题中 Logcat 的默认配色只有红白两种颜色，非常不便于我们区分 Log 的类型。所以我们可以通过修改不同级别的 Log 的颜色来加以区分。</p><ol><li>File -&gt; Settings 打开设置</li><li>选择 Editor -&gt; Code Scheme -&gt; Android Logcat</li><li>选择一个级别名称，如：Assert</li><li>取消勾选 Inherit values from</li><li>在 Foreground 后面选择对应的颜色（可以按照下面的颜色表进行设置，也可自行设置）</li><li>依次设置其他级别的 Log 的颜色</li><li>点击 Apply 进行应用</li></ol><p><img src="https://i.loli.net/2019/01/25/5c4a6dc1d5805.png" alt="android-studio-config-setp-15.png"></p><p>点击 <strong>Foreground</strong> 后面的颜色，进行颜色选择。</p><p><img src="https://i.loli.net/2019/01/25/5c4a6dc1f0c69.png" alt="android-studio-config-setp-16.png"></p><p>选择好颜色之后，点击 <strong>Choose</strong> 即可。其他级别的颜色设置同上。</p><p>Log 颜色表：</p><table><thead><tr><th>Log 级别</th><th>颜色</th></tr></thead><tbody><tr><td>Assert</td><td>#AA66CC</td></tr><tr><td>Debug</td><td>#33B5E5</td></tr><tr><td>Error</td><td>#FF4444</td></tr><tr><td>Info</td><td>#99CC00</td></tr><tr><td>Verbose</td><td>#FFFFFF</td></tr><tr><td>Warning</td><td>#FFBB33</td></tr></tbody></table><p>修改前的 Log 的颜色：</p><p><img src="https://i.loli.net/2019/01/24/5c49de9a86f2d.png" alt="android-studio-logcat-darcula.png"></p><p>修改后的 Log 的颜色：</p><p><img src="https://i.loli.net/2019/01/24/5c49de9a88af6.png" alt="android-studio-logcat-new.png"></p><h3 id="2-5-设置代码警示线"><a href="#2-5-设置代码警示线" class="headerlink" title="2.5 设置代码警示线"></a>2.5 设置代码警示线</h3><p>在 Android Studio 安装完成之后，打开文件进行代码编辑时，你会发现编辑区域中间有一条从上到下的白线。这条白线其实是 <strong>代码警示线</strong> ，用来提醒你代码长度最好不要超过这条线。如果你是强迫症，想要去掉这条白线，该怎么做呢？</p><ol><li>File -&gt; Settings 打开设置</li><li>选择 Editor -&gt; General -&gt; Appearance</li><li>取消勾选 Show hard wrap guide (configured in Code Style options)</li><li>点击 Apply 进行应用</li></ol><p><img src="https://i.loli.net/2019/01/25/5c4a70ce9e6a7.png" alt="android-studio-config-setp-17.png"></p><p>如上图所示，在代码编辑区域有一条从上到下的白线，其关联设置选项为 <strong>Show hard wrap guide (configured in Code Style options)</strong> 。</p><p><img src="https://i.loli.net/2019/01/25/5c4a70cea2746.png" alt="android-studio-config-setp-18.png"></p><p>如需去除白线，取消此选项勾选并应用即可，如上图所示。</p><p>当然官方建议不去除此白线，用以提醒自己一行代码的长度不要过长。</p><h3 id="2-6-设置快捷键"><a href="#2-6-设置快捷键" class="headerlink" title="2.6 设置快捷键"></a>2.6 设置快捷键</h3><p>在几年前，Android 应用大多还是使用 Eclipse 进行开发，后来出了 Android Studio ，以其良好的界面，优异的特性迅速取代了 Eclipse ,目前 Android Studio 基本已经完全取代了 Eclipse 。但是还是有一些小伙伴可能是从 Eclipse 转到 Android Studio ，更熟悉 Eclipse 的快捷键，而对 Android Studio 的快捷键非常陌生，甚至别扭，所以 Android Studio 贴心的提供了多个版本的快捷键方案给用户做选择，让你更好的融入 Android Studio 的开发。</p><ol><li>File -&gt; Settings 打开设置</li><li>选择 Keymap</li><li>在下拉框中选择 Eclipse 或其他你更熟悉的快捷键方案</li><li>点击 Apply 进行应用</li></ol><p><img src="https://i.loli.net/2019/01/25/5c4a750cef4d1.png" alt="android-studio-config-setp-19.png"></p><p>虽然可以选择其他快捷键方案，但是建议使用 Android Studio 默认的快捷键方案，这才是最适合它的。</p><p>同时在这里你也可以对任一快捷键做修改，设置为你更习惯的快捷键，对此不再赘述。</p><h3 id="2-7-动态模板-Live-Templates"><a href="#2-7-动态模板-Live-Templates" class="headerlink" title="2.7 动态模板 - Live Templates"></a>2.7 动态模板 - Live Templates</h3><p><strong>Live Templates</strong> 是动态模板、活动模板或代码模板，它的作用是：</p><ul><li>代码快速补全</li><li>提高写代码的速度</li></ul><p>系统中有很多自带的模板，我们可以使用这些模板来快速生成所需要的代码。比如：</p><p><img src="https://i.loli.net/2019/01/25/5c4a79c6e2e97.png" alt="android-studio-config-setp-22.png"></p><p>如上图所示，输入 <strong>sout</strong> 就会出现提示，对应生成的代码就是 <strong>System.out.println(“”)</strong> 。</p><p><img src="https://i.loli.net/2019/01/25/5c4a79c6e4937.png" alt="android-studio-config-setp-23.png"></p><p>我们在打 Log 时经常需要定义 <strong>TAG</strong> 私有静态常量用以标记位置，使用 <strong>logt</strong> 则可以快速生成 <strong>private static final String TAG = “ClassName”</strong> 。</p><p>在 Android Studio 中还有很多很多好用的动态模板，在此就不一一介绍了，感兴趣的小伙伴可以自行去查看。</p><p>在系统提供了众多的动态模板后，有一些我们常用的代码也可以将其定义为动态模板，提高我们的工作效率。其中 Handler 是 Android 中非常常用的组件，但是使用不当则会造成内存泄漏，下面就以创建一个通过弱引用的方式解决 Handler 的内存泄漏问题并将其自定义为动态模板，方便我们的日常使用。</p><ol><li>File -&gt; Settings 打开设置</li><li>选择 Editor -&gt; Live Templates</li><li>点击右侧 <strong>+</strong> 按钮，选择 <strong>2. Template Group…</strong> 创建一个新的模板组</li><li>假设新的模板组取名为：Custom，输入名称完成创建</li><li>选中新建的 Custom 模板组，点击右侧的 <strong>+</strong> 按钮，选择 <strong>1. Live Template</strong> 创建一个新的动态模板</li><li>输入此动态模板的各项参数。</li><li>点击 Apply 进行应用并测试是否生效</li></ol><p><img src="https://i.loli.net/2019/01/25/5c4a79e058fb3.png" alt="android-studio-config-setp-20.png"></p><p>点击右侧 <strong>+</strong> 按钮，选择 <strong>2. Template Group…</strong> 创建一个新的模板组，名为：Custom.</p><p><img src="https://i.loli.net/2019/01/25/5c4a79e058650.png" alt="android-studio-config-setp-21.png"></p><p>选中新建的 Custom 模板组，点击右侧的 <strong>+</strong> 按钮，选择 <strong>1. Live Template</strong> 创建一个新的动态模板</p><p><img src="https://i.loli.net/2019/01/25/5c4a8362a2c26.png" alt="android-studio-config-setp-24.png"></p><p>设置动态模板的缩写 <strong>Abbreviation</strong> ，描述 <strong>Description</strong>， 以及模板内的代码内容 <strong>Template test</strong>，此处按照如下配置即可。</p><ul><li>Abbreviation：handler</li><li>Description: Self-defined Handler without Memory Leakage.</li><li>Template test: 见下方代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WeakReference&lt;$ClassName$&gt; mActivityWeakReference;</span><br><span class="line"></span><br><span class="line">    MyHandler($ClassName$ activity) &#123;</span><br><span class="line">        mActivityWeakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">        $ClassName$ activity = mActivityWeakReference.get();</span><br><span class="line">        <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/01/25/5c4a82286cc5a.png" alt="android-studio-config-setp-25.png"></p><p>如上图所示点击下方的 <strong>Define</strong> 并勾选 <strong>Java</strong>，以设置此代码的语言。</p><p><img src="https://i.loli.net/2019/01/25/5c4a84cce2a00.png" alt="android-studio-config-setp-26.png"></p><p>如上图所示，在代码块中，有 <strong>$ClassName$</strong> 参数，此参数对应的是 Handler 所在的 Activity 的类名。为了适配所有的类，所以可以使用绑定参数的方式在自动生成代码时，将 <strong>$ClassName$</strong> 参数替换成其所在类的类名。</p><p>点击 <strong>Edit variables</strong> 按钮，在弹出框中，点击 <strong>Expression</strong> ，在下拉列表中找到并选择 <strong>className()</strong> 即可。点击 <strong>OK</strong> 完成配置。</p><p>参数含义：</p><table><thead><tr><th>Name</th><th>Expression</th><th>Default value</th><th>Skip if defined</th></tr></thead><tbody><tr><td>名称</td><td>表达式</td><td>默认值</td><td>是否略过定义</td></tr><tr><td>ClassName</td><td>className()</td><td></td><td></td></tr></tbody></table><p>配置完动态模板后，我们来新建一个 TestActivity 测试一下。</p><p><img src="https://i.loli.net/2019/01/25/5c4a8748ab822.png" alt="android-studio-config-setp-27.png"></p><p>如上图所示，只要输入 <strong>handler</strong> 就会出现动态模板，选择之后就会自动生成下方的代码，再也不用一次又一次的重复敲代码了。</p><h2 id="其他章节"><a href="#其他章节" class="headerlink" title="其他章节"></a>其他章节</h2><ul><li><a href="http://jemgeek.com/archives/2019/android-studio-installation.html">Android Studio 超详细安装教程</a></li><li><a href="http://jemgeek.com/archives/2019/android-studio-quality-plugins.html">Android Studio 中那些最好用的插件</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/01/24/5c49c4d7bc787.jpeg&quot; alt=&quot;Android-Studio-3.0-logo.jpeg&quot;&gt;&lt;/p&gt;&lt;p&gt;在上一文：&lt;a href=&quot;http://jemgeek.com/archives/2019/android-studio-installation.html&quot;&gt;Android Studio 超详细安装教程&lt;/a&gt; 中，我们已经成功的安装了 Android Studio 开发工具，并进行了第一次启动前的初步设置。然而这点设置是远远不够的，为了让我们的开发工具能够使用得更加得心应手，还需要更多的设置。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jemgeek.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jemgeek.com/tags/Android/"/>
    
      <category term="Android Studio" scheme="http://jemgeek.com/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 超详细安装教程</title>
    <link href="http://jemgeek.com/archives/2018/android-studio-installation.html"/>
    <id>http://jemgeek.com/archives/2018/android-studio-installation.html</id>
    <published>2018-01-24T13:55:00.000Z</published>
    <updated>2020-04-12T06:21:07.917Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/01/24/5c49c4d7bc787.jpeg" alt="Android-Studio-3.0-logo.jpeg"></p><p>作为 Android 开发者，Android Studio 是我们必不可少的开发工具之一，甚至是最重要的开发工具。那么了解 Android Studio 并熟悉其各种配置是居家旅行并不可少的技能之一了。</p><p>本文将详细介绍 Android Studio 的下载安装，以及一些必要的设置。</p><a id="more"></a><h2 id="一、安装环境及下载资源"><a href="#一、安装环境及下载资源" class="headerlink" title="一、安装环境及下载资源"></a>一、安装环境及下载资源</h2><h3 id="1-1-安装环境"><a href="#1-1-安装环境" class="headerlink" title="1.1 安装环境"></a>1.1 安装环境</h3><ul><li>电脑系统 : Windows 10</li><li>JDK 版本 : 1.8</li><li>Android Studio : 3.0</li></ul><blockquote><p>注：安装环境一般来说不影响 Android Studio 的安装。</p></blockquote><h3 id="1-2-下载资源"><a href="#1-2-下载资源" class="headerlink" title="1.2 下载资源"></a>1.2 下载资源</h3><ul><li><a href="https://developer.android.com/studio/?hl=zh-cn" target="_blank" rel="noopener">官方下载地址(需翻墙)</a></li><li><a href="http://www.android-studio.org/" target="_blank" rel="noopener">国内Android Studio下载地址(不需翻墙)</a></li></ul><p>官方下载地址是需要翻墙才可以进入并且下载的，国内下载地址虽然可以不用翻墙，但是国内的往往不是最新版本的Android Studio ，如果需要体验最新版本的 Android Studio 还请前往官方下载地址进行下载安装。</p><h2 id="二、安装-Android-Studio"><a href="#二、安装-Android-Studio" class="headerlink" title="二、安装 Android Studio"></a>二、安装 Android Studio</h2><h3 id="2-1-安装-Android-Studio"><a href="#2-1-安装-Android-Studio" class="headerlink" title="2.1 安装 Android Studio"></a>2.1 安装 Android Studio</h3><p>下载完了 Android Studio 的安装包之后，双击打开进行安装。</p><p><img src="https://i.loli.net/2019/01/24/5c49cf387294c.png" alt="android-studio-install-setp-1.png"></p><p>点击 <strong>Next</strong> 进行下一步。</p><p><img src="https://i.loli.net/2019/01/24/5c49cf38743d0.png" alt="android-studio-install-setp-2.png"></p><p>勾选 <strong>Android Virtual Device</strong> 选项，然后点击 <strong>Next</strong> 进行下一步。</p><p><img src="https://i.loli.net/2019/01/24/5c49cf386d4a1.png" alt="android-studio-install-setp-3.png"></p><p>选择 Android Studio 安装的本地路径，个人建议不要安装在C盘。</p><p><img src="https://i.loli.net/2019/01/24/5c49cf3870c34.png" alt="android-studio-install-setp-4.png"></p><p>前面的安装设置完成之后，直接点击 <strong>Install</strong> 进行安装即可，然后就是等待安装完成了。</p><p><img src="https://i.loli.net/2019/01/24/5c49d0f92fd85.png" alt="android-studio-install-setp-5.png"></p><p><img src="https://i.loli.net/2019/01/24/5c49d0f941577.png" alt="android-studio-install-setp-6.png"></p><p>安装完后之后点击 <strong>Finish</strong> 将会启动 Android Studio，此时将会进行一些第一次启动前的初步设置。</p><h3 id="2-2-初步设置"><a href="#2-2-初步设置" class="headerlink" title="2.2 初步设置"></a>2.2 初步设置</h3><p>第一次启动 Android Studio 将会进行一些初步的设置。</p><p><img src="https://i.loli.net/2019/01/24/5c49d1a7d56e4.png" alt="android-studio-config-setp-1.png"></p><p>现在的 Android Studio 安装包仅包含其本身，并不包含 <strong>Android SDK</strong>， 所以在第一次启动时告诉你无法访问 Android SDK 加载项列表，此时点击 <strong>Cancel</strong> 退出即可，后面会下载 SDK 的。</p><p><img src="https://i.loli.net/2019/01/24/5c49d1a7e2126.png" alt="android-studio-config-setp-2.png"></p><p>点击 <strong>Next</strong> 进行下一步。</p><p><img src="https://i.loli.net/2019/01/24/5c49d1a7f316c.png" alt="android-studio-config-setp-3.png"></p><p>这里是选择 Android Studio 的设置类型，<strong>Standard</strong> 为标准模式，想省事的可以选择这个选项，会跳过后续的一些设置步骤。这里我们习惯性选择 <strong>Custom</strong> 自定义模式。</p><p><img src="https://i.loli.net/2019/01/24/5c49d1a809a80.png" alt="android-studio-config-setp-4.png"></p><p>这里是选择软件的界面主题，一种偏暗的 <strong>Darcula</strong>,和一种偏亮的 <strong>Intellij</strong>，按照自己的习惯选择就好，个人比较喜欢 <strong>Darcula</strong> 主题。</p><p><img src="https://i.loli.net/2019/01/24/5c49d1a8131f9.png" alt="android-studio-config-setp-5.png"></p><p>这里是进行 SDK 组件设置，因为我已经安装了 <strong>Android SDK</strong> 和 <strong>Android Virtual Device</strong> 所以这里已经不需要再进行安装了。如果你没有安装的话，在左侧选项中勾选你需要安装的项目，建议全部勾选。同时在下面的 <strong>Android SDK Location</strong> 中设置 <strong>Android SDK</strong> 的本地路径。设置完毕后点击 <strong>Next</strong> 进行安装。</p><p><img src="https://i.loli.net/2019/01/24/5c49d1a800acc.png" alt="android-studio-config-setp-6.png"></p><p>这里是对你之前的选择，进行确认的，如果需要修改设置的话，点击 <strong>Previous</strong> 返回上一条进行修改。如果确认如此设置的话，点击 <strong>Finish</strong> 进行设置，等待完成即可。</p><p><img src="https://i.loli.net/2019/01/24/5c49d1a802769.png" alt="android-studio-config-setp-7.png"></p><p>因为我已经提前安装完了 <strong>Android SDK</strong> 所以这里显示 “Nothing to do!”， 如果你并没有安装过 Android SDK的话，此时将会下载 Android SDK 相应的资源。下载完成后点击 <strong>Finish</strong> 完成。</p><p><img src="https://i.loli.net/2019/01/24/5c49d575aecb2.png" alt="android-studio-complete.png"></p><p>到此已经完成了 Android Studio 的下载安装及初步设置。我们可以愉快的使用 Android Studio 进行 Android 开发了。</p><h2 id="后续章节"><a href="#后续章节" class="headerlink" title="后续章节"></a>后续章节</h2><p>安装完 Android Studio ，必不可少的要做一些设置，添加一些好用的插件，让我们的开发工具更加好用，更加得心应手，详情请见以下后续章节。</p><ul><li><a href="http://jemgeek.com/archives/2019/android-studio-necessary-config.html">Android Studio 安装后必做的配置</a></li><li><a href="http://jemgeek.com/archives/2019/android-studio-quality-plugins.html">Android Studio 中那些最好用的插件</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/01/24/5c49c4d7bc787.jpeg&quot; alt=&quot;Android-Studio-3.0-logo.jpeg&quot;&gt;&lt;/p&gt;&lt;p&gt;作为 Android 开发者，Android Studio 是我们必不可少的开发工具之一，甚至是最重要的开发工具。那么了解 Android Studio 并熟悉其各种配置是居家旅行并不可少的技能之一了。&lt;/p&gt;&lt;p&gt;本文将详细介绍 Android Studio 的下载安装，以及一些必要的设置。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jemgeek.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jemgeek.com/tags/Android/"/>
    
      <category term="Android Studio" scheme="http://jemgeek.com/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>python实现密码字典生成器</title>
    <link href="http://jemgeek.com/archives/2017/password-dict-generate.html"/>
    <id>http://jemgeek.com/archives/2017/password-dict-generate.html</id>
    <published>2017-06-22T08:15:33.000Z</published>
    <updated>2019-01-15T11:29:42.475Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2017/06/22/594b7ebaa85fd.png" alt="python.png"></p><p>人生苦短，我用Python!</p><p>Python是一门非常简洁、强大的编程语言，可以用来解决生活工作中的很多问题。现在Python也越来越受欢迎。在本篇博客中将聊一聊如何使用Python生成密码字典。</p><a id="more"></a><h2 id="前提要求"><a href="#前提要求" class="headerlink" title="前提要求"></a>前提要求</h2><ol><li>Python 3.6 （对于python2.7应该同样有效，未测试）</li><li>PyCharm编辑器或者任一编辑器（vi、sublime均可）</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>先上完整代码，后面再一一解析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@ author: Kylin</span></span><br><span class="line"><span class="string">@ function: 密码字典生成器</span></span><br><span class="line"><span class="string">@ date: 2017/6/22</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> itertools <span class="keyword">as</span> itr</span><br><span class="line"></span><br><span class="line">words = <span class="string">"abcdefghijklmnopqrstuvwxyz1234567890"</span></span><br><span class="line">dict_file = <span class="string">"dict.txt"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DictorGenerate</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, minLength, maxLength)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> maxLength &gt; minLength:</span><br><span class="line">            self.minLength = minLength</span><br><span class="line">            self.maxLength = maxLength</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.minLength = maxLength</span><br><span class="line">            self.maxLength = minLength</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 如果文件存在则删除</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(dict_file):</span><br><span class="line">            os.remove(dict_file)</span><br><span class="line"></span><br><span class="line">        dic = open(dict_file, <span class="string">"a"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.minLength, self.maxLength + <span class="number">1</span>):</span><br><span class="line">            r = itr.product(words, repeat=i)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> r:</span><br><span class="line">                dic.write(<span class="string">"%s\n"</span> % <span class="string">""</span>.join(i))</span><br><span class="line"></span><br><span class="line">        dic.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"开始生成密码字典......"</span>)</span><br><span class="line">    param_len = len(sys.argv[<span class="number">1</span>:])</span><br><span class="line">    param = str(sys.argv[<span class="number">1</span>:])</span><br><span class="line">    param = param.replace(<span class="string">"'"</span>, <span class="string">""</span>).replace(<span class="string">"["</span>, <span class="string">""</span>).replace(<span class="string">"]"</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    params = param.split(<span class="string">","</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> param_len == <span class="number">2</span>:</span><br><span class="line">            min = int(params[<span class="number">0</span>])</span><br><span class="line">            max = int(params[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">elif</span> param_len == <span class="number">0</span>:</span><br><span class="line">            min = <span class="number">3</span></span><br><span class="line">            max = <span class="number">4</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"\nError:\n\n    仅能输入两个数字,例如:\n\n    python DictGenerate.py 3 6"</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"\nError:\n\n    参数只能输入数字,例如:\n\n    python DictGenerate.py 3 6"</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    dg = DictorGenerate(min, max)</span><br><span class="line">    dg.generate()</span><br><span class="line">    print(<span class="string">"生成密码字典成功......"</span>)</span><br></pre></td></tr></table></figure><p>参数<code>words</code>是你生成密码所需要的字符，我这里因为个人需要所以并不完整，没有加入大写字母以及特殊字符，你可以根据自己的需要去添加。</p><p>参数<code>dict_file</code>是最终生成出来的密码字典文件。</p><p>类<code>DictorGenerate()</code>的作用就是生成字典了。先来分析这个类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, minLength, maxLength)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> maxLength &gt; minLength:</span><br><span class="line">        self.minLength = minLength</span><br><span class="line">        self.maxLength = maxLength</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.minLength = maxLength</span><br><span class="line">        self.maxLength = minLength</span><br></pre></td></tr></table></figure><p><code>__init__</code>方法是初始化方法，传入两个参数，分别是<code>minLength(最小长度)</code>和<code>maxLength(最大长度)</code>，在这里初始化生成的密码的长度范围。</p><h2 id="生成密码字典"><a href="#生成密码字典" class="headerlink" title="生成密码字典"></a>生成密码字典</h2><p>主要的密码生成函数是<code>generate(self)</code>,主要是使用了<code>itertools.product()</code>函数</p><h2 id="源代码下载"><a href="#源代码下载" class="headerlink" title="源代码下载"></a>源代码下载</h2><p><a href="https://gist.github.com/71a733df831f0f955d87114f8996ef2a" target="_blank" rel="noopener">源代码下载：DictGenerate.py</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/22/594b7ebaa85fd.png&quot; alt=&quot;python.png&quot;&gt;&lt;/p&gt;&lt;p&gt;人生苦短，我用Python!&lt;/p&gt;&lt;p&gt;Python是一门非常简洁、强大的编程语言，可以用来解决生活工作中的很多问题。现在Python也越来越受欢迎。在本篇博客中将聊一聊如何使用Python生成密码字典。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://jemgeek.com/categories/python/"/>
    
    
      <category term="python" scheme="http://jemgeek.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot系列之Log4j2的配置使用</title>
    <link href="http://jemgeek.com/archives/2017/spring-boot-log4j2-config.html"/>
    <id>http://jemgeek.com/archives/2017/spring-boot-log4j2-config.html</id>
    <published>2017-05-11T06:27:23.000Z</published>
    <updated>2019-04-01T14:54:12.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot系列之Log4j2的配置使用"><a href="#Spring-Boot系列之Log4j2的配置使用" class="headerlink" title="Spring Boot系列之Log4j2的配置使用"></a>Spring Boot系列之Log4j2的配置使用</h1><p>后台程序开发及上线时，一般都会用到Log信息打印及Log日志记录，开发时通过Log信息打印可以快速的定位问题所在，帮助我们快捷开发。程序上线后如遇到Bug或错误，此时则需要日志记录来查找发现问题所在。</p><p>Spring Boot 可以集成很多不同的日志系统，其中最常用的Apache Log4j，而Log4j 2是Log4j的升级版本，Log4j 2相对于Log4j 1.x 有了很多显著的改善。所以这篇博客就直接来说说Spring Boot如何集成并配置使用Log4j2。</p><a id="more"></a><h2 id="1-导入Log4j2的包"><a href="#1-导入Log4j2的包" class="headerlink" title="1. 导入Log4j2的包"></a>1. 导入Log4j2的包</h2><p>如果你使用Gradle，则在<code>build.gradle</code>文件中添加以下依赖。示例代码中使用的是Gradle方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    // log4j2</span><br><span class="line">    implementation &quot;org.apache.logging.log4j:log4j-api:2.8&quot;</span><br><span class="line">    implementation &quot;org.apache.logging.log4j:log4j-core:2.8&quot;</span><br><span class="line">    // 用来支持Logger中的Async</span><br><span class="line">    implementation &apos;com.lmax:disruptor:3.3.6&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你使用Maven，则在<code>pom.xml</code>文件中添加以下依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lmax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>disruptor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-添加-log4j2-配置文件"><a href="#2-添加-log4j2-配置文件" class="headerlink" title="2. 添加 log4j2 配置文件"></a>2. 添加 log4j2 配置文件</h2><p>在项目的resources资源文件根目录下创建<code>log4j2.xml</code>文件并复制以下代码到文件中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，</span></span><br><span class="line"><span class="comment"> 你会看到log4j2内部各种详细输出。可以设置成OFF(关闭)或Error(只输出错误信息)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">"OFF"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件目录和压缩文件目录配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"fileName"</span>&gt;</span>/home/James/log/spring_log<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"fileGz"</span>&gt;</span>/home/James/log/spring_log/7z<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 输出控制台日志的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 输出日志的格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">"infoFile"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;fileName&#125;/web-info.log"</span> <span class="attr">immediateFlush</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">filePattern</span>=<span class="string">"$&#123;fileGz&#125;/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.web-info.gz"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;yyyy-MM-dd 'at' HH:mm:ss z&#125; [%t] %-5level %logger&#123;36&#125; %L %M - %msg%xEx%n"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">"6"</span> <span class="attr">modulate</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"50 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 只记录info和warn级别信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"error"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 存储所有error信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">"errorFile"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;fileName&#125;/web-error.log"</span> <span class="attr">immediateFlush</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">filePattern</span>=<span class="string">"$&#123;fileGz&#125;/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.web-error.gz"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;yyyy-MM-dd 'at' HH:mm:ss z&#125; [%t] %-5level %logger&#123;36&#125; %L %M - %msg%xEx%n"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">"6"</span> <span class="attr">modulate</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"50 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 只记录error级别信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"error"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 全局配置，默认所有的Logger都继承此配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- AsyncRoot - 异步记录日志 - 需要LMAX Disruptor的支持 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AsyncRoot</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"infoFile"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"errorFile"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">AsyncRoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-编写Log4j2辅助类"><a href="#3-编写Log4j2辅助类" class="headerlink" title="3. 编写Log4j2辅助类"></a>3. 编写Log4j2辅助类</h2><p>做好以上的配置之后，我们可以编写一个辅助类，让我们更方便的使用Log4j2来记录日志。</p><p>在utils包中创建<code>L.java</code>类文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Logger 日志记录辅助类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by James on 2017/5/11.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">L</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LogManager.getLogger();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">L</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* cannot be instantiated */</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"cannot be instantiated"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Logger <span class="title">getLogger</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LOGGER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">t</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        LOGGER.trace(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        LOGGER.debug(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        LOGGER.warn(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        LOGGER.error(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        LOGGER.fatal(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写完辅助类，使用起来就很简单了，通过下面的代码就可以轻松使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String msg = <span class="string">"Spring Boot系列之Log4j2的配置及使用"</span>;</span><br><span class="line">        L.t(msg); <span class="comment">// Log4j2.xml中配置的level="info",所以此条信息并不会打印在控制台</span></span><br><span class="line">        L.d(msg); <span class="comment">// 同上，级别：TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</span></span><br><span class="line">        L.i(msg);</span><br><span class="line">        L.w(msg);</span><br><span class="line">        L.e(msg);</span><br><span class="line">        L.f(msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的辅助类只是写了一些基本的使用方法，你可以根据你的需求进行定制，增加更多的辅助方法。对于辅助类中没有提供的方法也可以使用<code>L.getLogger()</code>方法获取Logger实例来使用。</p><h2 id="4-结果验证"><a href="#4-结果验证" class="headerlink" title="4. 结果验证"></a>4. 结果验证</h2><p>日志的Level分级：TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL。</p><p>因为我的log4j2中的level设置的是<code>INFO</code>级别。所以打印信息中只能看到 <code>INFO</code> 、<code>WARN</code> 、 <code>ERROR</code> 三种级别(FATAL级别的信息没有打印，否则也可以看到)。</p><p>打印信息如下图所示：</p><p><img src="https://ooo.0o0.ooo/2017/05/11/59141c76b8b07.png" alt="Log Info"></p><p>同时在电脑系统中生成了Log文件，如下图所示：</p><p><img src="https://i.loli.net/2019/04/01/5ca223a39fdc0.png" alt="Log File"></p><p>观察路径可以发现，这个路径正是在<code>Log4j2.xml</code>中设置的路径：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 日志文件目录和压缩文件目录配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"fileName"</span>&gt;</span>/home/James/log/spring_log<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"fileGz"</span>&gt;</span>/home/James/log/spring_log/7z<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-更多"><a href="#5-更多" class="headerlink" title="5. 更多"></a>5. 更多</h2><p>Log4j2的Github地址：<a href="https://github.com/apache/logging-log4j2" target="_blank" rel="noopener">https://github.com/apache/logging-log4j2</a></p><p>本教程的示例代码地址：<a href="https://github.com/JemGeek/spring-boot-sample/tree/master/spring-boot-log4j2" target="_blank" rel="noopener">https://github.com/JemGeek/spring-boot-sample/tree/master/spring-boot-log4j2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Boot系列之Log4j2的配置使用&quot;&gt;&lt;a href=&quot;#Spring-Boot系列之Log4j2的配置使用&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot系列之Log4j2的配置使用&quot;&gt;&lt;/a&gt;Spring Boot系列之Log4j2的配置使用&lt;/h1&gt;&lt;p&gt;后台程序开发及上线时，一般都会用到Log信息打印及Log日志记录，开发时通过Log信息打印可以快速的定位问题所在，帮助我们快捷开发。程序上线后如遇到Bug或错误，此时则需要日志记录来查找发现问题所在。&lt;/p&gt;&lt;p&gt;Spring Boot 可以集成很多不同的日志系统，其中最常用的Apache Log4j，而Log4j 2是Log4j的升级版本，Log4j 2相对于Log4j 1.x 有了很多显著的改善。所以这篇博客就直接来说说Spring Boot如何集成并配置使用Log4j2。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://jemgeek.com/categories/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://jemgeek.com/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://jemgeek.com/tags/Spring-Boot/"/>
    
      <category term="Spring" scheme="http://jemgeek.com/tags/Spring/"/>
    
      <category term="log4j" scheme="http://jemgeek.com/tags/log4j/"/>
    
  </entry>
  
  <entry>
    <title>JQuery实现定时刷新</title>
    <link href="http://jemgeek.com/archives/2017/web-jquery-timed-refresh.html"/>
    <id>http://jemgeek.com/archives/2017/web-jquery-timed-refresh.html</id>
    <published>2017-05-09T03:27:23.000Z</published>
    <updated>2019-02-23T10:15:11.754Z</updated>
    
    <content type="html"><![CDATA[<p>在网页开发中，经常会需要不断的刷新某个页面或某个局部数据。这时候就需要用到定时刷新来实现了。实现方式就是使用JS setInterval函数每隔一段时间请求一次数据，然后将请求结果返回给前端HTML实现刷新。</p><a id="more"></a><p>实现代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        getData();</span><br><span class="line">        setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            getData();</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.getJSON(<span class="string">"/blood/pressure/1"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">200</span> == data.code) &#123;</span><br><span class="line">                $(<span class="string">"#systolic"</span>).text(data.data.systolic);</span><br><span class="line">                $(<span class="string">"#diastolic"</span>).text(data.data.diastolic);</span><br><span class="line">                $(<span class="string">"#pulse"</span>).text(data.data.pulse);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>代码解释：</p><h2 id="1-导入jquery"><a href="#1-导入jquery" class="headerlink" title="1. 导入jquery"></a>1. 导入jquery</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>使用上面的语句导入JQuery库，下面的代码需要JQuery库的支持。</p><h2 id="2-页面加载完启动程序"><a href="#2-页面加载完启动程序" class="headerlink" title="2. 页面加载完启动程序"></a>2. 页面加载完启动程序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    getData(); <span class="comment">// 第一次加载数据</span></span><br><span class="line">    <span class="comment">// 开启定时任务，时间间隔为3000 ms。</span></span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        getData();</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>一般定时任务需要在页面加载完成之后就启动。页面加载完成有两种事件，一是ready，表示文档结构已经加载完成（不包含图片等非文字媒体文件），二是onload，指示页 面包含图片等文件在内的所有元素都加载完成(可以说：ready 在onload 前触发)。</p><p>建议在ready时就执行定时任务，使用下面的代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do sometion</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的代码等价于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="comment">//do something  </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="3-获取数据并刷新页面"><a href="#3-获取数据并刷新页面" class="headerlink" title="3. 获取数据并刷新页面"></a>3. 获取数据并刷新页面</h2><p>使用下面的代码获取数据并设置页面相应的值。从而刷新页面数据。这个步骤根据自己的需求写相应的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.getJSON(<span class="string">"/blood/pressure/1"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">200</span> == data.code) &#123;</span><br><span class="line">            $(<span class="string">"#systolic"</span>).text(data.data.systolic);</span><br><span class="line">            $(<span class="string">"#diastolic"</span>).text(data.data.diastolic);</span><br><span class="line">            $(<span class="string">"#pulse"</span>).text(data.data.pulse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在网页开发中，经常会需要不断的刷新某个页面或某个局部数据。这时候就需要用到定时刷新来实现了。实现方式就是使用JS setInterval函数每隔一段时间请求一次数据，然后将请求结果返回给前端HTML实现刷新。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://jemgeek.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://jemgeek.com/tags/Web/"/>
    
      <category term="JQuery" scheme="http://jemgeek.com/tags/JQuery/"/>
    
      <category term="Ajax" scheme="http://jemgeek.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Bluetooth系列之Bluetooth基础</title>
    <link href="http://jemgeek.com/archives/2017/android-ble-base.html"/>
    <id>http://jemgeek.com/archives/2017/android-ble-base.html</id>
    <published>2017-04-01T08:19:00.000Z</published>
    <updated>2019-01-15T11:29:42.467Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2017/04/01/58df6378ab39a.png" alt="Bluetooth.png"></p><p>博主刚换了工作，目前从事物联网方面的Android开发，第一个项目研发的内容就跟蓝牙（Bluetooth）有关，主要是针对蓝牙4.0，又被称作低功耗蓝牙（Bluetooth Low Energy）做研发。不得不说，这方面的资料真的很少，博主在开发过程中遇到了各种各样的问题，也花费了很多的精力去解决。所以打算将其作为一个系列去写，将研发中的技术和遇到的问题以及解决的方案记录下来。</p><a id="more"></a><h2 id="一、-蓝牙简介"><a href="#一、-蓝牙简介" class="headerlink" title="一、 蓝牙简介"></a>一、 蓝牙简介</h2><p>说到蓝牙，大家肯定不会陌生，蓝牙的版本历史从99年发布的1.0版本，到后来07年发布的2.1版本（所谓的经典蓝牙），也是大部分产品使用的版本。再到所谓的高速蓝牙，也就是蓝牙3.0，最高速度可达24Mbps，是2.0速度的8倍。然后就是今天的主题，蓝牙4.0了，蓝牙4.0是Bluetooth SIG（蓝牙技术联盟）与10年7月7日推出的新的规范。其最重要的特性是支持省电。所以我们也称之为低功耗蓝牙。</p><p>科技的发展迅猛无比，时至今日，蓝牙已经于2016年6月推出蓝牙5，其有效传输距离将是4.0低功耗蓝牙的4倍（理论上可达300米），传输速度将是4.2低功耗版本的2倍（速度上限为24Mbps）。同时针对物联网进行了很多底层优化。</p><blockquote><p>Bluetooth History:<br>v1.0 -&gt; v2.0 -&gt; v2.1 -&gt; v3.0 -&gt; v4.0 -&gt; v4.1 -&gt; v4.2 -&gt; v5.0</p></blockquote><h2 id="二、-Bluetooth-Low-Energy"><a href="#二、-Bluetooth-Low-Energy" class="headerlink" title="二、 Bluetooth Low Energy"></a>二、 Bluetooth Low Energy</h2><p>低功耗蓝牙，全称Bluetooth Low Energy，简称BLE。<a href="https://developer.android.com/guide/topics/connectivity/bluetooth-le.html" target="_blank" rel="noopener">Android官方网站</a>中针对BLE的开发有相关的开发文档，开发者们可查阅相关内容。</p><h3 id="1-关键名词及解释"><a href="#1-关键名词及解释" class="headerlink" title="1. 关键名词及解释"></a>1. 关键名词及解释</h3><ul><li><strong>Attribute Protocol (ATT)</strong> - ATT全称叫做属性协议，它是BLE通信的基础。ATT把数据进行封装，向外暴露为“属性”。ATT是专门为BLE设计的，结构简单，数据长度很短。每一个属性都通过Universally Unique Identifier (UUID)进行唯一标识，UUID是128位的值。</li><li><strong>Generic Attribute Profile (GATT)</strong> - GATT全称叫做通用属性配置文件，GATT是构建于ATT之上。以ATT为基础，对ATT进行进一步的封装，定义数据的交互方式及含义。也是我们做开发时直接接触的东西。</li><li><strong>Service</strong> - 一个Service里面包含了多个Characteristic。</li><li><strong>Characteristic</strong> - 一个Characteristic里面包含了一个单一的数值和多个用来描述Characteristic的descriptor。Characteristic的操作有几种权限：读、写和通知。</li><li><strong>Descriptor</strong> - Descriptor被定义为描述Characteristic数值的属性。</li></ul><blockquote><p>未完待续…</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/04/01/58df6378ab39a.png&quot; alt=&quot;Bluetooth.png&quot;&gt;&lt;/p&gt;&lt;p&gt;博主刚换了工作，目前从事物联网方面的Android开发，第一个项目研发的内容就跟蓝牙（Bluetooth）有关，主要是针对蓝牙4.0，又被称作低功耗蓝牙（Bluetooth Low Energy）做研发。不得不说，这方面的资料真的很少，博主在开发过程中遇到了各种各样的问题，也花费了很多的精力去解决。所以打算将其作为一个系列去写，将研发中的技术和遇到的问题以及解决的方案记录下来。&lt;/p&gt;
    
    </summary>
    
      <category term="Bluetooth" scheme="http://jemgeek.com/categories/Bluetooth/"/>
    
    
      <category term="Android" scheme="http://jemgeek.com/tags/Android/"/>
    
      <category term="项目实践" scheme="http://jemgeek.com/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="Bluetooth" scheme="http://jemgeek.com/tags/Bluetooth/"/>
    
  </entry>
  
  <entry>
    <title>Android实践系列之Activity管理器</title>
    <link href="http://jemgeek.com/archives/2016/android-activity-manager.html"/>
    <id>http://jemgeek.com/archives/2016/android-activity-manager.html</id>
    <published>2016-07-14T08:28:47.000Z</published>
    <updated>2019-02-23T10:12:32.819Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章：<a href="https://jemgeek.com/archives/2016/android-base-config.html">Android实践系列之项目基础配置</a></p><p>在进行Android开发的时候，我们需要对Activity进行各种操作，各种跳转。如果不对这些Activity进行有效的管理，将会出现各种我们不希望看见的结果。此时我们需要一个Activity管理器帮助我们有效的管理Activity。</p><a id="more"></a><h2 id="1-创建Activity管理器"><a href="#1-创建Activity管理器" class="headerlink" title="1. 创建Activity管理器"></a>1. 创建Activity管理器</h2><p>创建一个MyActivityManager类对Activity进行管理。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Activity管理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by Kylin on 2016-07-14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivityManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Activity&gt; activityList = <span class="keyword">new</span> ArrayList&lt;Activity&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyActivityManager instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyActivityManager <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> MyActivityManager();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加 Activity 到列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addActivity</span><span class="params">(Activity activity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(activityList == <span class="keyword">null</span>)&#123;</span><br><span class="line">            activityList = <span class="keyword">new</span> ArrayList&lt;Activity&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        activityList.add(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取界面数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> activity size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getActivitySize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(activityList != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> activityList.size();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前 Activity - 堆栈中最后一个压入的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> current Activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Activity <span class="title">getCurrentActivity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(activityList != <span class="keyword">null</span> &amp;&amp; activityList.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            Activity activity = activityList.get(activityList.size()-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> activity;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定类名的 Activity</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls 指定的类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Activity <span class="title">getActivity</span><span class="params">(Class&lt;?&gt; cls)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(activityList == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Activity activity : activityList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(activity.getClass().equals(cls))&#123;</span><br><span class="line">                <span class="keyword">return</span> activity;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束指定的 Activity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity Activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeActivity</span><span class="params">(Activity activity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(activity != <span class="keyword">null</span>)&#123;</span><br><span class="line">            activityList.remove(activity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束指定类名的 Activity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls 指定的类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeActivity</span><span class="params">(Class&lt;?&gt; cls)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(activityList == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Activity activity : activityList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(activity.getClass().equals(cls))&#123;</span><br><span class="line">                activityList.remove(activity);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束所有Activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">finishAllActivity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(activityList == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> size = activityList.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != activityList.get(i))&#123;</span><br><span class="line">                activityList.get(i).finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        activityList.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束其他所有的Activity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity 不需要销毁的Activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">finishOtherAllActivity</span><span class="params">(Activity activity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(activityList == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = activityList.size(); i &lt; size; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (activity != activityList.get(i))&#123;</span><br><span class="line">                activityList.get(i).finish();</span><br><span class="line">                activityList.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-创建BaseActivity"><a href="#2-创建BaseActivity" class="headerlink" title="2. 创建BaseActivity"></a>2. 创建BaseActivity</h2><p>现在有了Activity管理器，但是我不想再每个界面都需要把Activity添加到列表中，在每次销毁的时候再将其移除，太麻烦了。那么现在我们来写一个BaseActivity，把操作放在这里。这样让所有的Activity继承BaseActivity就可以了。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BaseActivity</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by Kylin on 2016-07-14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        MyActivityManager.addActivity(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        MyActivityManager.removeActivity(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样只需要每个Activity继承这个BaseActivity就可以了。在Activity onCreate()的时候将Activity添加到全局的列表中。在onDestroy()的时候将其移除就可以了。</p><h2 id="3-优雅的退出程序"><a href="#3-优雅的退出程序" class="headerlink" title="3. 优雅的退出程序"></a>3. 优雅的退出程序</h2><p>在主界面以及登录界面，有时按返回键是需要退出应用的，这时我们可以使用MyActivityManager里面的finishAllActivity()方法销毁所有界面，退出应用。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK &amp;&amp; event.getAction() == KeyEvent.ACTION_DOWN) &#123;</span><br><span class="line">         <span class="comment">//两秒之内按返回键就会退出</span></span><br><span class="line">         <span class="keyword">if</span> ((System.currentTimeMillis() - exitTime) &gt; <span class="number">2000</span>) &#123;</span><br><span class="line">             T.showShort(<span class="keyword">this</span>, <span class="string">"再按一次退出程序"</span>);</span><br><span class="line">             exitTime = System.currentTimeMillis();</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             MyActivityManager.finishAllActivity();</span><br><span class="line"><span class="comment">//           System.exit(0); // Kill当前应用的进程,不建议使用.</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="4-FragmentActivity中使用"><a href="#4-FragmentActivity中使用" class="headerlink" title="4. FragmentActivity中使用"></a>4. FragmentActivity中使用</h2><p>在FragmentActivity中使用可以创建一个BaseFragmentActivity。也可以在FragmentActivity中直接使用。方法与上面相同，不再赘述。</p><h2 id="5-其他用法"><a href="#5-其他用法" class="headerlink" title="5. 其他用法"></a>5. 其他用法</h2><ul><li>finishOtherAllActivity()：除了指定的界面销毁其他所有界面</li><li>getCurrentActivity()：获取当前界面</li><li>getActivitySize()：获取栈中Activity的数量</li></ul><h2 id="6-结语"><a href="#6-结语" class="headerlink" title="6. 结语"></a>6. 结语</h2><p>源代码已上传Github，在Github上可以查看。</p><p>Github地址：<a href="https://github.com/jemgeek/AndroidDemo/tree/ActivityManager" target="_blank" rel="noopener">https://github.com/jemgeek/AndroidDemo/tree/ActivityManager</a></p><p>目前我的项目中用的就是这种方式，可以很方便的管理Activity。还在等什么，快来试试吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇文章：&lt;a href=&quot;https://jemgeek.com/archives/2016/android-base-config.html&quot;&gt;Android实践系列之项目基础配置&lt;/a&gt;&lt;/p&gt;&lt;p&gt;在进行Android开发的时候，我们需要对Activity进行各种操作，各种跳转。如果不对这些Activity进行有效的管理，将会出现各种我们不希望看见的结果。此时我们需要一个Activity管理器帮助我们有效的管理Activity。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jemgeek.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jemgeek.com/tags/Android/"/>
    
      <category term="项目实践" scheme="http://jemgeek.com/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="Activity" scheme="http://jemgeek.com/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>Android实践系列之项目基础配置</title>
    <link href="http://jemgeek.com/archives/2016/android-base-config.html"/>
    <id>http://jemgeek.com/archives/2016/android-base-config.html</id>
    <published>2016-07-14T05:28:39.000Z</published>
    <updated>2019-02-23T10:15:26.926Z</updated>
    
    <content type="html"><![CDATA[<p>最近想要写一个Android的实践开发项目，一来可以把自己学习的新技术、新知识加以实践；二来可以将自己以往的技术点加以整理，总结，优化；三来希望可以与更多的人分享，交流Android知识与技术。</p><p>这个【Android实践系列】将会作为一个系列去写，其中将会涉及到我以往的技术总结，还将会把我学习的新技术应用到项目中。</p><a id="more"></a><h2 id="一、项目介绍"><a href="#一、项目介绍" class="headerlink" title="一、项目介绍"></a>一、项目介绍</h2><ul><li>项目名：AndroidDemo</li><li>开发环境：Android Studio 2.1.2</li><li>最小SDK版本：9</li><li>目标SDK版本：23</li><li>Github地址：<a href="https://github.com/jemgeek/AndroidDemo" target="_blank" rel="noopener">https://github.com/jemgeek/AndroidDemo</a></li></ul><h2 id="二、基础配置"><a href="#二、基础配置" class="headerlink" title="二、基础配置"></a>二、基础配置</h2><p>在进行项目的开发之前，需要先加入一些第三方开源库的依赖。接下来将会一一进行介绍。</p><h3 id="2-1-RxJava"><a href="#2-1-RxJava" class="headerlink" title="2.1 RxJava"></a>2.1 <a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">RxJava</a></h3><p>想要添加RxJava到你的项目中，只需要在文件<code>app/build.gradle</code>中添加如下依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    // RxJava</span><br><span class="line">    compile &apos;io.reactivex:rxjava:1.1.3&apos;</span><br><span class="line">    compile &apos;io.reactivex:rxandroid:1.1.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加RxAndroid是为了Android中的线程问题。添加完毕之后点击<code>Sync Now</code>同步一下就OK了。</p><p>RxJava的本质可以概括为<code>异步</code>两个字。那么同为异步，它的优势又有哪些呢？也是两个字：<code>简洁</code>。这里的简洁不是指代码的简洁，而是逻辑上的简洁。如果想知道更多关于RxJava的信息，请自行查找资料，在此不再赘述。</p><ul><li>RxJava的Github地址:<a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">https://github.com/ReactiveX/RxJava</a></li><li>推荐一篇介绍RxJava的文章：<a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">给 Android 开发者的 RxJava 详解</a>。</li></ul><h3 id="2-2-Retrofit"><a href="#2-2-Retrofit" class="headerlink" title="2.2 Retrofit"></a>2.2 <a href="http://square.github.io/retrofit/" target="_blank" rel="noopener">Retrofit</a></h3><p>如果你后台的接口符合RESTful API规范，那么使用RxJava + Retrofit 完全可以打出成吨的伤害，简直不要太酸爽。</p><p>将Retrofit添加到项目中只需要在<code>app/build.gradle</code>加入如下依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    // Retrofit &amp; adapter-rxjava &amp; converter-gson(三个版本需要相同)</span><br><span class="line">    compile &apos;com.squareup.retrofit2:retrofit:2.0.2&apos;</span><br><span class="line">    compile &apos;com.squareup.retrofit2:converter-gson:2.0.2&apos;</span><br><span class="line">    compile &apos;com.squareup.retrofit2:adapter-rxjava:2.0.2&apos;</span><br><span class="line">    compile &apos;com.google.code.gson:gson:2.6.2&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在添加Retrofit开源库的同时需要添加adapter-rxjava与RxJava结合，添加gson库的支持，用于解析json数据。Retrofit 2.0已经将OkHttp集成进去了，所以就不需要单独导入OkHttp了。</p><ul><li>Retrofit官网：<a href="http://square.github.io/retrofit/" target="_blank" rel="noopener">http://square.github.io/retrofit/</a></li><li>Github地址：<a href="https://github.com/square/retrofit" target="_blank" rel="noopener">https://github.com/square/retrofit</a></li><li>推荐文章：<a href="http://gank.io/post/56e80c2c677659311bed9841" target="_blank" rel="noopener">RxJava与Retrofit结合的最佳实践</a></li></ul><h3 id="2-3-Glide"><a href="#2-3-Glide" class="headerlink" title="2.3 Glide"></a>2.3 <a href="https://github.com/bumptech/glide" target="_blank" rel="noopener">Glide</a></h3><p>Glide是一个图片加载库，一个使用非常简单的图片加载库，使用方便，功能强大。</p><p>将Glide添加到项目中只需要在<code>app/build.gradle</code>加入如下依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    // Glide图片加载库</span><br><span class="line">    compile &apos;com.github.bumptech.glide:glide:3.7.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Github地址：<a href="https://github.com/bumptech/glide" target="_blank" rel="noopener">https://github.com/bumptech/glide</a></li><li>推荐文章：<a href="http://stackoverflow.com/questions/29363321/picasso-v-s-imageloader-v-s-fresco-vs-glide" target="_blank" rel="noopener">Picasso vs Imageloader vs Fresco vs Glide</a></li></ul><h3 id="2-4-ButterKnife"><a href="#2-4-ButterKnife" class="headerlink" title="2.4 ButterKnife"></a>2.4 <a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="noopener">ButterKnife</a></h3><p>ButterKnife是使用注解的方式帮助开发者绑定View组件，让开发者不需要再写一大串的findViewById。配合Android studio插件<a href="https://github.com/avast/android-butterknife-zelezny" target="_blank" rel="noopener">android-butterknife-zelezny</a>使用简直不要太棒！不多说，自己去感受！！！</p><p>将Glide添加到项目中首先需要在项目级的<code>build.gradle</code>中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line"> jcenter()</span><br><span class="line">  &#125;</span><br><span class="line"> dependencies &#123;</span><br><span class="line">   // 添加APT，用于自动生成代码</span><br><span class="line">   classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>app/build.gradle</code>加入如下依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;android-apt&apos;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">  // ButterKnife</span><br><span class="line">  compile &apos;com.jakewharton:butterknife:8.2.1&apos;</span><br><span class="line">  apt &apos;com.jakewharton:butterknife-compiler:8.2.1&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Github地址：<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="noopener">https://github.com/JakeWharton/butterknife</a></li></ul><h3 id="2-5-Logger"><a href="#2-5-Logger" class="headerlink" title="2.5 Logger"></a>2.5 <a href="https://github.com/orhanobut/logger" target="_blank" rel="noopener">Logger</a></h3><p>Logger是一个非常好用的日志工具。使用也非常简单，在此不再赘述。在<code>app/build.gradle</code>加入如下依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    // Logger</span><br><span class="line">    compile &apos;com.orhanobut:logger:1.15&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Github地址：<a href="https://github.com/orhanobut/logger" target="_blank" rel="noopener">https://github.com/orhanobut/logger</a></li></ul><h3 id="2-6-LeakCanary"><a href="#2-6-LeakCanary" class="headerlink" title="2.6 LeakCanary"></a>2.6 <a href="https://github.com/square/leakcanary" target="_blank" rel="noopener">LeakCanary</a></h3><p>LeakCanary是很常用的一个内存泄漏检测工具，使用非常简单，可以很好的检测出应用的内存泄漏。在<code>app/build.gradle</code>加入如下依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    // LeakCanary内存泄漏检测</span><br><span class="line">    debugCompile &apos;com.squareup.leakcanary:leakcanary-android:1.4-beta2&apos;</span><br><span class="line">    releaseCompile &apos;com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2&apos;</span><br><span class="line">    testCompile &apos;com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Github地址：<a href="https://github.com/square/leakcanary" target="_blank" rel="noopener">https://github.com/square/leakcanary</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文仅是介绍了项目中所使用的一些开源库以及简单的介绍。在后面的文章将会对这些开源库的使用进行详细的介绍。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想要写一个Android的实践开发项目，一来可以把自己学习的新技术、新知识加以实践；二来可以将自己以往的技术点加以整理，总结，优化；三来希望可以与更多的人分享，交流Android知识与技术。&lt;/p&gt;&lt;p&gt;这个【Android实践系列】将会作为一个系列去写，其中将会涉及到我以往的技术总结，还将会把我学习的新技术应用到项目中。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jemgeek.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jemgeek.com/tags/Android/"/>
    
      <category term="项目实践" scheme="http://jemgeek.com/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>Git系列之Github基础设置及使用详解</title>
    <link href="http://jemgeek.com/archives/2016/git-github-base-usage.html"/>
    <id>http://jemgeek.com/archives/2016/git-github-base-usage.html</id>
    <published>2016-07-06T08:00:14.000Z</published>
    <updated>2019-02-23T10:15:17.010Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2017/04/01/58df23fe561be.jpg" alt="github"></p><p>在上一篇博客<a href="http://jemgeek.com/archives/2016/git-github-base.html"><strong>Git系列之初识Git与Github</strong></a>中详细介绍了Git以及Github分别是什么，以及两者之间的关系。接下来本系列教程将带你一步一步的学习Git以及Github的详细用法。本篇博客将教你如何加入Github，并进行初步的配置及使用。</p><a id="more"></a><h2 id="一、加入Github"><a href="#一、加入Github" class="headerlink" title="一、加入Github"></a>一、加入Github</h2><p><a href="https://github.com" target="_blank" rel="noopener"><strong>Github</strong></a>的优秀在<a href="http://jemgeek.com/archives/2016/git-github-base.html">上一篇</a>博客中已经说得很详细了，如果想了解的话请自行去看上一篇博客：<a href="http://jemgeek.com/archives/2016/git-github-base.html"><strong>Git系列之初识Git与Github</strong></a>。下面请跟着我的脚步一起加入Github大军吧，<strong>Come On</strong>。</p><h3 id="1-1-注册账号"><a href="#1-1-注册账号" class="headerlink" title="1.1 注册账号"></a>1.1 注册账号</h3><p>想要加入Github，首先你需要注册Github的账号，打开<a href="https://github.com" target="_blank" rel="noopener">Github网站主页:https://github.com</a>，然后你会看到下面的注册界面。</p><p><img src="https://i.loli.net/2019/01/15/5c3d919966742.png" alt="new_repository.png"></p><p>根据提示依次填入：你的用户名、你的E-mail地址、你的账号密码。输入完成之后点击<code>Sign up for Github</code>按钮注册即可。注意你的用户名和E-mail必须是没有被注册过的才可以。如果提示错误请换个用户名或者E-mail再重新注册即可。</p><blockquote><p>这里有个小小的提示，很多人在注册账号的时候可能为了方便就乱输用户名，比如：sadasdsdfg120。这种用户名难以记忆并且看着很不舒服。所以建议使用你的英文名，或者有意义的单词。而且建议你的其他平台都使用相同的名字，这样的话辨识度会比较高，你可以打开<a href="http://jemgeek.com/about/">我的博客-关于</a>界面，观察我各个平台的用户名，除了被人抢先注册的，其他的我都用了容易记忆并且统一的名字。</p></blockquote><p>这一步成功之后，会跳转到注册的第二步，如下图所示。这时Github已经向你的邮箱中发送了一封验证邮件，进入你的邮箱点击验证即可。</p><p><img src="https://i.loli.net/2019/01/15/5c3d919964f67.png" alt="github-register-2.png"></p><p>如上图所示，这一步主要是让你选择一个个人计划，我们直接使用默认的免费的就可以了。下面有一个选择框是提示你可以在下一步创建一个organization(组织)的。这个可以不选择，直接点击<code>Finish sign up</code>按钮完成注册即可。完成之后会出现下面的界面。</p><p><img src="https://i.loli.net/2019/01/15/5c3d9199c7033.png" alt="github-register-finish.png"></p><p>看到这个就说明你已经注册成功了。你可以选择<code>Read the guide</code>按钮去看一下Github官方为新人写的引导文档，或者点击<code>Start a project</code>去创建一个开始一个项目，创建一个仓库。再或者点击界面右上角你的头像-&gt;<code>Your profiles</code>进入你的主页。</p><h3 id="1-2-Github界面介绍"><a href="#1-2-Github界面介绍" class="headerlink" title="1.2 Github界面介绍"></a>1.2 Github界面介绍</h3><p>到此我们已经成功注册了Github账号，以后就可以轻松+愉快的使用Github了。那么新人可能会对Github比较陌生，对界面中的各种功能、按钮不清楚。那么接下来我会对此一一解释。先来看张图：</p><p><img src="https://i.loli.net/2019/01/15/5c3d9199ba18f.png" alt="github-profiles-init.png"></p><p>这是新注册用户的界面，在图中我标记的比较详细，下面一一解释(下面的编号对应图中的编号)。</p><ol><li>进入Github主页的按钮;</li><li>搜索框，你可以在这里搜索一些开源项目;</li><li>你的头像，可以在设置里面进行设置;</li><li>你的昵称(账号名称)，你可以在设置中设置你的昵称;</li><li>提示用户添加一个类似于个人描述或个性签名的东西;</li><li>这是你加入Github的时间;</li><li>这有三个数据，Followers:追随(关注)你的人;Starred:你Star(点赞)的项目;Following:你追随(关注)的人;</li><li>Pull requests:简单地说就是别人向你的仓库提交合并请求，后面会详细说;</li><li>Issues:这就是别人对你的项目提的问题;</li><li>Gist:代码片段，后面会详细说;</li><li>这是系统给你的提示消息，提示你去编辑自己的资料;</li><li>你每天的贡献度;</li><li>你的项目仓库;</li><li>你平时活动，或是动态，比如在哪个项目做了提交等;</li><li>这是你每天向Github提交的贡献的分布图;</li><li>由于这是新账户，还没有贡献，所以贴出了一个官方对于贡献的解释，帮助新手理解;</li><li>这是一个创建新仓库或新组织的按钮，点击按钮会弹出菜单，下面会详细讲解;</li><li>这是跟用户相关的一个按钮，点击之后也会有一个跟用户相关的菜单，下面会详细讲解。</li></ol><h2 id="二、Github的配置"><a href="#二、Github的配置" class="headerlink" title="二、Github的配置"></a>二、Github的配置</h2><p>到这里，我们已经创建好了一个Github账户，并且详细的了解了Github个人主页中的布局以及详细信息。那么现在我们来学习一下如何对Github进行一些简单的设置。</p><p>点击<code>1.2章节图片</code>中的<code>编号18</code>的按钮，然后选择菜单下方的<code>Settings</code>进入你的<code>设置界面</code>。</p><p><img src="https://i.loli.net/2019/01/15/5c3d919963aa5.png" alt="personal_settings.png"></p><h3 id="2-1-Profile-个人简介"><a href="#2-1-Profile-个人简介" class="headerlink" title="2.1 Profile - 个人简介"></a>2.1 Profile - 个人简介</h3><p>进入设置界面之后，首先引入眼帘的是<code>Profile(个人简介)</code>页面。在页面右侧是具体需要设置的一些信息。设置内容如下：</p><ol><li>Profile picture：头像设置，点击<code>Upload new picture</code>按钮进行头像上传更新即可;</li><li>Name：你的昵称或姓名，有别于登录用户名，这仅用来显示，类似于QQ昵称;</li><li>Public email：设置公开邮箱，可以选择你注册的邮箱，也可以不设置;</li><li>Bio：个人简介，Tell a little about yourself.也可以@一些人或组织;</li><li>URL：个人主页地址，或其他网络地址;</li><li>Company：你的公司;</li><li>Location：你的位置或地址。</li></ol><p>设置完上面的信息之后，点击<code>Upload profile</code>按钮更新个人信息。</p><p>在下面还有三个小块：</p><ol><li>Contributions：关于Contribution(贡献)的设置，可以设置把私人仓库的贡献显示在我的主页，然而我们用的都是免费的账户，是没有私人仓库的。所以可以无视。</li><li>Github Developer Program：如果你想开发一些应用、工具之类的集成到Github，可以加入Github开发组。</li><li>Jobs profile：勾选<code>Available for hire</code>选项，表示你是可被招聘的，有工作会联系你。</li></ol><h3 id="2-2-Account-账号设置"><a href="#2-2-Account-账号设置" class="headerlink" title="2.2 Account - 账号设置"></a>2.2 Account - 账号设置</h3><ol><li>Change password：修改你的登录密码，如果忘记密码可以点击<code>I forgot my password</code>重置;</li><li>Change username：修改你的用户名，这是可用于登录的用户名，而不是之前的昵称;</li><li>Delete account：删除账号，请不要作死去尝试。</li></ol><h3 id="2-3-Emails"><a href="#2-3-Emails" class="headerlink" title="2.3 Emails"></a>2.3 Emails</h3><p>Github需要你设置一个Primary的邮箱(主邮箱)，以便给你发送一些通知。Github会默认将你注册时的邮箱作为主邮箱，如果你想修改的话可以添加一个邮箱，然后设置为主邮箱。</p><p>Github默认邮箱都是public，即公开的，你可以勾选<code>Keep my email address private</code>选项修改为private(私有的)。不过如果你想使用私有邮箱进行命令行操作的话就需要在Git中设置你的邮箱。具体的操作方法官方给了链接，可以点击查看。</p><p>Email preferences：邮件偏好设置，第一个选项是发送所有邮件给我，包括我没有订阅的。第二个选项是仅发送跟我账号相关的和我订阅的邮件。</p><h3 id="2-4-Notifications-通知"><a href="#2-4-Notifications-通知" class="headerlink" title="2.4 Notifications - 通知"></a>2.4 Notifications - 通知</h3><p>这里主要是设置Github给你发送通知或者消息的方式。</p><p>How you receive notifications</p><ul><li>Automatic watching：当你获得了一个仓库的push权限时，会自动发送通知给你。在下方可以设置自动关注。</li><li>Participating：如果你参与的项目有新的消息，或者有人@你了就会发消息给你，可以选择邮件或者网页通知两种方式。</li><li>Watching：如果你关注的项目有更新的话会通知你，可以选择邮件或者网页通知两种方式。</li></ul><p>Notification email</p><ul><li>Primary email address：设置主邮箱，通知将发送到这个邮箱;</li><li>Settings：设置需要通知你的事件。</li></ul><h3 id="2-5-其他设置"><a href="#2-5-其他设置" class="headerlink" title="2.5 其他设置"></a>2.5 其他设置</h3><p>新手使用Github基本上设置上面的内容就可以了，下面的设置暂时不会用到。后面的教程中会在用到的时候进行详细的讲解。下面对其他的设置进行简单的介绍：</p><ol><li>Billing：如果想要更好的服务，可以在这里花钱购买相应的服务。</li><li>SSH and GPG keys：设置SSH跟GPG密钥的地方，如果你想用SSH工具连接到你的Github的话，需要在这里设置你的SSH公钥，这个会在后面的教程中详细说明。</li><li>Security：顾名思义，安全方面的设置，可以在里面开启双重认证，查看当前那些主机登录了你的Github账号，查看登录记录。</li><li>OAuth applications：这是用来查看你的Github绑定了那些第三方的应用的。</li><li>Personal access tokens：如果你想使用Github API进行一些开发的话，需要在这里生成API Token。</li><li>Repositories：对仓库的一些设置。</li><li>Organizations：对组织的一些设置。</li><li>Saved replies：被保存的回复在这里可以看到。</li></ol><h2 id="三、Github的基本使用"><a href="#三、Github的基本使用" class="headerlink" title="三、Github的基本使用"></a>三、Github的基本使用</h2><p>创建完账号并且进行了基本的设置之后，我们就可以愉快的使用Github进行代码管理了。下面来看一下Github的基本使用方法。</p><h3 id="3-1-创建仓库"><a href="#3-1-创建仓库" class="headerlink" title="3.1 创建仓库"></a>3.1 创建仓库</h3><p>点击1.2章节图片中的<code>编号17</code>的按钮，可以看到有三个选项：New repository(创建仓库)、Import repository(导入仓库)和New organization(创建组织)。点击<code>New repository</code>选项创建一个新的仓库。</p><p><img src="https://i.loli.net/2019/01/15/5c3d919958226.png" alt="Create_new_repository.png"></p><p>如上图所示是创建新仓库的界面，输入仓库名称，然后系统会检测是否重名，如果已经有重名的仓库则无法创建，需要修改仓库名才可。仓库名输入完成之后，可以在下面输入对仓库的描述。</p><p>在描述的下方可以选择仓库是公开的还是私有的，但是对于免费账户来说是没有私有仓库的。所以一般都是默认公开。如果需要私有仓库，则可以在2.5章节中的<code>Billing</code>设置中付费开启私有仓库的权限。</p><p>然后是<code>Initialize this repository with a README</code>选项，默认是不勾选的，不勾选的状态下将会创建一个空仓库。如果勾选的话则会创建一个仓库，仓库中会有一个<code>README.md</code>文件。当你配置好之后，点击按钮<code>Create repository</code>即可创建一个新的仓库。</p><p><img src="https://i.loli.net/2019/01/15/5c3d919966742.png" alt="new_repository.png"></p><p>在上图中我们可以看到一个仓库的完整界面，在这个界面中有很多的功能，在此就不一一说明了，后面会专门写一篇文章来详细介绍这些功能。</p><h3 id="3-2-文件操作"><a href="#3-2-文件操作" class="headerlink" title="3.2 文件操作"></a>3.2 文件操作</h3><p><img src="https://i.loli.net/2019/01/15/5c3d91995631d.png" alt="File_operation.png"></p><p>在界面中间，你可以看到如上图所示的操作面板，主要功能如下：</p><ol><li>Create new file：创建新文件，点击按钮之后可以创建一个新文件并进行文件编辑，编辑完成后保存提交就可以把新文件保存在仓库中了。</li><li>Upload files：上传文件，点击按钮之后进入上传文件的界面，选择你想要上传的文件即可将文件上传到仓库中。</li><li>Find file：寻找文件，当你的仓库中有很多文件的时候，你可以使用这个功能快速的查找文件。</li><li>Clone or download：克隆或下载仓库，点击按钮之后可以弹出一个面板，可以复制仓库地址进行克隆，或者选择<code>Download ZIP</code>，系统将把仓库中所有文件打包成ZIP压缩文件并下载到本地。</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本篇文章详细的介绍了如何加入Github，并对Github进行基础的设置，最后介绍了一些基础的操作。</p><p>由于文章篇幅有限，而Github又是如此的博大精深，所以在本篇文章中可能无法面面俱到。在之后的系列文章中，我会对Github(包括Git)进行更加全面，更加深入的介绍。</p><blockquote><p>如果你在阅读本文中遇到了理解不了的地方或者认为有错误的地方，请在下方评论，我会及时进行解答或修改。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/04/01/58df23fe561be.jpg&quot; alt=&quot;github&quot;&gt;&lt;/p&gt;&lt;p&gt;在上一篇博客&lt;a href=&quot;http://jemgeek.com/archives/2016/git-github-base.html&quot;&gt;&lt;strong&gt;Git系列之初识Git与Github&lt;/strong&gt;&lt;/a&gt;中详细介绍了Git以及Github分别是什么，以及两者之间的关系。接下来本系列教程将带你一步一步的学习Git以及Github的详细用法。本篇博客将教你如何加入Github，并进行初步的配置及使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://jemgeek.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://jemgeek.com/tags/Git/"/>
    
      <category term="Github" scheme="http://jemgeek.com/tags/Github/"/>
    
  </entry>
  
</feed>
