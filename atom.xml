<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星途</title>
  
  <subtitle>不为繁华易匠心</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xingtuai.com/"/>
  <updated>2020-05-01T12:13:08.269Z</updated>
  <id>http://xingtuai.com/</id>
  
  <author>
    <name>James</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot 单例模式中依赖注入问题</title>
    <link href="http://xingtuai.com/archives/2020/spring-boot-singleton-ioc.html"/>
    <id>http://xingtuai.com/archives/2020/spring-boot-singleton-ioc.html</id>
    <published>2020-05-01T10:27:23.000Z</published>
    <updated>2020-05-01T12:13:08.269Z</updated>
    
    <content type="html"><![CDATA[<p>在日常项目开发中，单例模式可以说是最常用到的设计模式，项目也常常在单例模式中需要使用 Service 逻辑层的方法来实现某些功能。通常可能会使用 <code>@Resource</code> 或者 <code>@Autowired</code> 来自动注入实例，然而这种方法在单例模式中却会出现 <code>NullPointException</code> 的问题。那么本篇就此问题做一下研究。</p><p><a href="https://github.com/JemGeek/spring-boot-example/tree/master/spring-boot-singleton-ioc" target="_blank" rel="noopener">演示代码地址</a></p><a id="more"></a><h2 id="问题初探"><a href="#问题初探" class="headerlink" title="问题初探"></a>问题初探</h2><p>一般我们的项目是分层开发的，最经典的可能就是下面这种结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">├── UserDao -- DAO 层，负责和数据源交互，获取数据。</span><br><span class="line">├── UserService -- 服务逻辑层，负责业务逻辑实现。</span><br><span class="line">└── UserController -- 控制层，负责提供与外界交互的接口。</span><br></pre></td></tr></table></figure><p>此时需要一个单例对象，此对象需要 <code>UserService</code> 来提供用户服务。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> UserSingleton INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == INSTANCE) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (UserSingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == INSTANCE) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> UserSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == userService) &#123;</span><br><span class="line">            log.debug(<span class="string">"UserSingleton userService is null"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"UserSingleton Exception: userService is null"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个 <code>UserController</code> 来调用 <code>UserSingleton.getUser()</code> 方法看看返回数据是什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正常方式，在 Controller 自动注入 Service。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  user info</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用单例对象中自动注入的 UserService 的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  UserSingleton Exception: userService is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/singleton/ioc"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserFromSingletonForIoc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserSingleton.getInstance().getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/05/01/CeAh4WxDYvQUadk.png" alt="user-info.png"></p><p>可以看到，在 <code>UserController</code> 中自动注入 <code>UserService</code> 是可以正常获取到数据的。</p><p><img src="https://i.loli.net/2020/05/01/KgHMt5xhSmPWdl4.png" alt="UserSingleton-exception.png"></p><p>但是如果使用在单例模式中使用自动注入的话，<code>UserService</code> 是一个空的对象。</p><p>所以使用 <code>@Resource</code> 或者 <code>@Autowired</code> 注解的方式在单例中获取 <code>UserService</code> 的对象实例是不行的。如果没有做空值判断，会报 <code>NullPointException</code> 异常。</p><h2 id="问题产生原因"><a href="#问题产生原因" class="headerlink" title="问题产生原因"></a>问题产生原因</h2><p>之所以在单例模式中无法使用自动依赖注入，是因为单例对象使用 <code>static</code> 标记，<code>INSTANCE</code> 是一个静态对象，而静态对象的加载是要优先于 Spring 容器的。所以在这里无法使用自动依赖注入。</p><h2 id="问题解决方法"><a href="#问题解决方法" class="headerlink" title="问题解决方法"></a>问题解决方法</h2><p>解决这种问题，其实也很简单，只要不使用自动依赖注入就好了，在 <code>new UserSingleton()</code> 初始化对象的时候，手动实例化 <code>UserService</code> 就可以了嘛。但是这种方法可能会有一个坑，或者说只能在某些情况下可以实现。先看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> UserSingleton INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了和上面自动依赖注入的对象做区分。</span></span><br><span class="line">    <span class="comment">// 这里加上 ForNew 的后缀代表这是通过 new Object()创建出来的</span></span><br><span class="line">    <span class="keyword">private</span> UserService userServiceForNew;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">UserSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userServiceForNew = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == INSTANCE) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (UserSingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == INSTANCE) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> UserSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == userService) &#123;</span><br><span class="line">            log.debug(<span class="string">"UserSingleton userService is null"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"UserSingleton Exception: userService is null"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserForNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == userServiceForNew) &#123;</span><br><span class="line">            log.debug(<span class="string">"UserSingleton userService is null"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"UserSingleton Exception: userService is null"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userServiceForNew.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <code>UserService</code> 的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  <span class="doctag">@link</span>&#123;String&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户信息，从 DAO 层获取数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getUserForDao</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"user info"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserForDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == userDao)&#123;</span><br><span class="line">            log.debug(<span class="string">"UserServiceImpl Exception: userDao is null"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"UserServiceImpl Exception: userDao is null"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userDao.select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个 <code>UserController</code> 调用单例中的方法做下验证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正常方式，在 Controller 自动注入 Service。</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用单例对象中自动注入的 UserService 的方法</span></span><br><span class="line">    <span class="comment">// 返回值是: UserSingleton Exception: userService is null</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/singleton/ioc"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserFromSingletonForIoc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserSingleton.getInstance().getUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用单例对象中手动实例化的 UserService 的方法</span></span><br><span class="line">    <span class="comment">// 返回值是: user info</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/singleton/new"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserFromSingletonForNew</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserSingleton.getInstance().getUserForNew();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用单例对象中手动实例化的 UserService 的方法，在 UserService 中，通过 DAO 获取数据</span></span><br><span class="line">    <span class="comment">// 返回值是: UserServiceImpl Exception: userDao is null</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/singleton/new/dao"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserFromSingletonForNewFromDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserSingleton.getInstance().getUserForNewFromDao();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码，可以发现，通过手动实例化的方式是可以一定程度上解决问题的。但是当 UserService 中也使用自动依赖注入，比如 <code>@Resource private UserDao userDao;</code>，并且单例中使用的方法有用到 <code>userDao</code> 就会发现 <code>userDao</code> 是个空的对象。</p><p>也就是说虽然在单例对象中手动实例化了 <code>UserService</code> ，但 <code>UserService</code> 中的 <code>UserDao</code> 却无法自动注入。其原因其实与单例中无法自动注入 <code>UserService</code> 是一样的。所以说这种方法只能一定程度上解决问题。</p><h2 id="最终解决方案"><a href="#最终解决方案" class="headerlink" title="最终解决方案"></a>最终解决方案</h2><p>我们可以创建一个工具类实现 <code>ApplicationContextAware</code> 接口，用来获取 <code>ApplicationContext</code> 上下文对象，然后通过 <code>ApplicationContext.getBean()</code> 来动态的获取实例。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring 工具类，用来动态获取 bean</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> James</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextUtils</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        SpringContextUtils.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 ApplicationContext</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(name, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后改造下我们的单例对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> UserSingleton INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加上 ForTool 后缀来和之前两种方式创建的对象作区分。</span></span><br><span class="line">    <span class="keyword">private</span> UserService userServiceForTool;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">UserSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userServiceForTool = SpringContextUtils.getBean(UserService.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == INSTANCE) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (UserSingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == INSTANCE) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> UserSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 SpringContextUtils 获取的 UserService 对象，并从 UserDao 中获取数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserForToolFromDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == userServiceForTool) &#123;</span><br><span class="line">            log.debug(<span class="string">"UserSingleton userService is null"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"UserSingleton Exception: userService is null"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userServiceForTool.getUserForDao();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>UserController</code> 中进行测试，看一下结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用 SpringContextUtils 获取的的 UserService 的方法，在 UserService 中，通过 DAO 获取数据</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span>  user info for dao</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/user/singleton/tool/dao"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUserFromSingletonForToolFromDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> UserSingleton.getInstance().getUserForToolFromDao();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问接口，返回结果是：<code>user info for dao</code>，验证通过。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://github.com/JemGeek/spring-boot-example/tree/master/spring-boot-singleton-ioc" target="_blank" rel="noopener">本文源码地址</a></p><p>欢迎关注本人 github 中的 <code>spring-boot-example</code> 和 <code>spring-cloud-example</code> 项目，为您提供更多的 <strong>spring boot</strong> 及 <strong>spring cloud</strong> 教程及样例代码。博主会在空闲时间持续更新相关的文档。</p><p><a href="https://github.com/JemGeek/spring-boot-example" target="_blank" rel="noopener">spring-boot-example</a></p><p><a href="https://github.com/JemGeek/spring-cloud-example" target="_blank" rel="noopener">spring-cloud-example</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在日常项目开发中，单例模式可以说是最常用到的设计模式，项目也常常在单例模式中需要使用 Service 逻辑层的方法来实现某些功能。通常可能会使用 &lt;code&gt;@Resource&lt;/code&gt; 或者 &lt;code&gt;@Autowired&lt;/code&gt; 来自动注入实例，然而这种方法在单例模式中却会出现 &lt;code&gt;NullPointException&lt;/code&gt; 的问题。那么本篇就此问题做一下研究。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/JemGeek/spring-boot-example/tree/master/spring-boot-singleton-ioc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;演示代码地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://xingtuai.com/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="http://xingtuai.com/tags/Spring-Boot/"/>
    
      <category term="Singleton" scheme="http://xingtuai.com/tags/Singleton/"/>
    
      <category term="ioc" scheme="http://xingtuai.com/tags/ioc/"/>
    
  </entry>
  
  <entry>
    <title>安装 Docker 和 Docker Compose (Ubuntu)</title>
    <link href="http://xingtuai.com/archives/2019/docker-base-install.html"/>
    <id>http://xingtuai.com/archives/2019/docker-base-install.html</id>
    <published>2019-10-12T12:33:47.000Z</published>
    <updated>2019-11-01T13:15:50.296Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/10/13/KQnDgsy8Gmuxcje.png" alt="install-docker-on-ubuntu-1804.png"></p><p><code>Docker</code> 作为一种新兴的虚拟化方式，<code>Docker</code> 跟传统的虚拟机方式相比具有众多的优势。<code>Docker</code> <strong>可以更高效的利用系统资源</strong>、<strong>更快速的启动时间</strong>、<strong>一致的运行环境</strong>、<strong>持续交付和部署</strong>、<strong>更轻松的迁移</strong>、<strong>更轻松的维护和扩展</strong>。</p><p>博主第一次使用<code>Docker</code>就深深喜欢上了这种方式，一次配置，到处运行，不用再反反复复的配置环境可以说是非常的方便了。本篇博客就来说一说<code>Docker</code>的安装及基本使用方法，后续还会不定时的更新<code>Docker</code>系列博客。</p><a id="more"></a><h2 id="对比传统虚拟机"><a href="#对比传统虚拟机" class="headerlink" title="对比传统虚拟机"></a>对比传统虚拟机</h2><p><code>Docker</code>是什么？<code>Docker</code>属于<code>容器</code>的一种技术封装，提供更为简单易用的使用接口，让开发运维人员可以更方便快捷的使用<code>容器</code>。</p><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:left">容器</th><th style="text-align:left">虚拟机</th></tr></thead><tbody><tr><td style="text-align:left">启动</td><td style="text-align:left">秒级</td><td style="text-align:left">分钟级</td></tr><tr><td style="text-align:left">硬盘使用</td><td style="text-align:left">一般为 MB</td><td style="text-align:left">一般为 GB</td></tr><tr><td style="text-align:left">性能</td><td style="text-align:left">接近原生</td><td style="text-align:left">弱于</td></tr><tr><td style="text-align:left">系统支持量</td><td style="text-align:left">单机支持上千个容器</td><td style="text-align:left">一般几十个</td></tr></tbody></table><p>从上面对比来看，<code>容器</code>的各方面性能及特性是优于<code>虚拟机</code>的。</p><h2 id="Docker-的安装"><a href="#Docker-的安装" class="headerlink" title="Docker 的安装"></a>Docker 的安装</h2><p><code>Docker</code>是一个开放源码的产品，分为 <strong>社区版</strong>（Community Edition，缩写为 CE）和 <strong>企业版</strong>（Enterprise Edition，缩写为 EE）。社区版是免费的，而企业版包含一些收费服务，一般来说个人开发者用社区版就足够了，本篇博文的教程也只是针对社区版。</p><p>安装环境及版本：</p><ul><li>系统：ubuntu 18.04 LTS</li><li>Docker 版本：18.9.05</li></ul><p>英文好的小伙伴也可以直接阅读官方文档，本文只详细介绍 <code>Ubuntu</code> 系统下的 <code>Docker</code> 安装，其他系统的安装请自行参考官方文档。</p><ul><li><a href="https://docs.docker.com/docker-for-mac/install/" target="_blank" rel="noopener">Mac</a></li><li><a href="https://docs.docker.com/docker-for-windows/install/" target="_blank" rel="noopener">Windows</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">CentOS</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/debian/" target="_blank" rel="noopener">Debian</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/fedora/" target="_blank" rel="noopener">Fedora</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Ubuntu</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/binaries/" target="_blank" rel="noopener">其他Linux版本</a></li></ul><h3 id="卸载老版本"><a href="#卸载老版本" class="headerlink" title="卸载老版本"></a>卸载老版本</h3><p>一般来说<code>Ubuntu</code>系统中默认是不会安装<code>Docker</code>的，但是如果安装了老版本的话可以使用下面的命令进行卸载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure><h3 id="安装-Docker-CE"><a href="#安装-Docker-CE" class="headerlink" title="安装 Docker CE"></a>安装 Docker CE</h3><p>安装<code>Docker CE</code>有多种不同的方式：</p><ol><li><p>设置<code>Docker</code>的存储库，然后安装。这种方式便于安装及更新，也是最推荐的方式。</p></li><li><p>下载DEB软件包，手动安装并完全手动管理升级。</p></li><li><p>在测试和开发环境中，部分用户选择使用自动便捷脚本来安装<code>Docker</code>。</p></li></ol><p>本篇博客将介绍第一种安装方式。</p><p><strong>设置 Docker 存储库</strong></p><ol><li>更新<code>apt</code>包索引：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><ol start="2"><li>允许<code>apt</code>通过HTTPS使用存储库来安装软件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common</span><br></pre></td></tr></table></figure><ol start="3"><li>添加<code>Docker</code>官方 GPG 密钥：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>添加完成之后，使用下面命令进行验证秘钥，通过搜索指纹的最后8个字符，验证现在是否具有指纹<code>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</code>的密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class="line"></span><br><span class="line">pub   rsa4096 2017-02-22 [SCEA]</span><br><span class="line">      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88</span><br><span class="line">uid           [ unknown] Docker Release (CE deb) &lt;docker@docker.com&gt;</span><br><span class="line">sub   rsa4096 2017-02-22 [S]</span><br></pre></td></tr></table></figure><ol start="4"><li>使用下面的命令去设置稳定版的存储库。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br></pre></td></tr></table></figure><p><strong>安装 Docker CE</strong></p><ol><li>更新<code>apt</code>包索引：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><ol start="2"><li>安装最新版本的 <code>Docker CE</code> 和 <code>containerd</code>:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><ol start="3"><li>验证<code>Docker</code></li></ol><p>使用下面的命令查看<code>Docker</code>的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker -v</span><br></pre></td></tr></table></figure><p>然后使用下面的命令可以运行<code>hello-world</code>程序，因为<code>Docker</code>中还没有<code>hello-world</code>程序的镜像，所以会先<code>pull</code>（下载）下来然后运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>如果看到打印 <code>Hello for Docker!</code>说明程序已经运行成功了。</p><p><img src="https://i.loli.net/2019/04/24/5cc0730bc3ea9.png" alt="docker-run-hello-world.png"></p><p><strong>卸载 Docker</strong></p><ol><li>卸载 Docker CE</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get purge docker-ce</span><br></pre></td></tr></table></figure><ol start="2"><li>主机上的镜像、容器、卷或者自定义配置文件是不会自动删除的，需要使用下面的命令手动删除这些文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><h2 id="Docker-的使用"><a href="#Docker-的使用" class="headerlink" title="Docker 的使用"></a>Docker 的使用</h2><h3 id="Docker-的启动、关闭等"><a href="#Docker-的启动、关闭等" class="headerlink" title="Docker 的启动、关闭等"></a>Docker 的启动、关闭等</h3><p>可以使用下面的命令对<code>Docker</code>进行启动、关闭、重启等操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 Docker</span></span><br><span class="line">$ sudo service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 Docker</span></span><br><span class="line">$ sudo service docker stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Docker</span></span><br><span class="line">$ sudo service docker restart</span><br></pre></td></tr></table></figure><p>也可以使用<code>systemctl</code>命令进行操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 Docker</span></span><br><span class="line">$ sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 Docker</span></span><br><span class="line">$ sudo systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Docker</span></span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="iamge-镜像文件"><a href="#iamge-镜像文件" class="headerlink" title="iamge 镜像文件"></a>iamge 镜像文件</h3><p>Docker 需要把应用程序及其相关的依赖打包成为一个<code>image</code>镜像文件，这些镜像文件可以存储在云端的存储库中，用户可以将云端的镜像文件下载到本地，然后通过这个文件，生成<code>Docker容器</code>的实例。</p><p>所以当你将你的应用程序及其依赖打包成一个image文件之后，可以将其上传到云端的仓库中，然后在任何一个装有Docker的机器中运行即可，这就是一次配置，到处运行，可以说是非常之方便了。</p><p><code>Docker</code> 官方的仓库是 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>，这是最重要，也是最常用的一个image仓库了。</p><h3 id="运行一个程序"><a href="#运行一个程序" class="headerlink" title="运行一个程序"></a>运行一个程序</h3><p>下面我们使用上面使用过的<code>hello-world</code>进行说明<code>image</code>的使用。</p><ol><li>查看本地<code>image</code>列表</li></ol><p>使用下面的命令查看本地已经存在的<code>image</code>文件都有哪些，可以查看这些镜像的名称，标签，镜像ID，被创建时间，镜像大小。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地 image</span></span><br><span class="line">$ sudo docker image ls</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/24/5cc078622150a.png" alt="docker-image-ls"></p><ol start="2"><li>下载<code>image</code>到本地</li></ol><p>使用下面的命令将<code>image</code>文件从云端下载到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 image</span></span><br><span class="line">$ sudo docker pull hello-world</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/24/5cc079488ef4d.png" alt="docker-pull.png"></p><ol start="3"><li>运行<code>image</code></li></ol><p>使用下面的命令可以运行<code>image</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>如果看到打印 <code>Hello for Docker!</code>说明<code>hello-world</code>程序已经运行成功了。</p><ol start="4"><li>删除<code>image</code></li></ol><p>使用下面的命令删除本地的<code>image</code>文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 image</span></span><br><span class="line">$ sudo docker image rm -f hello-world</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/24/5cc079b973926.png" alt="docker-image-rm.png"></p><h3 id="使用中国官方镜像加速"><a href="#使用中国官方镜像加速" class="headerlink" title="使用中国官方镜像加速"></a>使用中国官方镜像加速</h3><p>通过 Docker 官方镜像加速，中国区用户能够快速访问最流行的 Docker 镜像。该镜像托管于中国大陆，本地用户现在将会享受到更快的下载速度和更强的稳定性，从而能够更敏捷地开发和交付 Docker 化应用。</p><p>Docker 中国官方镜像加速可通过 <code>registry.docker-cn.com</code> 访问。该镜像库只包含流行的公有镜像。私有镜像仍需要从美国镜像库中拉取。</p><p>我们可以使用以下命令直接从该镜像加速地址进行拉取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull registry.docker-cn.com/myname/myrepo:mytag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line">$ docker pull registry.docker-cn.com/library/ubuntu:16.04</span><br></pre></td></tr></table></figure><p>为了永久性保留更改，我们可以修改 <code>/etc/docker/daemon.json</code> 文件并添加上 <code>registry-mirrors</code> 键值,如果文件不存在则新建。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://registry.docker-cn.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你有阿里云账号的话，还可以进入阿里云控制台，使用<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">阿里云的镜像加速器</a>。进入网站之后会看到系统为你分配的加速器地址，添加到 <code>daemon.json</code> 文件中即可。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://38u6me2o.mirror.aliyuncs.com"</span>,</span><br><span class="line">    <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用下面的命令使配置生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker Compose"></a>安装 Docker Compose</h3><p>Docker Compose 可以前往<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">Compose repository release page on GitHub</a>下载，也可以使用<code>curl</code>命令在终端进行下载。</p><ol><li>运行下面的命令来下载 Docker Compose 当前稳定版本：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><ol start="2"><li>添加权限：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><ol start="3"><li>验证安装：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.24.1, build 4667896b</span><br></pre></td></tr></table></figure><ol start="4"><li>卸载 Docker Compose:</li></ol><p>如果你是使用<code>curl</code>的方式安装的，则运行下面的命令删除docker-conpose的文件（本文使用此种方式安装）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>如果你是使用 <code>pip</code> 的方式安装的，则运行下面的命令删除docker-conpose的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip uninstall docker-compose</span><br></pre></td></tr></table></figure><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>关于<code>Docker</code>的知识还有很多，我会在后续的文章继续介绍，欢迎您持续关注本博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/10/13/KQnDgsy8Gmuxcje.png&quot; alt=&quot;install-docker-on-ubuntu-1804.png&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt; 作为一种新兴的虚拟化方式，&lt;code&gt;Docker&lt;/code&gt; 跟传统的虚拟机方式相比具有众多的优势。&lt;code&gt;Docker&lt;/code&gt; &lt;strong&gt;可以更高效的利用系统资源&lt;/strong&gt;、&lt;strong&gt;更快速的启动时间&lt;/strong&gt;、&lt;strong&gt;一致的运行环境&lt;/strong&gt;、&lt;strong&gt;持续交付和部署&lt;/strong&gt;、&lt;strong&gt;更轻松的迁移&lt;/strong&gt;、&lt;strong&gt;更轻松的维护和扩展&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;博主第一次使用&lt;code&gt;Docker&lt;/code&gt;就深深喜欢上了这种方式，一次配置，到处运行，不用再反反复复的配置环境可以说是非常的方便了。本篇博客就来说一说&lt;code&gt;Docker&lt;/code&gt;的安装及基本使用方法，后续还会不定时的更新&lt;code&gt;Docker&lt;/code&gt;系列博客。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://xingtuai.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://xingtuai.com/tags/Docker/"/>
    
      <category term="Docker Compose" scheme="http://xingtuai.com/tags/Docker-Compose/"/>
    
      <category term="ubuntu" scheme="http://xingtuai.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Docker 搭建 MySQL 主从复制集群</title>
    <link href="http://xingtuai.com/archives/2019/docker-install-mysql-master-slave.html"/>
    <id>http://xingtuai.com/archives/2019/docker-install-mysql-master-slave.html</id>
    <published>2019-10-12T12:33:47.000Z</published>
    <updated>2020-03-21T09:53:22.092Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/10/13/UB2IC1wopdhVeKZ.jpg" alt="docker-install-mysql.jpg"></p><p>本篇将介绍如何使用 Docker 部署 MySQL 数据库及远程访问配置。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/10/13/UB2IC1wopdhVeKZ.jpg&quot; alt=&quot;docker-install-mysql.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;本篇将介绍如何使用 Docker 部署 MySQL 数据库及远程访问配置。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://xingtuai.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://xingtuai.com/tags/Docker/"/>
    
      <category term="MySQL" scheme="http://xingtuai.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>安装 Docker 和 Docker Compose (Centos 7)</title>
    <link href="http://xingtuai.com/archives/2019/docker-install-centos.html"/>
    <id>http://xingtuai.com/archives/2019/docker-install-centos.html</id>
    <published>2019-10-12T12:33:47.000Z</published>
    <updated>2019-10-25T16:51:14.357Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/10/26/Kw17keXPrWdIihU.png" alt="how-to-install-docker-on-centos7.png"></p><p>在上一篇博客中发布了在Ubuntu系统中安装 Docker 及 Docker Compose 的教程，然而在企业用服务器中<code>Centos 7</code>系统可能更受欢迎，那么本篇就说一说在 Centos 7 服务器系统中如何安装 Docker 及 Docker Compose。</p><a id="more"></a><h2 id="Docker-的安装"><a href="#Docker-的安装" class="headerlink" title="Docker 的安装"></a>Docker 的安装</h2><p><code>Docker</code>是一个开放源码的产品，分为 <strong>社区版</strong>（Community Edition，缩写为 CE）和 <strong>企业版</strong>（Enterprise Edition，缩写为 EE）。社区版是免费的，而企业版包含一些收费服务，一般来说个人开发者用社区版就足够了，本篇博文的教程也只是针对社区版。</p><p>安装环境及版本：</p><ul><li>系统：Centos 7.6 服务器系统</li><li>Docker 版本：19.03.3</li></ul><p>Ubuntu 系统中的安装教程请阅读<a href="http://jemgeek.com/archives/2019/docker-base-install.html" target="_blank" rel="noopener">安装 Docker 和 Docker Compose (Ubuntu)</a></p><p>英文好的小伙伴也可以直接阅读官方文档，本文只详细介绍 <code>Centos 7</code> 系统下的 <code>Docker</code> 及 <code>Docker Compose</code> 安装，其他系统的安装请自行参考官方文档。</p><ul><li><a href="https://docs.docker.com/docker-for-mac/install/" target="_blank" rel="noopener">Mac</a></li><li><a href="https://docs.docker.com/docker-for-windows/install/" target="_blank" rel="noopener">Windows</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">CentOS</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/debian/" target="_blank" rel="noopener">Debian</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/fedora/" target="_blank" rel="noopener">Fedora</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Ubuntu</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/binaries/" target="_blank" rel="noopener">其他Linux版本</a></li></ul><h3 id="卸载老版本"><a href="#卸载老版本" class="headerlink" title="卸载老版本"></a>卸载老版本</h3><p>一般来说<code>Centos 7</code>系统中默认是不会安装<code>Docker</code>的，但是如果安装了老版本的话可以使用下面的命令进行卸载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h3 id="安装-Docker-CE"><a href="#安装-Docker-CE" class="headerlink" title="安装 Docker CE"></a>安装 Docker CE</h3><ol><li>更新<code>yum</code>包索引：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum update</span><br></pre></td></tr></table></figure><ol start="2"><li>安装一些必要的依赖包：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><ol start="3"><li>配置 docker-ce 仓库：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ol start="4"><li>安装 docker-ce:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-ce <span class="comment"># 安装过程中跳出确认则输入 y</span></span><br></pre></td></tr></table></figure><p>至此，Docker 已经安装完成了，Docker 服务是没有启动的，操作系统里的 docker 组被创建，但是没有用户在这个组里。</p><p>使用下面的命令将你的用户添加到 docker 的用户组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo usermod -aG docker $(yourname)</span><br></pre></td></tr></table></figure><p>添加完成后重启系统生效。</p><p>设置 Docker 开机自启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>启动 Docker 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><ol start="5"><li>验证<code>Docker</code></li></ol><p>使用下面的命令查看<code>Docker</code>的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker -v</span><br><span class="line">Docker version 19.03.3, build a872fc2f86</span><br></pre></td></tr></table></figure><p>然后使用下面的命令可以运行<code>hello-world</code>程序，因为<code>Docker</code>中还没有<code>hello-world</code>程序的镜像，所以会先<code>pull</code>（下载）下来然后运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>如果看到打印 <code>Hello for Docker!</code>说明程序已经运行成功了。</p><p><img src="https://i.loli.net/2019/10/13/FgLUd1AWtxlaoEh.jpg" alt="docker-run-hello-world-centos.png"></p><h3 id="更新及卸载"><a href="#更新及卸载" class="headerlink" title="更新及卸载"></a>更新及卸载</h3><ol><li>更新 Docker CE</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum update docker-ce</span><br></pre></td></tr></table></figure><ol start="2"><li>卸载 Docker CE</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker-ce</span><br></pre></td></tr></table></figure><ol start="3"><li>主机上的镜像、容器、卷或者自定义配置文件是不会自动删除的，需要使用下面的命令手动删除这些文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><h3 id="Docker-Compose-安装"><a href="#Docker-Compose-安装" class="headerlink" title="Docker Compose 安装"></a>Docker Compose 安装</h3><ol><li>安装额外依赖包：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install epel-release</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 python-pip:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y python-pip</span><br></pre></td></tr></table></figure><ol start="3"><li>安装 Docker Compose:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install docker-compose</span><br></pre></td></tr></table></figure><ol start="4"><li>升级 python 包：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum upgrade python*</span><br></pre></td></tr></table></figure><ol start="5"><li>验证安装：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose version</span><br><span class="line">docker-compose version 1.24.1, build 4667896</span><br><span class="line">docker-py version: 3.7.3</span><br><span class="line">CPython version: 2.7.5</span><br><span class="line">OpenSSL version: OpenSSL 1.0.2k-fips  26 Jan 2017</span><br></pre></td></tr></table></figure><ol start="6"><li>卸载 Docker Compose:</li></ol><p>如果你是使用<code>curl</code>的方式安装的，则运行下面的命令删除docker-conpose的文件（本文使用此种方式安装）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>如果你是使用 <code>pip</code> 的方式安装的，则运行下面的命令删除docker-conpose的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip uninstall docker-compose</span><br></pre></td></tr></table></figure><h2 id="Docker-的使用"><a href="#Docker-的使用" class="headerlink" title="Docker 的使用"></a>Docker 的使用</h2><h3 id="Docker-的启动、关闭等"><a href="#Docker-的启动、关闭等" class="headerlink" title="Docker 的启动、关闭等"></a>Docker 的启动、关闭等</h3><p>可以使用下面的命令对<code>Docker</code>进行启动、关闭、重启等操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 Docker</span></span><br><span class="line">$ sudo service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 Docker</span></span><br><span class="line">$ sudo service docker stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Docker</span></span><br><span class="line">$ sudo service docker restart</span><br></pre></td></tr></table></figure><p>也可以使用<code>systemctl</code>命令进行操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 Docker</span></span><br><span class="line">$ sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 Docker</span></span><br><span class="line">$ sudo systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Docker</span></span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="Docker-及镜像"><a href="#Docker-及镜像" class="headerlink" title="Docker 及镜像"></a>Docker 及镜像</h3><p>请阅读<a href="http://jemgeek.com/archives/2019/docker-base-install.html" target="_blank" rel="noopener">安装 Docker 和 Docker Compose (Ubuntu)</a>后面的部分，在此不再赘述。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>关于<code>Docker</code>的知识还有很多，我会在后续的文章继续介绍，欢迎您持续关注本博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/10/26/Kw17keXPrWdIihU.png&quot; alt=&quot;how-to-install-docker-on-centos7.png&quot;&gt;&lt;/p&gt;&lt;p&gt;在上一篇博客中发布了在Ubuntu系统中安装 Docker 及 Docker Compose 的教程，然而在企业用服务器中&lt;code&gt;Centos 7&lt;/code&gt;系统可能更受欢迎，那么本篇就说一说在 Centos 7 服务器系统中如何安装 Docker 及 Docker Compose。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://xingtuai.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://xingtuai.com/tags/Docker/"/>
    
      <category term="Docker Compose" scheme="http://xingtuai.com/tags/Docker-Compose/"/>
    
      <category term="centos" scheme="http://xingtuai.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Docker 安装 MySQL</title>
    <link href="http://xingtuai.com/archives/2019/docker-mysql-install.html"/>
    <id>http://xingtuai.com/archives/2019/docker-mysql-install.html</id>
    <published>2019-10-12T12:33:47.000Z</published>
    <updated>2019-10-13T07:40:04.558Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/10/13/UB2IC1wopdhVeKZ.jpg" alt="docker-install-mysql.jpg"></p><p>本篇将介绍如何使用 Docker 部署 MySQL 数据库及远程访问配置。</p><a id="more"></a><h2 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>使用下面的命令拉取 MySQL 数据库的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker pull mysql  <span class="comment"># 拉取最新版本的镜像，当前为 MySQL 8 版本，tag 为 latest</span></span><br><span class="line"></span><br><span class="line">$ sudo docker pull mysql:5.7 <span class="comment"># 指定拉取 MySQL 5.7 版本</span></span><br></pre></td></tr></table></figure><p>也可以使用搜索命令，查找其他的 MySQL 相关镜像，其中有标识 Stars 数，即受欢迎程度。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker search mysql</span><br></pre></td></tr></table></figure><h3 id="运行-MySQL"><a href="#运行-MySQL" class="headerlink" title="运行 MySQL"></a>运行 MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -p 3306:3306 \</span><br><span class="line">--name mysql \</span><br><span class="line">-v <span class="variable">$PWD</span>/conf:/etc/mysql/conf.d \</span><br><span class="line">-v <span class="variable">$PWD</span>/logs:/logs \</span><br><span class="line">-v <span class="variable">$PWD</span>/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=your-password \</span><br><span class="line">-d mysql</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li>-p 3306:3306 ：将容器的 3306 端口映射到主机的 3306 端口。</li><li>-v $PWD/conf:/etc/mysql/conf.d ：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。</li><li>-v $PWD/logs:/logs ：将主机当前目录下的 logs 目录挂载到容器的 /logs。</li><li>-v $PWD/data:/var/lib/mysql ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。</li><li>-e MYSQL_ROOT_PASSWORD=your-password ：初始化 root 用户的密码,建议使用复杂度高的密码。</li><li>-d mysql : 要部署的镜像名，如果是5.7版本的话，这里则为mysql:5.7</li></ul><h2 id="配置远程访问"><a href="#配置远程访问" class="headerlink" title="配置远程访问"></a>配置远程访问</h2><p>远程访问 MySQL 属于基本配置，但是在配置的时候要注意安全性问题，否则将存在安全性隐患，尤其是企业用服务器更要注重安全性。</p><p>并且需要注意服务器防火墙要开启 <code>3306</code> 端口，服务器提供商的安全组中也需要开启，否则会无法访问哦。</p><p>要配置远程访问，先要打开 MySQL 的控制终端，使用下面的命令开启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker <span class="built_in">exec</span> -it mysql bash <span class="comment"># 进入 MySQL 容器</span></span><br><span class="line"></span><br><span class="line">$ mysql -uroot -p <span class="comment"># 登录 MySQL，执行后输入密码进入 MySQL</span></span><br><span class="line"></span><br><span class="line">$ use mysql; <span class="comment"># 选择使用 mysql 数据库</span></span><br></pre></td></tr></table></figure><h3 id="MySQL-8-配置"><a href="#MySQL-8-配置" class="headerlink" title="MySQL 8 配置"></a>MySQL 8 配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER <span class="string">'username'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'password'</span>;</span><br><span class="line"><span class="comment"># 创建一个账号，用来进行远程访问；</span></span><br><span class="line"><span class="comment"># &#123;usernama&#125; 是远程访问登录的用户名，不建议用 root;</span></span><br><span class="line"><span class="comment"># &#123;password&#125; 是远程访问的登录密码;</span></span><br><span class="line"><span class="comment"># '%'代表的是所有IP，如果可以尽量设置指定 IP 或 IP 段</span></span><br><span class="line"></span><br><span class="line">GRANT ALL ON *.* TO <span class="string">'username'</span>@<span class="string">'%'</span>;</span><br><span class="line"><span class="comment"># 赋予所有权限给之前创建的账号</span></span><br><span class="line"></span><br><span class="line">ALTER USER <span class="string">'username'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'password'</span>;</span><br><span class="line"><span class="comment"># 确认使用这里的密码登录此账号</span></span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="comment"># 刷新权限</span></span><br></pre></td></tr></table></figure><p>完整命令如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER <span class="string">'james'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'123456asd'</span>;</span><br><span class="line"><span class="comment"># 创建一个账号-james，用来进行远程访问；</span></span><br><span class="line"></span><br><span class="line">GRANT ALL ON *.* TO <span class="string">'james'</span>@<span class="string">'%'</span>;</span><br><span class="line"><span class="comment"># 赋予所有权限给之前创建的账号:james</span></span><br><span class="line"></span><br><span class="line">ALTER USER <span class="string">'james'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'123456asd'</span>;</span><br><span class="line"><span class="comment"># 确认使用密码&#123;123456asd&#125;登录此账号&#123;james&#125;</span></span><br><span class="line"><span class="comment"># 密码尽量复杂，安全性更高。</span></span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="comment"># 刷新权限</span></span><br></pre></td></tr></table></figure><p>配置完毕后，使用 Navicat 工具或其他工具进行连接测试即可。</p><h3 id="MySQL-5-7-配置"><a href="#MySQL-5-7-配置" class="headerlink" title="MySQL 5.7 配置"></a>MySQL 5.7 配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">'username'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'password'</span> WITH GRANT OPTION;</span><br><span class="line"><span class="comment"># &#123;usernama&#125; 是远程访问登录的用户名，不建议用 root;</span></span><br><span class="line"><span class="comment"># &#123;password&#125; 是远程访问的登录密码;</span></span><br><span class="line"><span class="comment"># '%'代表的是所有IP，如果可以尽量设置指定 IP 或 IP 段</span></span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="comment"># 刷新权限</span></span><br></pre></td></tr></table></figure><p>配置完毕后，使用 Navicat 工具或其他工具进行连接测试即可。</p><blockquote><p>注：如果无法访问请注意防火墙 <code>3306</code> 端口是否开启，服务器提供商的安全组中的端口是否开启。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/10/13/UB2IC1wopdhVeKZ.jpg&quot; alt=&quot;docker-install-mysql.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;本篇将介绍如何使用 Docker 部署 MySQL 数据库及远程访问配置。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://xingtuai.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://xingtuai.com/tags/Docker/"/>
    
      <category term="MySQL" scheme="http://xingtuai.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 文件上传与下载</title>
    <link href="http://xingtuai.com/archives/2019/spring-boot-file-upload-download.html"/>
    <id>http://xingtuai.com/archives/2019/spring-boot-file-upload-download.html</id>
    <published>2019-03-30T15:50:50.000Z</published>
    <updated>2019-04-01T15:36:31.466Z</updated>
    
    <content type="html"><![CDATA[<p>文件的上传及下载功能是开发人员在日常应用及编程开发中经常会遇到的。正好最近开发需要用到此功能，虽然本人是 Android 开发人员，但还是业余客串了一下后台开发。</p><p>在本文中，您将学习如何使用 Spring Boot 实现 Web 服务中的文件上传和下载功能。首先会构建一个 REST APIs 实现上传及下载的功能，然后使用 Postman 工具来测试这些接口，最后创建一个 Web 界面使用 JavaScript 调用接口演示完整的功能。最终界面及功能如下：</p><p><img src="https://i.loli.net/2019/03/29/5c9e3f3eeb13c.png" alt="show_demo.png"></p><a id="more"></a><h2 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h2><pre><code>- Spring Boot : 2.1.3.RELEASE- Gredle : 5.2.1- Java : 1.8- Intellij IDEA : 2018.3.3</code></pre><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>开发环境为 Intellij IDEA，项目创建很简单，按照下面的步骤创建即可：</p><ol><li>File -&gt; New -&gt; Project…</li><li>选择 <strong>Spring Initializr</strong>，点击 Next</li><li>填写 Group (项目域名) 和 Artifact (项目别名)</li><li>构建类型可以选择 Maven 或 Gradle， 看个人习惯</li><li>添加 <strong>Web</strong> 依赖</li><li>输入项目名称及保存路径，完成创建</li></ol><p>项目创建完毕之后就可以进行开发，项目的完整结构如下图所示：</p><p><img src="https://i.loli.net/2019/03/30/5c9e436fee3ca.png" alt="project_structure.png"></p><h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><p>项目创建完成之后，需要设置一些必要的参数，打开项目<code>resources</code>目录下配置文件<code>application.properties</code>，在其中添加以下参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server.port=80</span><br><span class="line"></span><br><span class="line">## MULTIPART (MultipartProperties)</span><br><span class="line"># 开启 multipart 上传功能</span><br><span class="line">spring.servlet.multipart.enabled=true</span><br><span class="line"># 文件写入磁盘的阈值</span><br><span class="line">spring.servlet.multipart.file-size-threshold=2KB</span><br><span class="line"># 最大文件大小</span><br><span class="line">spring.servlet.multipart.max-file-size=200MB</span><br><span class="line"># 最大请求大小</span><br><span class="line">spring.servlet.multipart.max-request-size=215MB</span><br><span class="line"></span><br><span class="line">## 文件存储所需参数</span><br><span class="line"># 所有通过 REST APIs 上传的文件都将存储在此目录下</span><br><span class="line">file.upload-dir=./uploads</span><br></pre></td></tr></table></figure><p>其中<code>file.upload-dir=./uploads</code>参数为自定义的参数，创建<code>FileProperties.java</code>POJO类，使配置参数可以自动绑定到POJO类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"file"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String uploadDir;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUploadDir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uploadDir;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUploadDir</span><span class="params">(String uploadDir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uploadDir = uploadDir;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>@SpringBootApplication</code>注解的类中添加<code>@EnableConfigurationProperties</code>注解以开启<code>ConfigurationProperties</code>功能。</p><p><code>SpringBootFileApplication.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;</span><br><span class="line">        FileProperties.class</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootFileApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootFileApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成，以后若有<code>file</code>前缀开头的参数需要配置，可直接在<code>application.properties</code>配置文件中配置并更新<code>FileProperties.java</code>即可。</p><p>另外再创建一个上传文件成功之后的<code>Response</code>响应实体类<code>UploadFileResponse.java</code>及异常类<code>FileException.java</code>来处理异常信息。</p><p><code>UploadFileResponse.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadFileResponse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line">    <span class="keyword">private</span> String fileDownloadUri;</span><br><span class="line">    <span class="keyword">private</span> String fileType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UploadFileResponse</span><span class="params">(String fileName, String fileDownloadUri, String fileType, <span class="keyword">long</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">        <span class="keyword">this</span>.fileDownloadUri = fileDownloadUri;</span><br><span class="line">        <span class="keyword">this</span>.fileType = fileType;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getter and setter ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FileException.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h2><p>下面需要创建文件上传下载所需的 REST APIs 接口。创建文件<code>FileController.java</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.james.sample.file.dto.UploadFileResponse;</span><br><span class="line"><span class="keyword">import</span> com.james.sample.file.service.FileService;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.ServletUriComponentsBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(FileController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileService fileService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/uploadFile"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UploadFileResponse <span class="title">uploadFile</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile file)</span>&#123;</span><br><span class="line">        String fileName = fileService.storeFile(file);</span><br><span class="line"></span><br><span class="line">        String fileDownloadUri = ServletUriComponentsBuilder.fromCurrentContextPath()</span><br><span class="line">                .path(<span class="string">"/downloadFile/"</span>)</span><br><span class="line">                .path(fileName)</span><br><span class="line">                .toUriString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UploadFileResponse(fileName, fileDownloadUri,</span><br><span class="line">                file.getContentType(), file.getSize());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/uploadMultipleFiles"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UploadFileResponse&gt; <span class="title">uploadMultipleFiles</span><span class="params">(@RequestParam(<span class="string">"files"</span>)</span> MultipartFile[] files) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(files)</span><br><span class="line">                .map(<span class="keyword">this</span>::uploadFile)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/downloadFile/&#123;fileName:.+&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Resource&gt; <span class="title">downloadFile</span><span class="params">(@PathVariable String fileName, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Load file as Resource</span></span><br><span class="line">        Resource resource = fileService.loadFileAsResource(fileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Try to determine file's content type</span></span><br><span class="line">        String contentType = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            contentType = request.getServletContext().getMimeType(resource.getFile().getAbsolutePath());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            logger.info(<span class="string">"Could not determine file type."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fallback to the default content type if type could not be determined</span></span><br><span class="line">        <span class="keyword">if</span>(contentType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            contentType = <span class="string">"application/octet-stream"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok()</span><br><span class="line">                .contentType(MediaType.parseMediaType(contentType))</span><br><span class="line">                .header(HttpHeaders.CONTENT_DISPOSITION, <span class="string">"attachment; filename=\""</span> + resource.getFilename() + <span class="string">"\""</span>)</span><br><span class="line">                .body(resource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FileController</code>类在接收到用户的请求后，使用<code>FileService</code>类提供的<code>storeFile()</code>方法将文件写入到系统中进行存储，其存储目录就是之前在<code>application.properties</code>配置文件中的<code>file.upload-dir</code>参数的值<code>./uploads</code>。</p><p>下载接口<code>downloadFile()</code>在接收到用户请求之后，使用<code>FileService</code>类提供的<code>loadFileAsResource()</code>方法获取存储在系统中文件并返回文件供用户下载。</p><p><code>FileService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.james.sample.file.exception.FileException;</span><br><span class="line"><span class="keyword">import</span> com.james.sample.file.property.FileProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.UrlResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardCopyOption;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Path fileStorageLocation; <span class="comment">// 文件在本地存储的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileService</span><span class="params">(FileProperties fileProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileStorageLocation = Paths.get(fileProperties.getUploadDir()).toAbsolutePath().normalize();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Files.createDirectories(<span class="keyword">this</span>.fileStorageLocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileException(<span class="string">"Could not create the directory where the uploaded files will be stored."</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储文件到系统</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">storeFile</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Normalize file name</span></span><br><span class="line">        String fileName = StringUtils.cleanPath(file.getOriginalFilename());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Check if the file's name contains invalid characters</span></span><br><span class="line">            <span class="keyword">if</span>(fileName.contains(<span class="string">".."</span>)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileException(<span class="string">"Sorry! Filename contains invalid path sequence "</span> + fileName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Copy file to the target location (Replacing existing file with the same name)</span></span><br><span class="line">            Path targetLocation = <span class="keyword">this</span>.fileStorageLocation.resolve(fileName);</span><br><span class="line">            Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> fileName;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileException(<span class="string">"Could not store file "</span> + fileName + <span class="string">". Please try again!"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Resource <span class="title">loadFileAsResource</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Path filePath = <span class="keyword">this</span>.fileStorageLocation.resolve(fileName).normalize();</span><br><span class="line">            Resource resource = <span class="keyword">new</span> UrlResource(filePath.toUri());</span><br><span class="line">            <span class="keyword">if</span>(resource.exists()) &#123;</span><br><span class="line">                <span class="keyword">return</span> resource;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileException(<span class="string">"File not found "</span> + fileName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileException(<span class="string">"File not found "</span> + fileName, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><p>在完成上述的代码之后，打开<code>SpringBootFileApplication.java</code>并运行，运行完成之后就可以使用 Postman 进行测试了。</p><p>单个文件上传结果：</p><p><img src="https://i.loli.net/2019/03/30/5c9e4dd9ded46.png" alt="upload_result1.png"></p><p>多个文件上传结果：</p><p><img src="https://i.loli.net/2019/03/30/5c9e4dda0c477.png" alt="upload_result2.png"></p><p>文件下载结果：</p><p><img src="https://i.loli.net/2019/03/30/5c9e4dda130d6.png" alt="download_result.png"></p><h2 id="Web-前端开发"><a href="#Web-前端开发" class="headerlink" title="Web 前端开发"></a>Web 前端开发</h2><p><code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Required meta tags --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Boot File Upload / Download Rest API Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap CSS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/css/main.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sorry! Your browser doesn't support Javascript<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload-header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Spring Boot File Upload / Download Rest API Example<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload-content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"single-upload"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Upload Single File<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"singleUploadForm"</span> <span class="attr">name</span>=<span class="string">"singleUploadForm"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"singleFileUploadInput"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"file-input"</span> <span class="attr">required</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"primary submit-btn"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload-response"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"singleFileUploadError"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"singleFileUploadSuccess"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"multiple-upload"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Upload Multiple Files<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"multipleUploadForm"</span> <span class="attr">name</span>=<span class="string">"multipleUploadForm"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"multipleFileUploadInput"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"files"</span> <span class="attr">class</span>=<span class="string">"file-input"</span> <span class="attr">multiple</span> <span class="attr">required</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"primary submit-btn"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload-response"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"multipleFileUploadError"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"multipleFileUploadSuccess"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Optional JavaScript --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>main.css</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">-moz-box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>, Helvetica, Arial, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.58</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#128ff2</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.7em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#128ff2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: none;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.6rem</span> <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.2s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">38px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.primary</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#128ff2</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0.12);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="file"]</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#128ff2</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.submit-btn</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">500px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.file-input</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 115px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.submit-btn</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-container</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">11px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.27);</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-header</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ececec</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-header</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.single-upload</span> &#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#e8e8e8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-response</span> &#123;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">    <span class="attribute">word-break</span>: break-all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> singleUploadForm = <span class="built_in">document</span>.querySelector(<span class="string">'#singleUploadForm'</span>);</span><br><span class="line"><span class="keyword">var</span> singleFileUploadInput = <span class="built_in">document</span>.querySelector(<span class="string">'#singleFileUploadInput'</span>);</span><br><span class="line"><span class="keyword">var</span> singleFileUploadError = <span class="built_in">document</span>.querySelector(<span class="string">'#singleFileUploadError'</span>);</span><br><span class="line"><span class="keyword">var</span> singleFileUploadSuccess = <span class="built_in">document</span>.querySelector(<span class="string">'#singleFileUploadSuccess'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> multipleUploadForm = <span class="built_in">document</span>.querySelector(<span class="string">'#multipleUploadForm'</span>);</span><br><span class="line"><span class="keyword">var</span> multipleFileUploadInput = <span class="built_in">document</span>.querySelector(<span class="string">'#multipleFileUploadInput'</span>);</span><br><span class="line"><span class="keyword">var</span> multipleFileUploadError = <span class="built_in">document</span>.querySelector(<span class="string">'#multipleFileUploadError'</span>);</span><br><span class="line"><span class="keyword">var</span> multipleFileUploadSuccess = <span class="built_in">document</span>.querySelector(<span class="string">'#multipleFileUploadSuccess'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadSingleFile</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">    formData.append(<span class="string">"file"</span>, file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"POST"</span>, <span class="string">"/uploadFile"</span>);</span><br><span class="line"></span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">        <span class="keyword">var</span> response = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">        <span class="keyword">if</span>(xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">            singleFileUploadError.style.display = <span class="string">"none"</span>;</span><br><span class="line">            singleFileUploadSuccess.innerHTML = <span class="string">"&lt;p&gt;File Uploaded Successfully.&lt;/p&gt;&lt;p&gt;DownloadUrl : &lt;a href='"</span> + response.fileDownloadUri + <span class="string">"' target='_blank'&gt;"</span> + response.fileDownloadUri + <span class="string">"&lt;/a&gt;&lt;/p&gt;"</span>;</span><br><span class="line">            singleFileUploadSuccess.style.display = <span class="string">"block"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            singleFileUploadSuccess.style.display = <span class="string">"none"</span>;</span><br><span class="line">            singleFileUploadError.innerHTML = (response &amp;&amp; response.message) || <span class="string">"Some Error Occurred"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xhr.send(formData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadMultipleFiles</span>(<span class="params">files</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; files.length; index++) &#123;</span><br><span class="line">        formData.append(<span class="string">"files"</span>, files[index]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"POST"</span>, <span class="string">"/uploadMultipleFiles"</span>);</span><br><span class="line"></span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">        <span class="keyword">var</span> response = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">        <span class="keyword">if</span>(xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">            multipleFileUploadError.style.display = <span class="string">"none"</span>;</span><br><span class="line">            <span class="keyword">var</span> content = <span class="string">"&lt;p&gt;All Files Uploaded Successfully&lt;/p&gt;"</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; response.length; i++) &#123;</span><br><span class="line">                content += <span class="string">"&lt;p&gt;DownloadUrl : &lt;a href='"</span> + response[i].fileDownloadUri + <span class="string">"' target='_blank'&gt;"</span> + response[i].fileDownloadUri + <span class="string">"&lt;/a&gt;&lt;/p&gt;"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            multipleFileUploadSuccess.innerHTML = content;</span><br><span class="line">            multipleFileUploadSuccess.style.display = <span class="string">"block"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            multipleFileUploadSuccess.style.display = <span class="string">"none"</span>;</span><br><span class="line">            multipleFileUploadError.innerHTML = (response &amp;&amp; response.message) || <span class="string">"Some Error Occurred"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xhr.send(formData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">singleUploadForm.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> files = singleFileUploadInput.files;</span><br><span class="line">    <span class="keyword">if</span>(files.length === <span class="number">0</span>) &#123;</span><br><span class="line">        singleFileUploadError.innerHTML = <span class="string">"Please select a file"</span>;</span><br><span class="line">        singleFileUploadError.style.display = <span class="string">"block"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    uploadSingleFile(files[<span class="number">0</span>]);</span><br><span class="line">    event.preventDefault();</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">multipleUploadForm.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> files = multipleFileUploadInput.files;</span><br><span class="line">    <span class="keyword">if</span>(files.length === <span class="number">0</span>) &#123;</span><br><span class="line">        multipleFileUploadError.innerHTML = <span class="string">"Please select at least one file"</span>;</span><br><span class="line">        multipleFileUploadError.style.display = <span class="string">"block"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    uploadMultipleFiles(files);</span><br><span class="line">    event.preventDefault();</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，文件的上传及下载功能已完成。在正式环境中可能还需要将上传的文件存储到数据库，此处按照实际需求去处理即可。</p><p>本文源代码地址：<a href="https://github.com/JemGeek/spring-boot-sample/tree/master/spring-boot-file-upload" target="_blank" rel="noopener">https://github.com/JemGeek/spring-boot-sample/tree/master/spring-boot-file-upload</a></p><p>本文参考(需要翻墙)：<a href="https://www.callicoder.com/spring-boot-file-upload-download-rest-api-example/" target="_blank" rel="noopener">https://www.callicoder.com/spring-boot-file-upload-download-rest-api-example/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文件的上传及下载功能是开发人员在日常应用及编程开发中经常会遇到的。正好最近开发需要用到此功能，虽然本人是 Android 开发人员，但还是业余客串了一下后台开发。&lt;/p&gt;&lt;p&gt;在本文中，您将学习如何使用 Spring Boot 实现 Web 服务中的文件上传和下载功能。首先会构建一个 REST APIs 实现上传及下载的功能，然后使用 Postman 工具来测试这些接口，最后创建一个 Web 界面使用 JavaScript 调用接口演示完整的功能。最终界面及功能如下：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/03/29/5c9e3f3eeb13c.png&quot; alt=&quot;show_demo.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://xingtuai.com/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="http://xingtuai.com/tags/Spring-Boot/"/>
    
      <category term="Spring" scheme="http://xingtuai.com/tags/Spring/"/>
    
      <category term="Java" scheme="http://xingtuai.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java equals 和 == 完全解析</title>
    <link href="http://xingtuai.com/archives/2019/java-equals-fully-resolved.html"/>
    <id>http://xingtuai.com/archives/2019/java-equals-fully-resolved.html</id>
    <published>2019-03-25T05:30:35.000Z</published>
    <updated>2020-01-05T03:33:12.112Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/03/25/5c9867e360501.jpg" alt="equals_logo.jpg"></p><p>今天朋友突然问到一个问题：</p><blockquote><p>两个对象使用 <code>x.equals(y)</code> 判断结果为 <code>true</code> 时，两个对象的 <code>hashCode</code> 可以不同吗？</p></blockquote><p>在Java编程中，判断两个对象是否相等常常使用 <code>equals()</code> 或是 <code>==</code> ，但是其中的区别和原理可能很多人并不完全清楚。今天就借着上面这个问题来看看 <code>equals()</code> 和 <code>==</code> 的区别和原理。</p><a id="more"></a><h2 id="1-数据类型与-的含义"><a href="#1-数据类型与-的含义" class="headerlink" title="1. 数据类型与==的含义"></a>1. 数据类型与==的含义</h2><p>Java中的数据类型分为基本数据类型和引用数据类型：</p><ol><li><p>基本类型：编程语言中内置的最小粒度的数据类型。它包括四大类八种类型</p><ul><li>4种整数类型：byte、short、int、long</li><li>2种浮点数类型：float、double</li><li>1种字符类型：char</li><li>1种布尔类型：boolean</li></ul></li><li><p>引用类型：引用也叫句柄，引用类型，是编程语言中定义的在句柄中存放着实际内容所在地址的地址值的一种数据形式</p><ul><li>类</li><li>接口</li><li>数组</li></ul></li></ol><ul><li>对于基本类型来说， <code>==</code> 比较的是它们的值</li><li>对于引用类型来说， <code>==</code> 比较的是它们在内存中存放的地址（堆内存地址）</li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    String str1 = <span class="string">"James"</span>;</span><br><span class="line">    String str2 = <span class="string">"James"</span>;</span><br><span class="line"></span><br><span class="line">    String str3 = <span class="keyword">new</span> String(<span class="string">"James"</span>);</span><br><span class="line">    String str4 = <span class="keyword">new</span> String(<span class="string">"James"</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"num1 == num2 : "</span> + (num1 == num2));</span><br><span class="line">    System.out.println(<span class="string">"str1 address : "</span> + System.identityHashCode(str1) + <span class="string">";\nstr2 address : "</span> + System.identityHashCode(str1) + <span class="string">";\nstr1 == str2 : "</span> + (str1 == str2));</span><br><span class="line">    System.out.println(<span class="string">"str3 address : "</span> + System.identityHashCode(str3) + <span class="string">";\nstr4 address : "</span> + System.identityHashCode(str4) + <span class="string">";\nstr3 == str4 : "</span> + (str3 == str4));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的代码，可以得到以下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num1 == num2 : true</span><br><span class="line"></span><br><span class="line">str1 address : 1174290147;</span><br><span class="line">str2 address : 1174290147;</span><br><span class="line">str1 == str2 : true</span><br><span class="line"></span><br><span class="line">str3 address : 1289696681;</span><br><span class="line">str4 address : 1285044316;</span><br><span class="line">str3 == str4 : false</span><br></pre></td></tr></table></figure><p>可以看到str1和str2的内存地址都是<code>1174290147</code>,所以使用<code>==</code>判断为<code>true</code>,但是str3和str4的地址是不同的，所以判断为<code>false</code>。</p><h2 id="2-equals-方法解析"><a href="#2-equals-方法解析" class="headerlink" title="2. equals() 方法解析"></a>2. equals() 方法解析</h2><p>在Java语言中，所有类都是继承于<code>Object</code>这个超类的，在这个类中也有一个<code>equals()</code>方法，那么我们先来看一下这个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看得出，这个方法很简单，就是比较对象的内存地址的。所以在对象没有重写这个方法时，默认使用此方法，即比较对象的内存地址值。但是类似于String、Integer等类均已重写了<code>equals()</code>。下面以<code>String</code>为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = length();</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.length()) &#123;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (charAt(i) != anotherString.charAt(i))</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>很明显，String的equals()方法仅仅是对比它的 <strong>数据值</strong>，而不是对象的 <strong>内存地址</strong> 。</p><p>以 <code>String</code> 为例测试一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String str1 = <span class="string">"James"</span>;</span><br><span class="line">    String str2 = <span class="string">"James"</span>;</span><br><span class="line"></span><br><span class="line">    String str3 = <span class="keyword">new</span> String(<span class="string">"James"</span>);</span><br><span class="line">    String str4 = <span class="keyword">new</span> String(<span class="string">"James"</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"str1 address : "</span> + System.identityHashCode(str1) + <span class="string">";\nstr2 address : "</span> + System.identityHashCode(str1) + <span class="string">";\nstr1.equals(str2) : "</span> + str1.equals(str2));</span><br><span class="line">    System.out.println(<span class="string">"str3 address : "</span> + System.identityHashCode(str3) + <span class="string">";\nstr4 address : "</span> + System.identityHashCode(str4) + <span class="string">";\nstr3.equals(str4) : "</span> + str3.equals(str4));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str1 address : 1174290147;</span><br><span class="line">str2 address : 1174290147;</span><br><span class="line">str1.equals(str2) : true</span><br><span class="line"></span><br><span class="line">str3 address : 1289696681;</span><br><span class="line">str4 address : 1285044316;</span><br><span class="line">str3.equals(str4) : true</span><br></pre></td></tr></table></figure><p>可以发现不管对象的内存地址是否相同并不影响其结果，所以String类型比较的是 <strong>数据值</strong>, 而不是 <strong>内存地址值</strong>。</p><p>所以总结一下<code>equals()</code> 和 <code>==</code> 的区别：</p><ol><li><p><code>==</code></p><ul><li>基本类型：对比它们的值是否相等</li><li>引用类型：对比它们的内存地址是否相等</li></ul></li><li><p><code>equals()</code></p><ul><li>基本类型：使用<code>==</code>进行比较，基本类型无 equals() 方法。</li><li>引用类型：<ul><li>默认情况下，对比它们的地址是否相等；</li><li>如果<code>equals()</code>方法被重写，则根据重写的要求来比较，一般是比较 <strong>数据值</strong> 是否相同。</li></ul></li></ul></li></ol><h2 id="3-equals-与-hashCode"><a href="#3-equals-与-hashCode" class="headerlink" title="3. equals() 与 hashCode()"></a>3. equals() 与 hashCode()</h2><p>在详细的了解了<code>==</code>和<code>equals()</code>的作用和区别后，现在来研究一下之前的那个问题：</p><blockquote><p>两个对象使用<code>x.equals(y)</code>判断结果为<code>true</code>时，两个对象的<code>hashCode</code>可以不同吗？</p></blockquote><p>首先我们需要知道<code>hashCode</code>到底是什么？还是从<code>Object</code>这个超类来看一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> identityHashCode(<span class="keyword">this</span>); <span class="comment">// 此处返回对象的内存地址值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码也很简单，看来默认情况下，<code>hashCode</code>就等于对象的 <strong>内存地址值</strong>（注：<code>System.identityHashCode(Object obj)</code>方法用于获取对象的内存地址，之前的样例代码中有使用）。和<code>equals()</code>方法一样重写之后，<code>hashCode()</code>方法方法也是可以被重写的，而且两者一般情况下都是成对出现。</p><p>简单测试一下String类型重写<code>hashCode()</code>方法之后有什么变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str1 = <span class="string">"James"</span>;</span><br><span class="line">    System.out.println(<span class="string">"str1 address : "</span> + System.identityHashCode(str1) + <span class="string">"\nstr1 hashCode : "</span> + str1.hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 address : 1174290147</span><br><span class="line">str1 hashCode : 71338276</span><br></pre></td></tr></table></figure><p>很明显，hashCode 已经不是内存地址了。</p><p>那么总结一下：</p><ul><li><code>equals()</code>：默认情况下比较的是对象的 <strong>内存地址值</strong>，被重写后按照重写要求进行比较，一般是比较对象的 <strong>数据值</strong></li><li><code>hashCode()</code>: 默认情况下为对象的 <strong>内存地址值</strong>，被重写后按照重写要求生成新的值。</li></ul><p>到此对于刚开始提出的问题应该很好解决了。对于这两个对象，只要我们重写<code>equals()</code>方法，就可以比较对象的 <strong>数据值</strong>，而不重写<code>hashCode()</code>方法，此时两个对象的 <strong>hashCode</strong> 就默认为内存地址值了，只要将两个对象指向不同的地址即可。</p><p>验证环节，先创建一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomBean</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        CustomBean that = (CustomBean) o;</span><br><span class="line">        <span class="keyword">return</span> age == that.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, that.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Override</span></span><br><span class="line">    <span class="comment">// public int hashCode() &#123;</span></span><br><span class="line">    <span class="comment">//     return Objects.hash(name, age);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CustomBean x = <span class="keyword">new</span> CustomBean(<span class="string">"James"</span>, <span class="number">18</span>);</span><br><span class="line">    CustomBean y = <span class="keyword">new</span> CustomBean(<span class="string">"James"</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"x.hashCode: "</span> + x.hashCode());</span><br><span class="line">    System.out.println(<span class="string">"x address : "</span> + System.identityHashCode(x));</span><br><span class="line">    System.out.println(<span class="string">"y.hashCode: "</span> + y.hashCode());</span><br><span class="line">    System.out.println(<span class="string">"x address : "</span> + System.identityHashCode(y));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"x and y is equals : "</span> + x.equals(y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x.hashCode: 1174290147</span><br><span class="line">x address : 1174290147</span><br><span class="line"></span><br><span class="line">y.hashCode: 1289696681</span><br><span class="line">x address : 1289696681</span><br><span class="line"></span><br><span class="line">x and y is equals : true</span><br></pre></td></tr></table></figure><p>很明显，这就是问题中所描述的那种情况：两个对象使用<code>x.equals(y)</code>判断结果为<code>true</code>时，两个对象的<code>hashCode</code>不相同。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>至此，<code>==</code>和<code>equals()</code>的区别及作用，<code>equals()</code>和<code>hashCode</code>的关系及使用已经了解清楚了。下面再总结一下：</p><p>对于<code>equals()</code> 和 <code>==</code> 的区别：</p><ol><li><p><code>==</code></p><ul><li>基本类型：对比它们的值是否相等</li><li>引用类型：对比它们的内存地址是否相等</li></ul></li><li><p><code>equals()</code></p></li></ol><ul><li>基本类型：使用<code>==</code>进行比较，基本类型无 equals() 方法。</li><li>引用类型：<ul><li>默认情况下，对比它们的地址是否相等；</li><li>如果<code>equals()</code>方法被重写，则根据重写的要求来比较，一般是比较 <strong>数据值</strong> 是否相同。</li></ul></li></ul><p>对于<code>equals()</code>和<code>hashCode()</code>的关系：</p><p>根据<code>Object</code>超类中的文档说明，<code>equals()</code>和<code>hashCode()</code>两个方法应该 <strong>同进同退</strong>。上面的例子只是举例说明存在那种情况，但那并不是一个很好的应用。</p><ul><li>所以一定要记住<code>equals()</code>和<code>hashCode()</code>两个方法应该 <strong>同进同退</strong>。</li><li>所以一定要记住<code>equals()</code>和<code>hashCode()</code>两个方法应该 <strong>同进同退</strong>。</li><li>所以一定要记住<code>equals()</code>和<code>hashCode()</code>两个方法应该 <strong>同进同退</strong>。</li></ul><p>重要的事情说三遍。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/03/25/5c9867e360501.jpg&quot; alt=&quot;equals_logo.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;今天朋友突然问到一个问题：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;两个对象使用 &lt;code&gt;x.equals(y)&lt;/code&gt; 判断结果为 &lt;code&gt;true&lt;/code&gt; 时，两个对象的 &lt;code&gt;hashCode&lt;/code&gt; 可以不同吗？&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在Java编程中，判断两个对象是否相等常常使用 &lt;code&gt;equals()&lt;/code&gt; 或是 &lt;code&gt;==&lt;/code&gt; ，但是其中的区别和原理可能很多人并不完全清楚。今天就借着上面这个问题来看看 &lt;code&gt;equals()&lt;/code&gt; 和 &lt;code&gt;==&lt;/code&gt; 的区别和原理。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xingtuai.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://xingtuai.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot系列之Log4j2的配置使用</title>
    <link href="http://xingtuai.com/archives/2017/spring-boot-log4j2-config.html"/>
    <id>http://xingtuai.com/archives/2017/spring-boot-log4j2-config.html</id>
    <published>2017-05-11T06:27:23.000Z</published>
    <updated>2019-04-01T14:54:12.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot系列之Log4j2的配置使用"><a href="#Spring-Boot系列之Log4j2的配置使用" class="headerlink" title="Spring Boot系列之Log4j2的配置使用"></a>Spring Boot系列之Log4j2的配置使用</h1><p>后台程序开发及上线时，一般都会用到Log信息打印及Log日志记录，开发时通过Log信息打印可以快速的定位问题所在，帮助我们快捷开发。程序上线后如遇到Bug或错误，此时则需要日志记录来查找发现问题所在。</p><p>Spring Boot 可以集成很多不同的日志系统，其中最常用的Apache Log4j，而Log4j 2是Log4j的升级版本，Log4j 2相对于Log4j 1.x 有了很多显著的改善。所以这篇博客就直接来说说Spring Boot如何集成并配置使用Log4j2。</p><a id="more"></a><h2 id="1-导入Log4j2的包"><a href="#1-导入Log4j2的包" class="headerlink" title="1. 导入Log4j2的包"></a>1. 导入Log4j2的包</h2><p>如果你使用Gradle，则在<code>build.gradle</code>文件中添加以下依赖。示例代码中使用的是Gradle方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    // log4j2</span><br><span class="line">    implementation &quot;org.apache.logging.log4j:log4j-api:2.8&quot;</span><br><span class="line">    implementation &quot;org.apache.logging.log4j:log4j-core:2.8&quot;</span><br><span class="line">    // 用来支持Logger中的Async</span><br><span class="line">    implementation &apos;com.lmax:disruptor:3.3.6&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你使用Maven，则在<code>pom.xml</code>文件中添加以下依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lmax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>disruptor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-添加-log4j2-配置文件"><a href="#2-添加-log4j2-配置文件" class="headerlink" title="2. 添加 log4j2 配置文件"></a>2. 添加 log4j2 配置文件</h2><p>在项目的resources资源文件根目录下创建<code>log4j2.xml</code>文件并复制以下代码到文件中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，</span></span><br><span class="line"><span class="comment"> 你会看到log4j2内部各种详细输出。可以设置成OFF(关闭)或Error(只输出错误信息)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">"OFF"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件目录和压缩文件目录配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"fileName"</span>&gt;</span>/home/James/log/spring_log<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"fileGz"</span>&gt;</span>/home/James/log/spring_log/7z<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 输出控制台日志的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 输出日志的格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">"infoFile"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;fileName&#125;/web-info.log"</span> <span class="attr">immediateFlush</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">filePattern</span>=<span class="string">"$&#123;fileGz&#125;/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.web-info.gz"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;yyyy-MM-dd 'at' HH:mm:ss z&#125; [%t] %-5level %logger&#123;36&#125; %L %M - %msg%xEx%n"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">"6"</span> <span class="attr">modulate</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"50 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 只记录info和warn级别信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"error"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 存储所有error信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">"errorFile"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;fileName&#125;/web-error.log"</span> <span class="attr">immediateFlush</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">filePattern</span>=<span class="string">"$&#123;fileGz&#125;/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.web-error.gz"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;yyyy-MM-dd 'at' HH:mm:ss z&#125; [%t] %-5level %logger&#123;36&#125; %L %M - %msg%xEx%n"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">"6"</span> <span class="attr">modulate</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"50 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 只记录error级别信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"error"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 全局配置，默认所有的Logger都继承此配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- AsyncRoot - 异步记录日志 - 需要LMAX Disruptor的支持 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AsyncRoot</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"infoFile"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"errorFile"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">AsyncRoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-编写Log4j2辅助类"><a href="#3-编写Log4j2辅助类" class="headerlink" title="3. 编写Log4j2辅助类"></a>3. 编写Log4j2辅助类</h2><p>做好以上的配置之后，我们可以编写一个辅助类，让我们更方便的使用Log4j2来记录日志。</p><p>在utils包中创建<code>L.java</code>类文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Logger 日志记录辅助类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by James on 2017/5/11.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">L</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LogManager.getLogger();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">L</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* cannot be instantiated */</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"cannot be instantiated"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Logger <span class="title">getLogger</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LOGGER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">t</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        LOGGER.trace(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        LOGGER.debug(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        LOGGER.warn(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        LOGGER.error(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        LOGGER.fatal(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写完辅助类，使用起来就很简单了，通过下面的代码就可以轻松使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String msg = <span class="string">"Spring Boot系列之Log4j2的配置及使用"</span>;</span><br><span class="line">        L.t(msg); <span class="comment">// Log4j2.xml中配置的level="info",所以此条信息并不会打印在控制台</span></span><br><span class="line">        L.d(msg); <span class="comment">// 同上，级别：TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</span></span><br><span class="line">        L.i(msg);</span><br><span class="line">        L.w(msg);</span><br><span class="line">        L.e(msg);</span><br><span class="line">        L.f(msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的辅助类只是写了一些基本的使用方法，你可以根据你的需求进行定制，增加更多的辅助方法。对于辅助类中没有提供的方法也可以使用<code>L.getLogger()</code>方法获取Logger实例来使用。</p><h2 id="4-结果验证"><a href="#4-结果验证" class="headerlink" title="4. 结果验证"></a>4. 结果验证</h2><p>日志的Level分级：TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL。</p><p>因为我的log4j2中的level设置的是<code>INFO</code>级别。所以打印信息中只能看到 <code>INFO</code> 、<code>WARN</code> 、 <code>ERROR</code> 三种级别(FATAL级别的信息没有打印，否则也可以看到)。</p><p>打印信息如下图所示：</p><p><img src="https://ooo.0o0.ooo/2017/05/11/59141c76b8b07.png" alt="Log Info"></p><p>同时在电脑系统中生成了Log文件，如下图所示：</p><p><img src="https://i.loli.net/2019/04/01/5ca223a39fdc0.png" alt="Log File"></p><p>观察路径可以发现，这个路径正是在<code>Log4j2.xml</code>中设置的路径：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 日志文件目录和压缩文件目录配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"fileName"</span>&gt;</span>/home/James/log/spring_log<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"fileGz"</span>&gt;</span>/home/James/log/spring_log/7z<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-更多"><a href="#5-更多" class="headerlink" title="5. 更多"></a>5. 更多</h2><p>Log4j2的Github地址：<a href="https://github.com/apache/logging-log4j2" target="_blank" rel="noopener">https://github.com/apache/logging-log4j2</a></p><p>本教程的示例代码地址：<a href="https://github.com/JemGeek/spring-boot-sample/tree/master/spring-boot-log4j2" target="_blank" rel="noopener">https://github.com/JemGeek/spring-boot-sample/tree/master/spring-boot-log4j2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Boot系列之Log4j2的配置使用&quot;&gt;&lt;a href=&quot;#Spring-Boot系列之Log4j2的配置使用&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot系列之Log4j2的配置使用&quot;&gt;&lt;/a&gt;Spring Boot系列之Log4j2的配置使用&lt;/h1&gt;&lt;p&gt;后台程序开发及上线时，一般都会用到Log信息打印及Log日志记录，开发时通过Log信息打印可以快速的定位问题所在，帮助我们快捷开发。程序上线后如遇到Bug或错误，此时则需要日志记录来查找发现问题所在。&lt;/p&gt;&lt;p&gt;Spring Boot 可以集成很多不同的日志系统，其中最常用的Apache Log4j，而Log4j 2是Log4j的升级版本，Log4j 2相对于Log4j 1.x 有了很多显著的改善。所以这篇博客就直接来说说Spring Boot如何集成并配置使用Log4j2。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://xingtuai.com/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="http://xingtuai.com/tags/Spring-Boot/"/>
    
      <category term="Spring" scheme="http://xingtuai.com/tags/Spring/"/>
    
      <category term="Java" scheme="http://xingtuai.com/tags/Java/"/>
    
      <category term="log4j" scheme="http://xingtuai.com/tags/log4j/"/>
    
  </entry>
  
</feed>
